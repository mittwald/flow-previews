3:I[4152,[],""]
5:I[2855,[],""]
4:["slug","02-components/actions/action","c"]
0:["XHTEbDl3QZVfmx_-gx70H",[[["",{"children":[["slug","02-components/actions/action","c"],{"children":["__PAGE__?{\"slug\":[\"02-components\",\"actions\",\"action\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","02-components/actions/action","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/flow-previews/docs/feature/select/_next/static/css/83ee23c18339a858.css","precedence":"next","crossOrigin":""}]]}]]},[null,"$L6",null]],[[["$","link","0",{"rel":"stylesheet","href":"/flow-previews/docs/feature/select/_next/static/css/a8d35be806d8656b.css","precedence":"next","crossOrigin":""}]],"$L7"]]]]
8:I[3702,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","764","static/chunks/764-16c762efe0f5a64b.js","276","static/chunks/276-ea3a70aba62767ad.js","535","static/chunks/535-d683ac9050e19139.js","185","static/chunks/app/layout-06a0ada94ccdf23a.js"],""]
9:I[8219,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","764","static/chunks/764-16c762efe0f5a64b.js","276","static/chunks/276-ea3a70aba62767ad.js","535","static/chunks/535-d683ac9050e19139.js","185","static/chunks/app/layout-06a0ada94ccdf23a.js"],"IconMittwald"]
a:I[9656,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","764","static/chunks/764-16c762efe0f5a64b.js","935","static/chunks/935-1e1d11353886d8b4.js","535","static/chunks/535-d683ac9050e19139.js","877","static/chunks/app/%5B...slug%5D/page-8c6e0dcd63a7f465.js"],""]
b:I[4009,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","764","static/chunks/764-16c762efe0f5a64b.js","276","static/chunks/276-ea3a70aba62767ad.js","535","static/chunks/535-d683ac9050e19139.js","185","static/chunks/app/layout-06a0ada94ccdf23a.js"],""]
c:I[2652,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","764","static/chunks/764-16c762efe0f5a64b.js","276","static/chunks/276-ea3a70aba62767ad.js","535","static/chunks/535-d683ac9050e19139.js","185","static/chunks/app/layout-06a0ada94ccdf23a.js"],""]
37:I[1536,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","764","static/chunks/764-16c762efe0f5a64b.js","276","static/chunks/276-ea3a70aba62767ad.js","535","static/chunks/535-d683ac9050e19139.js","185","static/chunks/app/layout-06a0ada94ccdf23a.js"],""]
38:I[9373,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","764","static/chunks/764-16c762efe0f5a64b.js","276","static/chunks/276-ea3a70aba62767ad.js","535","static/chunks/535-d683ac9050e19139.js","185","static/chunks/app/layout-06a0ada94ccdf23a.js"],""]
11c:I[8246,["384","static/chunks/3ceb1ae0-7be1ee460fb2335f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","764","static/chunks/764-16c762efe0f5a64b.js","935","static/chunks/935-1e1d11353886d8b4.js","535","static/chunks/535-d683ac9050e19139.js","877","static/chunks/app/%5B...slug%5D/page-8c6e0dcd63a7f465.js"],""]
d:Tb4f,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    strong: "strong",
    h2: "h2",
    code: "code",
    pre: "pre"
  }, _provideComponents(), props.components), {InlineAlert, Heading, Content} = _components;
  if (!Content) _missingMdxReference("Content", true);
  if (!Heading) _missingMdxReference("Heading", true);
  if (!InlineAlert) _missingMdxReference("InlineAlert", true);
  return _jsxs(_Fragment, {
    children: [_jsxs(InlineAlert, {
      children: [_jsx(Heading, {
        children: "Early development & stability notice"
      }), _jsx(Content, {
        children: _jsxs(_components.p, {
          children: ["This project is in ", _jsx(_components.strong, {
            children: "early development"
          }), " stage, and we do not offer any\nstability guarantees of any kind. We welcome you to give this project a try\nand we're looking forward for any feedback on this project in this stage of\ndevelopment. However, please do not rely on any inputs or outputs of this\nproject to remain stable."]
        })
      })]
    }), "\n", _jsx(_components.h2, {
      children: "Installing the Flow React Component Library"
    }), "\n", _jsxs(_components.p, {
      children: ["The Flow React Component Library can be installed using a package manager like\n", _jsx(_components.code, {
        children: "npm"
      }), " or ", _jsx(_components.code, {
        children: "yarn"
      }), "."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-shell",
        children: "yarn add @mittwald/flow-react-components\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "All components are available in this one package for ease of dependency\nmanagement."
    }), "\n", _jsx(_components.h2, {
      children: "Import styles"
    }), "\n", _jsx(_components.p, {
      children: "You have to import the bundled stylesheet in order to get the correct component\nstyles. Add this line to your project's entry point."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-react-components/styles\";\n"
      })
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
e:T1659,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    h2: "h2",
    code: "code",
    pre: "pre",
    h3: "h3",
    h4: "h4",
    strong: "strong"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.p, {
      children: "The Flow Component libraries are styled by a shared stylesheet, that can also be\nused standalone. This might be useful if you want to use your own framework to\nbuild components following the mittwald styling guidelines."
    }), "\n", _jsx(_components.p, {
      children: "On this page you can find information about how to install the stylesheet and\nhow the classnames are structured."
    }), "\n", _jsx(_components.h2, {
      children: "Install the standalone stylesheet"
    }), "\n", _jsxs(_components.p, {
      children: ["At this point of development you can only get the stylesheet via NPM. The Flow\nStylesheet Library can be installed using a package manager like ", _jsx(_components.code, {
        children: "npm"
      }), " or\n", _jsx(_components.code, {
        children: "yarn"
      }), "."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "yarn add @mittwald/flow-stylesheet\n"
      })
    }), "\n", _jsx(_components.h2, {
      children: "Import styles"
    }), "\n", _jsx(_components.p, {
      children: "You have to import the bundled stylesheet in order to get the correct component\nstyles. Add this line to your project's entry point."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-stylesheet/css\";\n"
      })
    }), "\n", _jsx(_components.h2, {
      children: "Using the stylesheet"
    }), "\n", _jsx(_components.p, {
      children: "If you want to get started, you should probably learn how the class names are\nstructured. The class names provided in this stylesheet are following a\nconsistent, component-based and easy to understand schema."
    }), "\n", _jsx(_components.h3, {
      children: "General class name notation"
    }), "\n", _jsxs(_components.p, {
      children: ["The class names are all in lowercase and using ", _jsx(_components.code, {
        children: "-"
      }), " to separate words and ", _jsx(_components.code, {
        children: "--"
      }), " to\nseparate logical sections."]
    }), "\n", _jsxs(_components.p, {
      children: ["The first logical section is always the ", _jsx(_components.code, {
        children: "flow"
      }), " namespace. Other sections might\nbe:"]
    }), "\n", _jsx(_components.h4, {
      children: "Components"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button\n.flow--heading\n.flow--status-icon\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Sub-Components"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--navigation\n.flow--navigation--navigation-item\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Specialization: different variants"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--primary\n.flow--inline-alert--danger\n.flow--icon--fixed-width\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Specialization: components aligned in a composition"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--icon\n.flow--inline-alert--status-icon\n"
      })
    }), "\n", _jsx(_components.h3, {
      children: "A note to specialization"
    }), "\n", _jsxs(_components.p, {
      children: ["Class Names used to specialize a basic component must always be used in\n", _jsx(_components.strong, {
        children: "addition to the basic class name"
      }), ". Here are some examples that illustrate\nthis requirement."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "variants"
    }), "\n", _jsx(_components.h4, {
      children: "Combined variants"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multiple-variants"
    }), "\n", _jsx(_components.h4, {
      children: "Components aligned in a composition"
    }), "\n", _jsxs(_components.p, {
      children: ["It is a common practice to compose larger components out of already existing\nsmaller ones. Take the Inline Alert example. The Inline Alert is composed out of\nan icon, a heading and some optional content. These contained components must\nhave their basic class name (", _jsx(_components.code, {
        children: "flow--icon"
      }), "), to get their basic styling and the\nspecialization class name (", _jsx(_components.code, {
        children: "flow--inline-alert--status-icon"
      }), ") to get the Inline\nAlert specific styles."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "composition"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
f:T5b1,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Pending"
    }), "\n", _jsx(_components.p, {
      children: "When an async action executes longer than 1000ms, the pending state is shown."
    }), "\n", _jsx(LiveCodeEditor, {
      example: "longAction"
    }), "\n", _jsx(_components.h2, {
      children: "Feedback"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "feedback"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
10:T5b1,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Danger"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "danger"
    }), "\n", _jsx(_components.h2, {
      children: "Info"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "info"
    }), "\n", _jsx(_components.h2, {
      children: "Additional secondary button"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "additionalSecondary"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
11:Tb16,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code",
    h3: "h3"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "onPress"
      }), " prop to support interactions via mouse, keyboard, and touch."]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Different variants"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "variants"
    }), "\n", _jsx(_components.h2, {
      children: "Plain style"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "plain"
    }), "\n", _jsx(_components.h2, {
      children: "Soft style"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "soft"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "<Icon />"
      }), " inside a ", _jsx(_components.code, {
        children: "<Button />"
      }), " to display an icon."]
    }), "\n", _jsx(_components.h3, {
      children: "Accessibility"
    }), "\n", _jsxs(_components.p, {
      children: ["The underlying SVG image automatically receives the ", _jsx(_components.code, {
        children: "aria-hidden=true"
      }), "\nattribute. Use the ", _jsx(_components.code, {
        children: "aria-label"
      }), " attribute at the Button to describe the\nassociated action."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    }), "\n", _jsx(_components.h2, {
      children: "With icon and text"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "iconText"
    }), "\n", _jsx(_components.h2, {
      children: "Small variant"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "small"
    }), "\n", _jsx(_components.h2, {
      children: "States"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "states"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
12:T538,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Single selection"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "single-select"
    }), "\n", _jsx(_components.h2, {
      children: "Multi selection"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multi-select"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
13:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
14:T98c,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "With initials"
    }), "\n", _jsxs(_components.p, {
      children: ["Initials are automatically created from the text provided to the ", _jsx(_components.code, {
        children: "<Initials />"
      }), "\ncomponent."]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With image"
    }), "\n", _jsxs(_components.p, {
      children: ["Use an ", _jsx(_components.code, {
        children: "<Image />"
      }), " inside the ", _jsx(_components.code, {
        children: "<Avatar />"
      }), " to display a profile image."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "image"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsxs(_components.p, {
      children: ["Any ", _jsx(_components.code, {
        children: "<Icon />"
      }), " can be displayed inside the ", _jsx(_components.code, {
        children: "<Avatar />"
      }), "."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    }), "\n", _jsx(_components.h2, {
      children: "Sizes"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "sizes"
    }), "\n", _jsx(_components.h2, {
      children: "Color variants"
    }), "\n", _jsx(_components.p, {
      children: "The color depends on the components children. This adds some visual variance\nwhen displaying a list of avatars."
    }), "\n", _jsx(LiveCodeEditor, {
      example: "colors"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
15:T519,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Levels"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "levels"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
16:T72a,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With icon from Tabler"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "tabler"
    }), "\n", _jsx(_components.h2, {
      children: "With SVG"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "svg"
    }), "\n", _jsx(_components.h2, {
      children: "With SVG string"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "svg-string"
    }), "\n", _jsx(_components.h2, {
      children: "Coloring"
    }), "\n", _jsx(_components.p, {
      children: "If the used SVG supports colors, the icon can be colored via CSS."
    }), "\n", _jsx(LiveCodeEditor, {
      example: "coloring"
    }), "\n", _jsx(_components.h2, {
      children: "Sizes"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "sizes"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
17:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
18:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
19:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
1a:T5b2,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With copy button"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "copy-button"
    }), "\n", _jsx(_components.h2, {
      children: "With link"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "link"
    }), "\n", _jsx(_components.h2, {
      children: "With inline code"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "inline-code"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
1b:T63d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With emulateBoldWidth"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "emulateBoldWidth"
      }), " prop if you need your text to have the width, it\nwould have with bold font weight, even if it is regular font weight (For example\nin horizontal navigations, where the font weight of the active item changes to\nbold)."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "emulateBoldWidth"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
1c:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
1d:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
1e:T665,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With Checkbox Buttons"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "buttons"
    }), "\n", _jsx(_components.h2, {
      children: "With custom columns"
    }), "\n", _jsxs(_components.p, {
      children: ["The ", _jsx(_components.code, {
        children: "CheckboxGroup"
      }), " uses ", _jsx(_components.code, {
        children: "ColumnLayout"
      }), " to make it possible to adapt column\nwidths as needed"]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "customColumns"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
1f:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
20:T619,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    }), "\n", _jsx(_components.h2, {
      children: "Required"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "required"
    }), "\n", _jsx(_components.h2, {
      children: "Invalid"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "invalid"
    }), "\n", _jsx(_components.h2, {
      children: "With unit"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "unit"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
21:T6e8,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With Radio Buttons"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "buttons"
    }), "\n", _jsx(_components.h2, {
      children: "With custom columns"
    }), "\n", _jsxs(_components.p, {
      children: ["The ", _jsx(_components.code, {
        children: "RadioGroup"
      }), " uses ", _jsx(_components.code, {
        children: "ColumnLayout"
      }), " to make it possible to adapt column widths\nas needed"]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "customColumns"
    }), "\n", _jsx(_components.h2, {
      children: "Segmented variant"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "segmented"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
22:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
23:T52f,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With leading label"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "leading-label"
    }), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
24:T59d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    }), "\n", _jsx(_components.h2, {
      children: "Required"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "required"
    }), "\n", _jsx(_components.h2, {
      children: "Invalid"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "invalid"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
25:T59d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    }), "\n", _jsx(_components.h2, {
      children: "Required"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "required"
    }), "\n", _jsx(_components.h2, {
      children: "Invalid"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "invalid"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
26:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
27:T746,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Danger variant"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "danger"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    }), "\n", _jsx(_components.h2, {
      children: "Inline"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "inline"
      }), " property if you want to use a link inside a text block. Links\ninside a ", _jsx(_components.code, {
        children: "<Text />"
      }), " component will be rendered as inline links automatically."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "inline"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "inlineText"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
28:T520,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With icons"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icons"
    }), "\n", _jsx(_components.h2, {
      children: "With groups"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "groups"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
29:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
2a:T48c,import Modal, {
  ModalTrigger,
} from "@mittwald/flow-react-components/Modal";
import Content from "@mittwald/flow-react-components/Content";
import Text from "@mittwald/flow-react-components/Text";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import ButtonGroup from "@mittwald/flow-react-components/ButtonGroup";
import Button from "@mittwald/flow-react-components/Button";
import Heading from "@mittwald/flow-react-components/Heading";
import { Action } from "@mittwald/flow-react-components/Action";

<ModalTrigger>
  <Button variant="accent">Create customer</Button>
  <Modal>
    <Heading>New Customer</Heading>
    <Content>
      <Text>
        Create a new customer to manage your projects,
        members and payments.
      </Text>
      <TextField>
        <Label>Customer name</Label>
      </TextField>
    </Content>
    <ButtonGroup>
      <Action closeModal>
        <Button variant="accent">Create customer</Button>
        <Button style="soft" variant="secondary">
          Abort
        </Button>
      </Action>
    </ButtonGroup>
  </Modal>
</ModalTrigger>;
2b:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
2c:T524,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With content"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "with-content"
    }), "\n", _jsx(_components.h2, {
      children: "Status"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
2d:T4c2,import InlineAlert from "@mittwald/flow-react-components/InlineAlert";
import Heading from "@mittwald/flow-react-components/Heading";
import Content from "@mittwald/flow-react-components/Content";

<Row>
  <InlineAlert status="info">
    <Heading>Email address has been archived</Heading>
    <Content>
      As your domain has been deleted, this email address
      has been archived. To be able to send and receive
      emails, you must rename the address.
    </Content>
  </InlineAlert>

  <InlineAlert status="warning">
    <Heading>Storage is almost exceeded</Heading>
    <Content>
      Your storage space is over 80% utilized. We recommend
      that you upgrade the storage space to avoid
      disruptions during backups.
    </Content>
  </InlineAlert>

  <InlineAlert status="danger">
    <Heading>No SSL certificate could be issued</Heading>
    <Content>
      No SSL certificate could be issued for this domain
      because the domain IP does not point to your server
      IP.
    </Content>
  </InlineAlert>

  <InlineAlert status="success">
    <Heading>Your app is up to date</Heading>
    <Content>
      Your app has been updated to the current version.
    </Content>
  </InlineAlert>
</Row>;
2e:T49d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Status"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
2f:T5d2,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    h3: "h3",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(_components.h3, {
      children: "Accessibility"
    }), "\n", _jsxs(_components.p, {
      children: ["The ", _jsx(_components.code, {
        children: "aria-label"
      }), " is pre-filled with a standard translation based on the variant."]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Status"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
30:T96b,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    ul: "ul",
    li: "li",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(_components.p, {
      children: "By default columns will be set like this:"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: ["s: ", _jsx(_components.code, {
          children: "[1]"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["m: ", _jsx(_components.code, {
          children: "[1, 1]"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["l: ", _jsx(_components.code, {
          children: "[1, 1, 1]"
        })]
      }), "\n"]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Custom values"
    }), "\n", _jsx(_components.p, {
      children: "Larger sizes will inherit from smaller sizes, if they are not set:"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: ["s: ", _jsx(_components.code, {
          children: "[1]"
        }), " (default)"]
      }), "\n", _jsxs(_components.li, {
        children: ["m: ", _jsx(_components.code, {
          children: "[2, 1]"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["l: ", _jsx(_components.code, {
          children: "[2, 1]"
        }), " (inherited)"]
      }), "\n"]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "custom-values"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
31:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
32:T4aa,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With linked items"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "withLink"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
33:T64b,import {
  List,
  ListFilter,
  ListItemView,
  ListSorting,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import { Avatar } from "@mittwald/flow-react-components/Avatar";
import { Heading } from "@mittwald/flow-react-components/Heading";
import { Text } from "@mittwald/flow-react-components/Text";
import {
  ContextMenu,
  ContextMenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListFilter<Domain>
    property="type"
    mode="some"
    name="Type"
  />
  <ListSorting<Domain> property="domain" name="Domain" />
  <ListSorting<Domain> property="type" name="Type" />
  <ListItemView<Domain>>
    {(domain) => (
      <>
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Not verified
          </StatusBadge>
        )}
        <ContextMenu>
          <ContextMenuItem>Show details</ContextMenuItem>
          <ContextMenuItem>Delete</ContextMenuItem>
        </ContextMenu>
      </>
    )}
  </ListItemView>
</List>;
34:T5bb,import {
  List,
  ListItemView,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import { Avatar } from "@mittwald/flow-react-components/Avatar";
import { Heading } from "@mittwald/flow-react-components/Heading";
import { Text } from "@mittwald/flow-react-components/Text";
import ContextMenu, {
  ContextMenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import { Link } from "@mittwald/flow-react-components/Link";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListItemView<Domain>>
    {(domain) => (
      <Link href="#">
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Not verified
          </StatusBadge>
        )}
        <ContextMenu>
          <ContextMenuItem>Show details</ContextMenuItem>
          <ContextMenuItem>Delete</ContextMenuItem>
        </ContextMenu>
      </Link>
    )}
  </ListItemView>
</List>;
35:T5b6,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Multiple Sections"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multiple"
    }), "\n", _jsx(_components.h2, {
      children: "With status badge"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status-badge"
    }), "\n", _jsx(_components.h2, {
      children: "With switch"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "switch"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
36:T417,import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import Link from "@mittwald/flow-react-components/Link";
import Section from "@mittwald/flow-react-components/Section";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import { IconMember } from "@mittwald/flow-react-components/Icons";

<>
  <Section>
    <Heading>
      <IconMember />
      Personal Information
    </Heading>
    <TextField isRequired defaultValue="John">
      <Label>First name</Label>
    </TextField>
    <TextField isRequired defaultValue="Doe">
      <Label>Last name</Label>
    </TextField>
  </Section>
  <Section>
    <Heading>Newsletter</Heading>
    <Text>
      Upcoming releases, new features and tips about your
      hosting - we bring you the most important information
      in your inbox. Subscribe to our newsletter and stay up
      to date.
    </Text>
    <Link href="#">Subscribe</Link>
  </Section>
</>;
3a:Tb4f,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    strong: "strong",
    h2: "h2",
    code: "code",
    pre: "pre"
  }, _provideComponents(), props.components), {InlineAlert, Heading, Content} = _components;
  if (!Content) _missingMdxReference("Content", true);
  if (!Heading) _missingMdxReference("Heading", true);
  if (!InlineAlert) _missingMdxReference("InlineAlert", true);
  return _jsxs(_Fragment, {
    children: [_jsxs(InlineAlert, {
      children: [_jsx(Heading, {
        children: "Early development & stability notice"
      }), _jsx(Content, {
        children: _jsxs(_components.p, {
          children: ["This project is in ", _jsx(_components.strong, {
            children: "early development"
          }), " stage, and we do not offer any\nstability guarantees of any kind. We welcome you to give this project a try\nand we're looking forward for any feedback on this project in this stage of\ndevelopment. However, please do not rely on any inputs or outputs of this\nproject to remain stable."]
        })
      })]
    }), "\n", _jsx(_components.h2, {
      children: "Installing the Flow React Component Library"
    }), "\n", _jsxs(_components.p, {
      children: ["The Flow React Component Library can be installed using a package manager like\n", _jsx(_components.code, {
        children: "npm"
      }), " or ", _jsx(_components.code, {
        children: "yarn"
      }), "."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-shell",
        children: "yarn add @mittwald/flow-react-components\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "All components are available in this one package for ease of dependency\nmanagement."
    }), "\n", _jsx(_components.h2, {
      children: "Import styles"
    }), "\n", _jsx(_components.p, {
      children: "You have to import the bundled stylesheet in order to get the correct component\nstyles. Add this line to your project's entry point."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-react-components/styles\";\n"
      })
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
3b:{"description":"Welcome to the Flow documentation!"}
3c:{}
39:{"compiledSource":"$3a","frontmatter":"$3b","scope":"$3c"}
3d:{}
3e:["01-getting-started","installation"]
40:T1659,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    h2: "h2",
    code: "code",
    pre: "pre",
    h3: "h3",
    h4: "h4",
    strong: "strong"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.p, {
      children: "The Flow Component libraries are styled by a shared stylesheet, that can also be\nused standalone. This might be useful if you want to use your own framework to\nbuild components following the mittwald styling guidelines."
    }), "\n", _jsx(_components.p, {
      children: "On this page you can find information about how to install the stylesheet and\nhow the classnames are structured."
    }), "\n", _jsx(_components.h2, {
      children: "Install the standalone stylesheet"
    }), "\n", _jsxs(_components.p, {
      children: ["At this point of development you can only get the stylesheet via NPM. The Flow\nStylesheet Library can be installed using a package manager like ", _jsx(_components.code, {
        children: "npm"
      }), " or\n", _jsx(_components.code, {
        children: "yarn"
      }), "."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "yarn add @mittwald/flow-stylesheet\n"
      })
    }), "\n", _jsx(_components.h2, {
      children: "Import styles"
    }), "\n", _jsx(_components.p, {
      children: "You have to import the bundled stylesheet in order to get the correct component\nstyles. Add this line to your project's entry point."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-stylesheet/css\";\n"
      })
    }), "\n", _jsx(_components.h2, {
      children: "Using the stylesheet"
    }), "\n", _jsx(_components.p, {
      children: "If you want to get started, you should probably learn how the class names are\nstructured. The class names provided in this stylesheet are following a\nconsistent, component-based and easy to understand schema."
    }), "\n", _jsx(_components.h3, {
      children: "General class name notation"
    }), "\n", _jsxs(_components.p, {
      children: ["The class names are all in lowercase and using ", _jsx(_components.code, {
        children: "-"
      }), " to separate words and ", _jsx(_components.code, {
        children: "--"
      }), " to\nseparate logical sections."]
    }), "\n", _jsxs(_components.p, {
      children: ["The first logical section is always the ", _jsx(_components.code, {
        children: "flow"
      }), " namespace. Other sections might\nbe:"]
    }), "\n", _jsx(_components.h4, {
      children: "Components"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button\n.flow--heading\n.flow--status-icon\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Sub-Components"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--navigation\n.flow--navigation--navigation-item\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Specialization: different variants"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--primary\n.flow--inline-alert--danger\n.flow--icon--fixed-width\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Specialization: components aligned in a composition"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--icon\n.flow--inline-alert--status-icon\n"
      })
    }), "\n", _jsx(_components.h3, {
      children: "A note to specialization"
    }), "\n", _jsxs(_components.p, {
      children: ["Class Names used to specialize a basic component must always be used in\n", _jsx(_components.strong, {
        children: "addition to the basic class name"
      }), ". Here are some examples that illustrate\nthis requirement."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "variants"
    }), "\n", _jsx(_components.h4, {
      children: "Combined variants"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multiple-variants"
    }), "\n", _jsx(_components.h4, {
      children: "Components aligned in a composition"
    }), "\n", _jsxs(_components.p, {
      children: ["It is a common practice to compose larger components out of already existing\nsmaller ones. Take the Inline Alert example. The Inline Alert is composed out of\nan icon, a heading and some optional content. These contained components must\nhave their basic class name (", _jsx(_components.code, {
        children: "flow--icon"
      }), "), to get their basic styling and the\nspecialization class name (", _jsx(_components.code, {
        children: "flow--inline-alert--status-icon"
      }), ") to get the Inline\nAlert specific styles."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "composition"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
41:{}
42:{}
3f:{"compiledSource":"$40","frontmatter":"$41","scope":"$42"}
43:{"composition":"import ExampleSvg from \"@/content/01-getting-started/stylesheet/examples/components/ExampleSvg\";\n\n<aside className=\"flow--inline-alert flow--inline-alert--info\">\n  <ExampleSvg className=\"flow--icon flow--inline-alert--status-icon\" />\n  <h3 className=\"flow--heading flow--inline-alert--heading\">\n    Email address has been archived\n  </h3>\n  <div className=\"flow--inline-alert--content\">\n    As your domain has been deleted, this email address has\n    been archived. To be able to send and receive emails,\n    you must rename the address.\n  </div>\n</aside>;\n","multiple-variants":"<button className=\"flow--button flow--button--primary flow--button--size-s\">\n  Small primary button\n</button>;\n","variants":"<button className=\"flow--button flow--button--primary\">\n  Primary button\n</button>;\n"}
44:["01-getting-started","stylesheet"]
46:T5b1,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Pending"
    }), "\n", _jsx(_components.p, {
      children: "When an async action executes longer than 1000ms, the pending state is shown."
    }), "\n", _jsx(LiveCodeEditor, {
      example: "longAction"
    }), "\n", _jsx(_components.h2, {
      children: "Feedback"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "feedback"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
47:{"title":"Action"}
48:{}
45:{"compiledSource":"$46","frontmatter":"$47","scope":"$48"}
49:{"default":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep}>\n  <Button>Save</Button>\n</Action>;\n","feedback":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep} feedback>\n  <Button>Save</Button>\n</Action>;\n","longAction":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleepLong } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleepLong}>\n  <Button>Save</Button>\n</Action>;\n"}
4a:["02-components","actions","action"]
4c:T5b1,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Danger"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "danger"
    }), "\n", _jsx(_components.h2, {
      children: "Info"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "info"
    }), "\n", _jsx(_components.h2, {
      children: "Additional secondary button"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "additionalSecondary"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
4d:{}
4e:{}
4b:{"compiledSource":"$4c","frontmatter":"$4d","scope":"$4e"}
4f:{"additionalSecondary":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"secondary\" style=\"soft\">\n    Save and add more\n  </Button>\n  <Button variant=\"accent\">Add email address</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abort\n  </Button>\n</ButtonGroup>;\n","danger":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"danger\">Delete project</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abort\n  </Button>\n</ButtonGroup>;\n","default":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"accent\">Create customer</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abort\n  </Button>\n</ButtonGroup>;\n","info":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button>Ok</Button>\n</ButtonGroup>;\n"}
50:["02-components","actions","button-group"]
52:Tb16,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code",
    h3: "h3"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "onPress"
      }), " prop to support interactions via mouse, keyboard, and touch."]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Different variants"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "variants"
    }), "\n", _jsx(_components.h2, {
      children: "Plain style"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "plain"
    }), "\n", _jsx(_components.h2, {
      children: "Soft style"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "soft"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "<Icon />"
      }), " inside a ", _jsx(_components.code, {
        children: "<Button />"
      }), " to display an icon."]
    }), "\n", _jsx(_components.h3, {
      children: "Accessibility"
    }), "\n", _jsxs(_components.p, {
      children: ["The underlying SVG image automatically receives the ", _jsx(_components.code, {
        children: "aria-hidden=true"
      }), "\nattribute. Use the ", _jsx(_components.code, {
        children: "aria-label"
      }), " attribute at the Button to describe the\nassociated action."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    }), "\n", _jsx(_components.h2, {
      children: "With icon and text"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "iconText"
    }), "\n", _jsx(_components.h2, {
      children: "Small variant"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "small"
    }), "\n", _jsx(_components.h2, {
      children: "States"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "states"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
53:{"title":"Button","menuGroup":"Getting started"}
54:{}
51:{"compiledSource":"$52","frontmatter":"$53","scope":"$54"}
55:{"default":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button\n  onPress={() => {\n    alert(\"Button pressed\");\n  }}\n>\n  Continue/Action\n</Button>;\n","icon":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Button aria-label=\"Star item\">\n  <IconHome />\n</Button>;\n","iconText":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Text } from \"@mittwald/flow-react-components/Text\";\nimport { IconChevronDown } from \"@mittwald/flow-react-components/Icons\";\n\n<Button>\n  <Text>Add email address</Text>\n  <IconChevronDown />\n</Button>;\n","plain":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"plain\" variant=\"primary\">\n    Continue/Action\n  </Button>\n  <Button style=\"plain\" variant=\"secondary\">\n    Abort/Back\n  </Button>\n  <Button style=\"plain\" variant=\"accent\">\n    Create/Save\n  </Button>\n  <Button style=\"plain\" variant=\"danger\">\n    Delete/Terminate\n  </Button>\n</Row>;\n","small":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button size=\"s\">Continue/Action</Button>;\n","soft":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"soft\" variant=\"primary\">\n    Continue/Action\n  </Button>\n  <Button style=\"soft\" variant=\"secondary\">\n    Abort/Back\n  </Button>\n  <Button style=\"soft\" variant=\"accent\">\n    Create/Save\n  </Button>\n  <Button style=\"soft\" variant=\"danger\">\n    Delete/Terminate\n  </Button>\n</Row>;\n","states":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button isDisabled>Continue/Action</Button>\n  <Button isPending>Continue/Action</Button>\n  <Button isSucceeded>Continue/Action</Button>\n  <Button isFailed>Continue/Action</Button>\n</Row>;\n","variants":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button variant=\"primary\">Continue/Action</Button>\n  <Button variant=\"secondary\">Abort/Back</Button>\n  <Button variant=\"accent\">Create/Save</Button>\n  <Button variant=\"danger\">Delete/Terminate</Button>\n</Row>;\n"}
56:["02-components","actions","button"]
58:T538,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Single selection"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "single-select"
    }), "\n", _jsx(_components.h2, {
      children: "Multi selection"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multi-select"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
59:{}
5a:{}
57:{"compiledSource":"$58","frontmatter":"$59","scope":"$5a"}
5b:{"default":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    onAction={(id) => {\n      alert(id);\n    }}\n  >\n    <ContextMenuItem id=\"1\">Item 1</ContextMenuItem>\n    <ContextMenuItem id=\"2\">Item 2</ContextMenuItem>\n    <ContextMenuItem id=\"3\">Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","multi-select":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"multiple\"\n    defaultSelectedKeys={[\"item2\", \"item3\"]}\n  >\n    <ContextMenuItem id=\"item1\">Item 1</ContextMenuItem>\n    <ContextMenuItem id=\"item2\">Item 2</ContextMenuItem>\n    <ContextMenuItem id=\"item3\">Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","single-select":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"single\"\n    defaultSelectedKeys={[\"item2\"]}\n  >\n    <ContextMenuItem id=\"item1\">Item 1</ContextMenuItem>\n    <ContextMenuItem id=\"item2\">Item 2</ContextMenuItem>\n    <ContextMenuItem id=\"item3\">Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n"}
5c:["02-components","actions","context-menu"]
5e:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
5f:{}
60:{}
5d:{"compiledSource":"$5e","frontmatter":"$5f","scope":"$60"}
61:{"default":"import { CopyButton } from \"@mittwald/flow-react-components/CopyButton\";\n\n<CopyButton text=\"Copied content\" />;\n"}
62:["02-components","actions","copy-button"]
64:T98c,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "With initials"
    }), "\n", _jsxs(_components.p, {
      children: ["Initials are automatically created from the text provided to the ", _jsx(_components.code, {
        children: "<Initials />"
      }), "\ncomponent."]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With image"
    }), "\n", _jsxs(_components.p, {
      children: ["Use an ", _jsx(_components.code, {
        children: "<Image />"
      }), " inside the ", _jsx(_components.code, {
        children: "<Avatar />"
      }), " to display a profile image."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "image"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsxs(_components.p, {
      children: ["Any ", _jsx(_components.code, {
        children: "<Icon />"
      }), " can be displayed inside the ", _jsx(_components.code, {
        children: "<Avatar />"
      }), "."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    }), "\n", _jsx(_components.h2, {
      children: "Sizes"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "sizes"
    }), "\n", _jsx(_components.h2, {
      children: "Color variants"
    }), "\n", _jsx(_components.p, {
      children: "The color depends on the components children. This adds some visual variance\nwhen displaying a list of avatars."
    }), "\n", _jsx(LiveCodeEditor, {
      example: "colors"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
65:{}
66:{}
63:{"compiledSource":"$64","frontmatter":"$65","scope":"$66"}
67:{"colors":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport { IconCustomer } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <Avatar>\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gustav Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gina-Lisa Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gorgio Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <IconHome />\n  </Avatar>\n  <Avatar>\n    <IconCustomer />\n  </Avatar>\n</Row>;\n","default":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Avatar>\n  <Initials>Gillian Gopher</Initials>\n</Avatar>;\n","icon":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport { Avatar } from \"@mittwald/flow-react-components/Avatar\";\n\n<Avatar variant={1}>\n  <IconHome />\n</Avatar>;\n","image":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Image from \"@mittwald/flow-react-components/Image\";\n\n<Avatar>\n  <Image\n    alt=\"Gopher\"\n    src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  />\n</Avatar>;\n","sizes":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Row>\n  <Avatar size=\"xs\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"s\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"m\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"l\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n</Row>;\n"}
68:["02-components","content","avatar"]
6a:T519,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Levels"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "levels"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
6b:{}
6c:{}
69:{"compiledSource":"$6a","frontmatter":"$6b","scope":"$6c"}
6d:{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<Heading>This is a heading</Heading>;\n","icon":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport { IconMember } from \"@mittwald/flow-react-components/Icons\";\n\n<Heading>\n  <IconMember />\n  Personal Information\n</Heading>;\n","levels":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<>\n  <Heading level={1}>This is a level 1 heading</Heading>\n  <Heading level={2}>This is a level 2 heading</Heading>\n  <Heading level={3}>This is a level 3 heading</Heading>\n  <Heading level={4}>This is a level 4 heading</Heading>\n  <Heading level={5}>This is a level 5 heading</Heading>\n</>;\n"}
6e:["02-components","content","heading"]
70:T72a,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With icon from Tabler"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "tabler"
    }), "\n", _jsx(_components.h2, {
      children: "With SVG"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "svg"
    }), "\n", _jsx(_components.h2, {
      children: "With SVG string"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "svg-string"
    }), "\n", _jsx(_components.h2, {
      children: "Coloring"
    }), "\n", _jsx(_components.p, {
      children: "If the used SVG supports colors, the icon can be colored via CSS."
    }), "\n", _jsx(LiveCodeEditor, {
      example: "coloring"
    }), "\n", _jsx(_components.h2, {
      children: "Sizes"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "sizes"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
71:{}
72:{}
6f:{"compiledSource":"$70","frontmatter":"$71","scope":"$72"}
73:{"coloring":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome\n  style={{ color: \"var(--primary--color--800)\" }}\n/>;\n","default":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome />;\n","sizes":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <IconHome size=\"s\" />\n  <IconHome size=\"m\" />\n  <IconHome size=\"l\" />\n</Row>;\n","svg-string":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n() => {\n  const svgString = `\\\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"50\" cy=\"50\" r=\"50\" />\n    </svg>\n  `;\n\n  return <Icon>{svgString}</Icon>;\n};\n","svg":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n<Icon>\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"50\" cy=\"50\" r=\"50\" />\n  </svg>\n</Icon>;\n","tabler":"import Icon from \"@mittwald/flow-react-components/Icon\";\nimport { IconStar } from \"@tabler/icons-react\";\n\n<Icon>\n  <IconStar />\n</Icon>;\n"}
74:["02-components","content","icon"]
76:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
77:{}
78:{}
75:{"compiledSource":"$76","frontmatter":"$77","scope":"$78"}
79:{"default":"import Image from \"@mittwald/flow-react-components/Image\";\n\n<Image\n  src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  alt=\"Gopher\"\n/>;\n"}
7a:["02-components","content","image"]
7c:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
7d:{}
7e:{}
7b:{"compiledSource":"$7c","frontmatter":"$7d","scope":"$7e"}
7f:{"default":"import Text from \"@mittwald/flow-react-components/Text\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\n\n<Text>\n  Enter <InlineCode>yarn start</InlineCode> to start your\n  app.\n</Text>;\n"}
80:["02-components","content","inline-code"]
82:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
83:{}
84:{}
81:{"compiledSource":"$82","frontmatter":"$83","scope":"$84"}
85:{"default":"import Label from \"@mittwald/flow-react-components/Label\";\n\n<Label>This is a label</Label>;\n"}
86:["02-components","content","label"]
88:T5b2,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With copy button"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "copy-button"
    }), "\n", _jsx(_components.h2, {
      children: "With link"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "link"
    }), "\n", _jsx(_components.h2, {
      children: "With inline code"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "inline-code"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
89:{}
8a:{}
87:{"compiledSource":"$88","frontmatter":"$89","scope":"$8a"}
8b:{"copy-button":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>Project ID</Label>\n  <Content>p-eWRhpRV</Content>\n  <CopyButton text=\"Project ID: p-eWRhpRV\" />\n</LabeledValue>;\n","default":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\n\n<LabeledValue>\n  <Label>Storage</Label>\n  <Content>20 GB</Content>\n</LabeledValue>;\n","inline-code":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>IP address</Label>\n  <InlineCode>127.0.0.1</InlineCode>\n  <CopyButton text=\"127.0.0.1\" />\n</LabeledValue>;\n","link":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<LabeledValue>\n  <Label>Domain</Label>\n  <Link>https://mittwald.de</Link>\n</LabeledValue>;\n"}
8c:["02-components","content","labeled-value"]
8e:T63d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With emulateBoldWidth"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "emulateBoldWidth"
      }), " prop if you need your text to have the width, it\nwould have with bold font weight, even if it is regular font weight (For example\nin horizontal navigations, where the font weight of the active item changes to\nbold)."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "emulateBoldWidth"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
8f:{}
90:{}
8d:{"compiledSource":"$8e","frontmatter":"$8f","scope":"$90"}
91:{"default":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Text>Example Text</Text>;\n","emulateBoldWidth":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Column>\n  <Text\n    style={{ borderInline: \"2px solid red\" }}\n    emulateBoldWidth\n  >\n    Example Text\n  </Text>\n  <Text style={{ borderInline: \"2px solid red\" }}>\n    <strong>Example Text</strong>\n  </Text>\n</Column>;\n"}
92:["02-components","content","text"]
94:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
95:{}
96:{}
93:{"compiledSource":"$94","frontmatter":"$95","scope":"$96"}
97:{"default":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu>\n    <ContextMenuItem>Item 1</ContextMenuItem>\n    <ContextMenuItem>Item 2</ContextMenuItem>\n    <ContextMenuItem>Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n"}
98:["02-components","context-menu"]
9a:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
9b:{}
9c:{}
99:{"compiledSource":"$9a","frontmatter":"$9b","scope":"$9c"}
9d:{"default":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\n\n<CheckboxButton>\n  Consent to terms and conditions\n</CheckboxButton>;\n"}
9e:["02-components","form-controls","checkbox-button"]
a0:T665,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With Checkbox Buttons"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "buttons"
    }), "\n", _jsx(_components.h2, {
      children: "With custom columns"
    }), "\n", _jsxs(_components.p, {
      children: ["The ", _jsx(_components.code, {
        children: "CheckboxGroup"
      }), " uses ", _jsx(_components.code, {
        children: "ColumnLayout"
      }), " to make it possible to adapt column\nwidths as needed"]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "customColumns"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
a1:{}
a2:{}
9f:{"compiledSource":"$a0","frontmatter":"$a1","scope":"$a2"}
a3:{"buttons":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport { CheckboxGroup } from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Permissions</Label>\n  <CheckboxButton value=\"read\">Read</CheckboxButton>\n  <CheckboxButton value=\"write\">Write</CheckboxButton>\n</CheckboxGroup>;\n","customColumns":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport { CheckboxGroup } from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup l={[1, 1]}>\n  <Label>Permissions</Label>\n  <CheckboxButton value=\"read\">Read</CheckboxButton>\n  <CheckboxButton value=\"write\">Write</CheckboxButton>\n</CheckboxGroup>;\n","default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\nimport { CheckboxGroup } from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Permissions</Label>\n  <Checkbox value=\"read\">Read</Checkbox>\n  <Checkbox value=\"write\">Write</Checkbox>\n</CheckboxGroup>;\n"}
a4:["02-components","form-controls","checkbox-group"]
a6:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
a7:{}
a8:{}
a5:{"compiledSource":"$a6","frontmatter":"$a7","scope":"$a8"}
a9:{"default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\n\n<Checkbox>Consent to terms and conditions</Checkbox>;\n"}
aa:["02-components","form-controls","checkbox"]
ac:T619,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    }), "\n", _jsx(_components.h2, {
      children: "Required"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "required"
    }), "\n", _jsx(_components.h2, {
      children: "Invalid"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "invalid"
    }), "\n", _jsx(_components.h2, {
      children: "With unit"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "unit"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
ad:{}
ae:{}
ab:{"compiledSource":"$ac","frontmatter":"$ad","scope":"$ae"}
af:{"default":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<NumberField minValue={0} maxValue={100}>\n  <Label>Age</Label>\n  <FieldDescription>Enter your age</FieldDescription>\n</NumberField>;\n","disabled":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isDisabled>\n  <Label>Age</Label>\n</NumberField>;\n","invalid":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<NumberField isInvalid value={-1}>\n  <Label>Age</Label>\n  <FieldError>Invalid input</FieldError>\n</NumberField>;\n","required":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isRequired>\n  <Label>Age</Label>\n</NumberField>;\n","unit":"import { NumberField } from \"@mittwald/flow-react-components/NumberField\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<NumberField\n  formatOptions={{\n    style: \"unit\",\n    unit: \"gigabyte\",\n  }}\n  defaultValue={12}\n>\n  <Label>Storage</Label>\n</NumberField>;\n"}
b0:["02-components","form-controls","number-field"]
b2:T6e8,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With Radio Buttons"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "buttons"
    }), "\n", _jsx(_components.h2, {
      children: "With custom columns"
    }), "\n", _jsxs(_components.p, {
      children: ["The ", _jsx(_components.code, {
        children: "RadioGroup"
      }), " uses ", _jsx(_components.code, {
        children: "ColumnLayout"
      }), " to make it possible to adapt column widths\nas needed"]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "customColumns"
    }), "\n", _jsx(_components.h2, {
      children: "Segmented variant"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "segmented"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
b3:{}
b4:{}
b1:{"compiledSource":"$b2","frontmatter":"$b3","scope":"$b4"}
b5:{"buttons":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Role</Label>\n  <RadioButton value=\"admin\">Admin</RadioButton>\n  <RadioButton value=\"member\">Member</RadioButton>\n  <RadioButton value=\"accountant\">Accountant</RadioButton>\n</RadioGroup>;\n","customColumns":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup\n  defaultValue=\"admin\"\n  s={[1, 1]}\n  m={[1, 1, 1]}\n  l={[1, 1, 1, 1]}\n>\n  <Label>Role</Label>\n  <RadioButton value=\"admin\">Admin</RadioButton>\n  <RadioButton value=\"member\">Member</RadioButton>\n  <RadioButton value=\"accountant\">Accountant</RadioButton>\n</RadioGroup>;\n","default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Role</Label>\n  <Radio value=\"admin\">Admin</Radio>\n  <Radio value=\"member\">Member</Radio>\n  <Radio value=\"accountant\">Accountant</Radio>\n</RadioGroup>;\n","segmented":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\" variant=\"segmented\">\n  <Label>Role</Label>\n  <Radio value=\"admin\">Admin</Radio>\n  <Radio value=\"member\">Member</Radio>\n  <Radio value=\"accountant\">Accountant</Radio>\n</RadioGroup>;\n"}
b6:["02-components","form-controls","radio-group"]
b8:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
b9:{}
ba:{}
b7:{"compiledSource":"$b8","frontmatter":"$b9","scope":"$ba"}
bb:{"default":"import Select, {\n  Option,\n  Options,\n} from \"@mittwald/flow-react-components/Select\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<Select>\n  <Label>App</Label>\n  <Options>\n    <Option>WordPress</Option>\n    <Option>TYPO3</Option>\n    <Option>Contao</Option>\n    <Option>Drupal</Option>\n    <Option>Joomla!</Option>\n    <Option>Matomo</Option>\n  </Options>\n</Select>;\n"}
bc:["02-components","form-controls","select"]
be:T52f,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With leading label"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "leading-label"
    }), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
bf:{}
c0:{}
bd:{"compiledSource":"$be","frontmatter":"$bf","scope":"$c0"}
c1:{"default":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch defaultSelected>Autoresponder</Switch>;\n","disabled":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch isDisabled>Autoresponder</Switch>;\n","leading-label":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch labelPosition=\"leading\">Autoresponder</Switch>;\n"}
c2:["02-components","form-controls","switch"]
c4:T59d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    }), "\n", _jsx(_components.h2, {
      children: "Required"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "required"
    }), "\n", _jsx(_components.h2, {
      children: "Invalid"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "invalid"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
c5:{}
c6:{}
c3:{"compiledSource":"$c4","frontmatter":"$c5","scope":"$c6"}
c7:{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea>\n  <Label>Public Key</Label>\n  <FieldDescription>Starts with ssh-rsa</FieldDescription>\n</TextArea>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isDisabled>\n  <Label>Public Key</Label>\n</TextArea>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextArea isInvalid defaultValue=\"hello\">\n  <Label>Public Key</Label>\n  <FieldError>Invalid Key</FieldError>\n</TextArea>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isRequired>\n  <Label>Public Key</Label>\n</TextArea>;\n"}
c8:["02-components","form-controls","text-area"]
ca:T59d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Disabled"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "disabled"
    }), "\n", _jsx(_components.h2, {
      children: "Required"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "required"
    }), "\n", _jsx(_components.h2, {
      children: "Invalid"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "invalid"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
cb:{}
cc:{}
c9:{"compiledSource":"$ca","frontmatter":"$cb","scope":"$cc"}
cd:{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<TextField>\n  <Label>URL</Label>\n  <FieldDescription>Start with https://</FieldDescription>\n</TextField>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isDisabled>\n  <Label>URL</Label>\n</TextField>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextField isInvalid defaultValue=\"hello\">\n  <Label>URL</Label>\n  <FieldError>Invalid input</FieldError>\n</TextField>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isRequired>\n  <Label>URL</Label>\n</TextField>;\n"}
ce:["02-components","form-controls","text-field"]
d0:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
d1:{}
d2:{}
cf:{"compiledSource":"$d0","frontmatter":"$d1","scope":"$d2"}
d3:{"default":"import { Breadcrumb } from \"@mittwald/flow-react-components/Breadcrumb\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Breadcrumb>\n  <Link href=\"#\">Project</Link>\n  <Link href=\"#\">Apps</Link>\n  <Link href=\"#\">App</Link>\n</Breadcrumb>;\n"}
d4:["02-components","navigation","breadcrumb"]
d6:T746,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Danger variant"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "danger"
    }), "\n", _jsx(_components.h2, {
      children: "With icon"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icon"
    }), "\n", _jsx(_components.h2, {
      children: "Inline"
    }), "\n", _jsxs(_components.p, {
      children: ["Use the ", _jsx(_components.code, {
        children: "inline"
      }), " property if you want to use a link inside a text block. Links\ninside a ", _jsx(_components.code, {
        children: "<Text />"
      }), " component will be rendered as inline links automatically."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "inline"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "inlineText"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
d7:{}
d8:{}
d5:{"compiledSource":"$d6","frontmatter":"$d7","scope":"$d8"}
d9:{"danger":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link href=\"#\" variant=\"danger\">\n  Delete project\n</Link>;\n","default":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link href=\"#\">Adjust project</Link>;\n","icon":"import Link from \"@mittwald/flow-react-components/Link\";\nimport { IconExternalLink } from \"@mittwald/flow-react-components/Icons\";\n\n<Link href=\"https://mittwald.de\">\n  mittwald.de\n  <IconExternalLink aria-label=\"external link\" />\n</Link>;\n","inline":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link inline href=\"#\">\n  Inline link\n</Link>;\n","inlineText":"import Link from \"@mittwald/flow-react-components/Link\";\nimport { Text } from \"@mittwald/flow-react-components/Text\";\n\n<Text>\n  Check our <Link href=\"#\">onboarding</Link> for more\n  information.\n</Text>;\n"}
da:["02-components","navigation","link"]
dc:T520,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With icons"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "icons"
    }), "\n", _jsx(_components.h2, {
      children: "With groups"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "groups"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
dd:{}
de:{}
db:{"compiledSource":"$dc","frontmatter":"$dd","scope":"$de"}
df:{"default":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Companies\">\n  <Link href=\"https://www.apple.com\">Apple</Link>\n  <Link href=\"https://www.mittwald.de\" aria-current=\"page\">\n    mittwald\n  </Link>\n  <Link href=\"https://www.adobe.com\">Adobe</Link>\n  <Link href=\"https://www.google.com\">Google</Link>\n</Navigation>;\n","groups":"import Navigation, {\n  NavigationGroup,\n} from \"@mittwald/flow-react-components/Navigation\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Main navigation\">\n  <Heading>General</Heading>\n  <NavigationGroup>\n    <Link href=\"#\">Dashboard</Link>\n    <Link href=\"#\" aria-current=\"page\">\n      Performance\n    </Link>\n  </NavigationGroup>\n  <Heading>Components</Heading>\n  <NavigationGroup>\n    <Link href=\"#\">Apps</Link>\n    <Link href=\"#\">Databases</Link>\n    <Link href=\"#\">Domains</Link>\n  </NavigationGroup>\n</Navigation>;\n","icons":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport {\n  IconCustomer,\n  IconProject,\n  IconServer,\n} from \"@mittwald/flow-react-components/Icons\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Main menu\">\n  <Link href=\"#\">\n    <IconCustomer />\n    <Text>Customer</Text>\n  </Link>\n  <Link href=\"#\" aria-current=\"page\">\n    <IconServer />\n    <Text>Server</Text>\n  </Link>\n  <Link href=\"#\">\n    <IconProject />\n    <Text>Project</Text>\n  </Link>\n</Navigation>;\n"}
e0:["02-components","navigation","navigation"]
e2:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
e3:{}
e4:{}
e1:{"compiledSource":"$e2","frontmatter":"$e3","scope":"$e4"}
e6:T48c,import Modal, {
  ModalTrigger,
} from "@mittwald/flow-react-components/Modal";
import Content from "@mittwald/flow-react-components/Content";
import Text from "@mittwald/flow-react-components/Text";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import ButtonGroup from "@mittwald/flow-react-components/ButtonGroup";
import Button from "@mittwald/flow-react-components/Button";
import Heading from "@mittwald/flow-react-components/Heading";
import { Action } from "@mittwald/flow-react-components/Action";

<ModalTrigger>
  <Button variant="accent">Create customer</Button>
  <Modal>
    <Heading>New Customer</Heading>
    <Content>
      <Text>
        Create a new customer to manage your projects,
        members and payments.
      </Text>
      <TextField>
        <Label>Customer name</Label>
      </TextField>
    </Content>
    <ButtonGroup>
      <Action closeModal>
        <Button variant="accent">Create customer</Button>
        <Button style="soft" variant="secondary">
          Abort
        </Button>
      </Action>
    </ButtonGroup>
  </Modal>
</ModalTrigger>;
e5:{"default":"$e6"}
e7:["02-components","overlays","modal"]
e9:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
ea:{}
eb:{}
e8:{"compiledSource":"$e9","frontmatter":"$ea","scope":"$eb"}
ec:{"default":"import Tooltip, {\n  TooltipTrigger,\n} from \"@mittwald/flow-react-components/Tooltip\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconCopy } from \"@mittwald/flow-react-components/Icons\";\n\n<TooltipTrigger>\n  <Button aria-label=\"save\">\n    <IconCopy />\n  </Button>\n  <Tooltip>Save</Tooltip>\n</TooltipTrigger>;\n"}
ed:["02-components","overlays","tooltip"]
ef:T524,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With content"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "with-content"
    }), "\n", _jsx(_components.h2, {
      children: "Status"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
f0:{}
f1:{}
ee:{"compiledSource":"$ef","frontmatter":"$f0","scope":"$f1"}
f3:T4c2,import InlineAlert from "@mittwald/flow-react-components/InlineAlert";
import Heading from "@mittwald/flow-react-components/Heading";
import Content from "@mittwald/flow-react-components/Content";

<Row>
  <InlineAlert status="info">
    <Heading>Email address has been archived</Heading>
    <Content>
      As your domain has been deleted, this email address
      has been archived. To be able to send and receive
      emails, you must rename the address.
    </Content>
  </InlineAlert>

  <InlineAlert status="warning">
    <Heading>Storage is almost exceeded</Heading>
    <Content>
      Your storage space is over 80% utilized. We recommend
      that you upgrade the storage space to avoid
      disruptions during backups.
    </Content>
  </InlineAlert>

  <InlineAlert status="danger">
    <Heading>No SSL certificate could be issued</Heading>
    <Content>
      No SSL certificate could be issued for this domain
      because the domain IP does not point to your server
      IP.
    </Content>
  </InlineAlert>

  <InlineAlert status="success">
    <Heading>Your app is up to date</Heading>
    <Content>
      Your app has been updated to the current version.
    </Content>
  </InlineAlert>
</Row>;
f2:{"default":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\n\n<InlineAlert>\n  <Heading>Email address has been archived</Heading>\n</InlineAlert>;\n","status":"$f3","with-content":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\nimport Content from \"@mittwald/flow-react-components/Content\";\n\n<InlineAlert>\n  <Heading>Email address has been archived</Heading>\n  <Content>\n    As your domain has been deleted, this email address has\n    been archived. To be able to send and receive emails,\n    you must rename the address.\n  </Content>\n</InlineAlert>;\n"}
f4:["02-components","status","inline-alert"]
f6:T49d,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Status"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
f7:{}
f8:{}
f5:{"compiledSource":"$f6","frontmatter":"$f7","scope":"$f8"}
f9:{"default":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<StatusBadge>Info</StatusBadge>;\n","status":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<Row>\n  <StatusBadge status=\"info\">Info</StatusBadge>\n  <StatusBadge status=\"success\">Success</StatusBadge>\n  <StatusBadge status=\"warning\">Warning</StatusBadge>\n  <StatusBadge status=\"danger\">Danger</StatusBadge>\n</Row>;\n"}
fa:["02-components","status","status-badge"]
fc:T5d2,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    h3: "h3",
    p: "p",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(_components.h3, {
      children: "Accessibility"
    }), "\n", _jsxs(_components.p, {
      children: ["The ", _jsx(_components.code, {
        children: "aria-label"
      }), " is pre-filled with a standard translation based on the variant."]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Status"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
fd:{}
fe:{}
fb:{"compiledSource":"$fc","frontmatter":"$fd","scope":"$fe"}
ff:{"default":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<StatusIcon />;\n","status":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<Row>\n  <StatusIcon status=\"info\" />\n  <StatusIcon status=\"success\" />\n  <StatusIcon status=\"warning\" />\n  <StatusIcon status=\"danger\" />\n</Row>;\n"}
100:["02-components","status","status-icon"]
102:T96b,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p",
    ul: "ul",
    li: "li",
    code: "code"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(_components.p, {
      children: "By default columns will be set like this:"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: ["s: ", _jsx(_components.code, {
          children: "[1]"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["m: ", _jsx(_components.code, {
          children: "[1, 1]"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["l: ", _jsx(_components.code, {
          children: "[1, 1, 1]"
        })]
      }), "\n"]
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Custom values"
    }), "\n", _jsx(_components.p, {
      children: "Larger sizes will inherit from smaller sizes, if they are not set:"
    }), "\n", _jsxs(_components.ul, {
      children: ["\n", _jsxs(_components.li, {
        children: ["s: ", _jsx(_components.code, {
          children: "[1]"
        }), " (default)"]
      }), "\n", _jsxs(_components.li, {
        children: ["m: ", _jsx(_components.code, {
          children: "[2, 1]"
        })]
      }), "\n", _jsxs(_components.li, {
        children: ["l: ", _jsx(_components.code, {
          children: "[2, 1]"
        }), " (inherited)"]
      }), "\n"]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "custom-values"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
103:{}
104:{}
101:{"compiledSource":"$102","frontmatter":"$103","scope":"$104"}
105:{"custom-values":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout m={[2, 1]}>\n  <TextField>\n    <Label>Street</Label>\n  </TextField>\n  <TextField>\n    <Label>House number</Label>\n  </TextField>\n</ColumnLayout>;\n","default":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout>\n  <TextField>\n    <Label>First name</Label>\n  </TextField>\n  <TextField>\n    <Label>Last name</Label>\n  </TextField>\n  <TextField>\n    <Label>Street</Label>\n  </TextField>\n  <TextField>\n    <Label>House number</Label>\n  </TextField>\n</ColumnLayout>;\n"}
106:["02-components","structure","column-layout"]
108:T422,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
109:{}
10a:{}
107:{"compiledSource":"$108","frontmatter":"$109","scope":"$10a"}
10b:{"default":"import LayoutCard from \"@mittwald/flow-react-components/LayoutCard\";\n\n<LayoutCard>\n  Layout Card is a structure element that can contain any\n  content\n</LayoutCard>;\n"}
10c:["02-components","structure","layout-card"]
10e:T4aa,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "With linked items"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "withLink"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
10f:{}
110:{}
10d:{"compiledSource":"$10e","frontmatter":"$10f","scope":"$110"}
112:T64b,import {
  List,
  ListFilter,
  ListItemView,
  ListSorting,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import { Avatar } from "@mittwald/flow-react-components/Avatar";
import { Heading } from "@mittwald/flow-react-components/Heading";
import { Text } from "@mittwald/flow-react-components/Text";
import {
  ContextMenu,
  ContextMenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListFilter<Domain>
    property="type"
    mode="some"
    name="Type"
  />
  <ListSorting<Domain> property="domain" name="Domain" />
  <ListSorting<Domain> property="type" name="Type" />
  <ListItemView<Domain>>
    {(domain) => (
      <>
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Not verified
          </StatusBadge>
        )}
        <ContextMenu>
          <ContextMenuItem>Show details</ContextMenuItem>
          <ContextMenuItem>Delete</ContextMenuItem>
        </ContextMenu>
      </>
    )}
  </ListItemView>
</List>;
113:T5bb,import {
  List,
  ListItemView,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import { Avatar } from "@mittwald/flow-react-components/Avatar";
import { Heading } from "@mittwald/flow-react-components/Heading";
import { Text } from "@mittwald/flow-react-components/Text";
import ContextMenu, {
  ContextMenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import { Link } from "@mittwald/flow-react-components/Link";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListItemView<Domain>>
    {(domain) => (
      <Link href="#">
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Not verified
          </StatusBadge>
        )}
        <ContextMenu>
          <ContextMenuItem>Show details</ContextMenuItem>
          <ContextMenuItem>Delete</ContextMenuItem>
        </ContextMenu>
      </Link>
    )}
  </ListItemView>
</List>;
111:{"default":"$112","withLink":"$113"}
114:["02-components","structure","list"]
116:T5b6,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Multiple Sections"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multiple"
    }), "\n", _jsx(_components.h2, {
      children: "With status badge"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "status-badge"
    }), "\n", _jsx(_components.h2, {
      children: "With switch"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "switch"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
117:{}
118:{}
115:{"compiledSource":"$116","frontmatter":"$117","scope":"$118"}
11a:T417,import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import Link from "@mittwald/flow-react-components/Link";
import Section from "@mittwald/flow-react-components/Section";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import { IconMember } from "@mittwald/flow-react-components/Icons";

<>
  <Section>
    <Heading>
      <IconMember />
      Personal Information
    </Heading>
    <TextField isRequired defaultValue="John">
      <Label>First name</Label>
    </TextField>
    <TextField isRequired defaultValue="Doe">
      <Label>Last name</Label>
    </TextField>
  </Section>
  <Section>
    <Heading>Newsletter</Heading>
    <Text>
      Upcoming releases, new features and tips about your
      hosting - we bring you the most important information
      in your inbox. Subscribe to our newsletter and stay up
      to date.
    </Text>
    <Link href="#">Subscribe</Link>
  </Section>
</>;
119:{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Link from \"@mittwald/flow-react-components/Link\";\nimport Section from \"@mittwald/flow-react-components/Section\";\n\n<Section>\n  <Heading>Newsletter</Heading>\n  <Text>\n    Upcoming releases, new features and tips about your\n    hosting - we bring the most important information to\n    inbox. Subscribe to our newsletter and stay up to date.\n  </Text>\n  <Link href=\"#\">Subscribe</Link>\n</Section>;\n","multiple":"$11a","status-badge":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\nimport Header from \"@mittwald/flow-react-components/Header\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <StatusBadge>Subscribed</StatusBadge>\n  </Header>\n  <Text>\n    Upcoming releases, new features and tips about your\n    hosting - we bring the most important information to\n    inbox. Subscribe to our newsletter and stay up to date.\n  </Text>\n</Section>;\n","switch":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Header from \"@mittwald/flow-react-components/Header\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <Switch>Subscription</Switch>\n  </Header>\n  <Text>\n    Upcoming releases, new features and tips about your\n    hosting - we bring the most important information to\n    inbox. Subscribe to our newsletter and stay up to date.\n  </Text>\n</Section>;\n"}
11b:["02-components","structure","section"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"flow layout_body__oiEIT","children":["$","$L8",null,{"children":[["$","header",null,{"className":"layout_header__ttTk7","children":[["$","$L9",null,{"size":"l","className":"layout_logo__PcxmI"}],["$","$La",null,{"level":1,"className":"$undefined","children":"Flow"}],["$","$Lb",null,{"className":"layout_betaBadge__Rtyuk","status":"warning","children":"beta"}],["$","$Lc",null,{"docs":[{"mdxSource":{"compiledSource":"$d","frontmatter":{"description":"Welcome to the Flow documentation!"},"scope":{}},"examples":{},"slugs":["01-getting-started","installation"],"filename":"01-getting-started/installation/index.mdx"},{"mdxSource":{"compiledSource":"$e","frontmatter":{},"scope":{}},"examples":{"composition":"import ExampleSvg from \"@/content/01-getting-started/stylesheet/examples/components/ExampleSvg\";\n\n<aside className=\"flow--inline-alert flow--inline-alert--info\">\n  <ExampleSvg className=\"flow--icon flow--inline-alert--status-icon\" />\n  <h3 className=\"flow--heading flow--inline-alert--heading\">\n    Email address has been archived\n  </h3>\n  <div className=\"flow--inline-alert--content\">\n    As your domain has been deleted, this email address has\n    been archived. To be able to send and receive emails,\n    you must rename the address.\n  </div>\n</aside>;\n","multiple-variants":"<button className=\"flow--button flow--button--primary flow--button--size-s\">\n  Small primary button\n</button>;\n","variants":"<button className=\"flow--button flow--button--primary\">\n  Primary button\n</button>;\n"},"slugs":["01-getting-started","stylesheet"],"filename":"01-getting-started/stylesheet/index.mdx"},{"mdxSource":{"compiledSource":"$f","frontmatter":{"title":"Action"},"scope":{}},"examples":{"default":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep}>\n  <Button>Save</Button>\n</Action>;\n","feedback":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep} feedback>\n  <Button>Save</Button>\n</Action>;\n","longAction":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleepLong } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleepLong}>\n  <Button>Save</Button>\n</Action>;\n"},"slugs":["02-components","actions","action"],"filename":"02-components/actions/action/index.mdx"},{"mdxSource":{"compiledSource":"$10","frontmatter":{},"scope":{}},"examples":{"additionalSecondary":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"secondary\" style=\"soft\">\n    Save and add more\n  </Button>\n  <Button variant=\"accent\">Add email address</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abort\n  </Button>\n</ButtonGroup>;\n","danger":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"danger\">Delete project</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abort\n  </Button>\n</ButtonGroup>;\n","default":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"accent\">Create customer</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abort\n  </Button>\n</ButtonGroup>;\n","info":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button>Ok</Button>\n</ButtonGroup>;\n"},"slugs":["02-components","actions","button-group"],"filename":"02-components/actions/button-group/index.mdx"},{"mdxSource":{"compiledSource":"$11","frontmatter":{"title":"Button","menuGroup":"Getting started"},"scope":{}},"examples":{"default":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button\n  onPress={() => {\n    alert(\"Button pressed\");\n  }}\n>\n  Continue/Action\n</Button>;\n","icon":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Button aria-label=\"Star item\">\n  <IconHome />\n</Button>;\n","iconText":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Text } from \"@mittwald/flow-react-components/Text\";\nimport { IconChevronDown } from \"@mittwald/flow-react-components/Icons\";\n\n<Button>\n  <Text>Add email address</Text>\n  <IconChevronDown />\n</Button>;\n","plain":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"plain\" variant=\"primary\">\n    Continue/Action\n  </Button>\n  <Button style=\"plain\" variant=\"secondary\">\n    Abort/Back\n  </Button>\n  <Button style=\"plain\" variant=\"accent\">\n    Create/Save\n  </Button>\n  <Button style=\"plain\" variant=\"danger\">\n    Delete/Terminate\n  </Button>\n</Row>;\n","small":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button size=\"s\">Continue/Action</Button>;\n","soft":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"soft\" variant=\"primary\">\n    Continue/Action\n  </Button>\n  <Button style=\"soft\" variant=\"secondary\">\n    Abort/Back\n  </Button>\n  <Button style=\"soft\" variant=\"accent\">\n    Create/Save\n  </Button>\n  <Button style=\"soft\" variant=\"danger\">\n    Delete/Terminate\n  </Button>\n</Row>;\n","states":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button isDisabled>Continue/Action</Button>\n  <Button isPending>Continue/Action</Button>\n  <Button isSucceeded>Continue/Action</Button>\n  <Button isFailed>Continue/Action</Button>\n</Row>;\n","variants":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button variant=\"primary\">Continue/Action</Button>\n  <Button variant=\"secondary\">Abort/Back</Button>\n  <Button variant=\"accent\">Create/Save</Button>\n  <Button variant=\"danger\">Delete/Terminate</Button>\n</Row>;\n"},"slugs":["02-components","actions","button"],"filename":"02-components/actions/button/index.mdx"},{"mdxSource":{"compiledSource":"$12","frontmatter":{},"scope":{}},"examples":{"default":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    onAction={(id) => {\n      alert(id);\n    }}\n  >\n    <ContextMenuItem id=\"1\">Item 1</ContextMenuItem>\n    <ContextMenuItem id=\"2\">Item 2</ContextMenuItem>\n    <ContextMenuItem id=\"3\">Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","multi-select":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"multiple\"\n    defaultSelectedKeys={[\"item2\", \"item3\"]}\n  >\n    <ContextMenuItem id=\"item1\">Item 1</ContextMenuItem>\n    <ContextMenuItem id=\"item2\">Item 2</ContextMenuItem>\n    <ContextMenuItem id=\"item3\">Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","single-select":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"single\"\n    defaultSelectedKeys={[\"item2\"]}\n  >\n    <ContextMenuItem id=\"item1\">Item 1</ContextMenuItem>\n    <ContextMenuItem id=\"item2\">Item 2</ContextMenuItem>\n    <ContextMenuItem id=\"item3\">Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n"},"slugs":["02-components","actions","context-menu"],"filename":"02-components/actions/context-menu/index.mdx"},{"mdxSource":{"compiledSource":"$13","frontmatter":{},"scope":{}},"examples":{"default":"import { CopyButton } from \"@mittwald/flow-react-components/CopyButton\";\n\n<CopyButton text=\"Copied content\" />;\n"},"slugs":["02-components","actions","copy-button"],"filename":"02-components/actions/copy-button/index.mdx"},{"mdxSource":{"compiledSource":"$14","frontmatter":{},"scope":{}},"examples":{"colors":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport { IconCustomer } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <Avatar>\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gustav Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gina-Lisa Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gorgio Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <IconHome />\n  </Avatar>\n  <Avatar>\n    <IconCustomer />\n  </Avatar>\n</Row>;\n","default":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Avatar>\n  <Initials>Gillian Gopher</Initials>\n</Avatar>;\n","icon":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport { Avatar } from \"@mittwald/flow-react-components/Avatar\";\n\n<Avatar variant={1}>\n  <IconHome />\n</Avatar>;\n","image":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Image from \"@mittwald/flow-react-components/Image\";\n\n<Avatar>\n  <Image\n    alt=\"Gopher\"\n    src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  />\n</Avatar>;\n","sizes":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Row>\n  <Avatar size=\"xs\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"s\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"m\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"l\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n</Row>;\n"},"slugs":["02-components","content","avatar"],"filename":"02-components/content/avatar/index.mdx"},{"mdxSource":{"compiledSource":"$15","frontmatter":{},"scope":{}},"examples":{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<Heading>This is a heading</Heading>;\n","icon":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport { IconMember } from \"@mittwald/flow-react-components/Icons\";\n\n<Heading>\n  <IconMember />\n  Personal Information\n</Heading>;\n","levels":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<>\n  <Heading level={1}>This is a level 1 heading</Heading>\n  <Heading level={2}>This is a level 2 heading</Heading>\n  <Heading level={3}>This is a level 3 heading</Heading>\n  <Heading level={4}>This is a level 4 heading</Heading>\n  <Heading level={5}>This is a level 5 heading</Heading>\n</>;\n"},"slugs":["02-components","content","heading"],"filename":"02-components/content/heading/index.mdx"},{"mdxSource":{"compiledSource":"$16","frontmatter":{},"scope":{}},"examples":{"coloring":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome\n  style={{ color: \"var(--primary--color--800)\" }}\n/>;\n","default":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome />;\n","sizes":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <IconHome size=\"s\" />\n  <IconHome size=\"m\" />\n  <IconHome size=\"l\" />\n</Row>;\n","svg-string":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n() => {\n  const svgString = `\\\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"50\" cy=\"50\" r=\"50\" />\n    </svg>\n  `;\n\n  return <Icon>{svgString}</Icon>;\n};\n","svg":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n<Icon>\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"50\" cy=\"50\" r=\"50\" />\n  </svg>\n</Icon>;\n","tabler":"import Icon from \"@mittwald/flow-react-components/Icon\";\nimport { IconStar } from \"@tabler/icons-react\";\n\n<Icon>\n  <IconStar />\n</Icon>;\n"},"slugs":["02-components","content","icon"],"filename":"02-components/content/icon/index.mdx"},{"mdxSource":{"compiledSource":"$17","frontmatter":{},"scope":{}},"examples":{"default":"import Image from \"@mittwald/flow-react-components/Image\";\n\n<Image\n  src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  alt=\"Gopher\"\n/>;\n"},"slugs":["02-components","content","image"],"filename":"02-components/content/image/index.mdx"},{"mdxSource":{"compiledSource":"$18","frontmatter":{},"scope":{}},"examples":{"default":"import Text from \"@mittwald/flow-react-components/Text\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\n\n<Text>\n  Enter <InlineCode>yarn start</InlineCode> to start your\n  app.\n</Text>;\n"},"slugs":["02-components","content","inline-code"],"filename":"02-components/content/inline-code/index.mdx"},{"mdxSource":{"compiledSource":"$19","frontmatter":{},"scope":{}},"examples":{"default":"import Label from \"@mittwald/flow-react-components/Label\";\n\n<Label>This is a label</Label>;\n"},"slugs":["02-components","content","label"],"filename":"02-components/content/label/index.mdx"},{"mdxSource":{"compiledSource":"$1a","frontmatter":{},"scope":{}},"examples":{"copy-button":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>Project ID</Label>\n  <Content>p-eWRhpRV</Content>\n  <CopyButton text=\"Project ID: p-eWRhpRV\" />\n</LabeledValue>;\n","default":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\n\n<LabeledValue>\n  <Label>Storage</Label>\n  <Content>20 GB</Content>\n</LabeledValue>;\n","inline-code":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>IP address</Label>\n  <InlineCode>127.0.0.1</InlineCode>\n  <CopyButton text=\"127.0.0.1\" />\n</LabeledValue>;\n","link":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<LabeledValue>\n  <Label>Domain</Label>\n  <Link>https://mittwald.de</Link>\n</LabeledValue>;\n"},"slugs":["02-components","content","labeled-value"],"filename":"02-components/content/labeled-value/index.mdx"},{"mdxSource":{"compiledSource":"$1b","frontmatter":{},"scope":{}},"examples":{"default":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Text>Example Text</Text>;\n","emulateBoldWidth":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Column>\n  <Text\n    style={{ borderInline: \"2px solid red\" }}\n    emulateBoldWidth\n  >\n    Example Text\n  </Text>\n  <Text style={{ borderInline: \"2px solid red\" }}>\n    <strong>Example Text</strong>\n  </Text>\n</Column>;\n"},"slugs":["02-components","content","text"],"filename":"02-components/content/text/index.mdx"},{"mdxSource":{"compiledSource":"$1c","frontmatter":{},"scope":{}},"examples":{"default":"import ContextMenu, {\n  ContextMenuItem,\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport { Button } from \"@mittwald/flow-react-components/Button\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu>\n    <ContextMenuItem>Item 1</ContextMenuItem>\n    <ContextMenuItem>Item 2</ContextMenuItem>\n    <ContextMenuItem>Item 3</ContextMenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n"},"slugs":["02-components","context-menu"],"filename":"02-components/context-menu/index.mdx"},{"mdxSource":{"compiledSource":"$1d","frontmatter":{},"scope":{}},"examples":{"default":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\n\n<CheckboxButton>\n  Consent to terms and conditions\n</CheckboxButton>;\n"},"slugs":["02-components","form-controls","checkbox-button"],"filename":"02-components/form-controls/checkbox-button/index.mdx"},{"mdxSource":{"compiledSource":"$1e","frontmatter":{},"scope":{}},"examples":{"buttons":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport { CheckboxGroup } from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Permissions</Label>\n  <CheckboxButton value=\"read\">Read</CheckboxButton>\n  <CheckboxButton value=\"write\">Write</CheckboxButton>\n</CheckboxGroup>;\n","customColumns":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport { CheckboxGroup } from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup l={[1, 1]}>\n  <Label>Permissions</Label>\n  <CheckboxButton value=\"read\">Read</CheckboxButton>\n  <CheckboxButton value=\"write\">Write</CheckboxButton>\n</CheckboxGroup>;\n","default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\nimport { CheckboxGroup } from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Permissions</Label>\n  <Checkbox value=\"read\">Read</Checkbox>\n  <Checkbox value=\"write\">Write</Checkbox>\n</CheckboxGroup>;\n"},"slugs":["02-components","form-controls","checkbox-group"],"filename":"02-components/form-controls/checkbox-group/index.mdx"},{"mdxSource":{"compiledSource":"$1f","frontmatter":{},"scope":{}},"examples":{"default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\n\n<Checkbox>Consent to terms and conditions</Checkbox>;\n"},"slugs":["02-components","form-controls","checkbox"],"filename":"02-components/form-controls/checkbox/index.mdx"},{"mdxSource":{"compiledSource":"$20","frontmatter":{},"scope":{}},"examples":{"default":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<NumberField minValue={0} maxValue={100}>\n  <Label>Age</Label>\n  <FieldDescription>Enter your age</FieldDescription>\n</NumberField>;\n","disabled":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isDisabled>\n  <Label>Age</Label>\n</NumberField>;\n","invalid":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<NumberField isInvalid value={-1}>\n  <Label>Age</Label>\n  <FieldError>Invalid input</FieldError>\n</NumberField>;\n","required":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isRequired>\n  <Label>Age</Label>\n</NumberField>;\n","unit":"import { NumberField } from \"@mittwald/flow-react-components/NumberField\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<NumberField\n  formatOptions={{\n    style: \"unit\",\n    unit: \"gigabyte\",\n  }}\n  defaultValue={12}\n>\n  <Label>Storage</Label>\n</NumberField>;\n"},"slugs":["02-components","form-controls","number-field"],"filename":"02-components/form-controls/number-field/index.mdx"},{"mdxSource":{"compiledSource":"$21","frontmatter":{},"scope":{}},"examples":{"buttons":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Role</Label>\n  <RadioButton value=\"admin\">Admin</RadioButton>\n  <RadioButton value=\"member\">Member</RadioButton>\n  <RadioButton value=\"accountant\">Accountant</RadioButton>\n</RadioGroup>;\n","customColumns":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup\n  defaultValue=\"admin\"\n  s={[1, 1]}\n  m={[1, 1, 1]}\n  l={[1, 1, 1, 1]}\n>\n  <Label>Role</Label>\n  <RadioButton value=\"admin\">Admin</RadioButton>\n  <RadioButton value=\"member\">Member</RadioButton>\n  <RadioButton value=\"accountant\">Accountant</RadioButton>\n</RadioGroup>;\n","default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Role</Label>\n  <Radio value=\"admin\">Admin</Radio>\n  <Radio value=\"member\">Member</Radio>\n  <Radio value=\"accountant\">Accountant</Radio>\n</RadioGroup>;\n","segmented":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\" variant=\"segmented\">\n  <Label>Role</Label>\n  <Radio value=\"admin\">Admin</Radio>\n  <Radio value=\"member\">Member</Radio>\n  <Radio value=\"accountant\">Accountant</Radio>\n</RadioGroup>;\n"},"slugs":["02-components","form-controls","radio-group"],"filename":"02-components/form-controls/radio-group/index.mdx"},{"mdxSource":{"compiledSource":"$22","frontmatter":{},"scope":{}},"examples":{"default":"import Select, {\n  Option,\n  Options,\n} from \"@mittwald/flow-react-components/Select\";\nimport { Label } from \"@mittwald/flow-react-components/Label\";\n\n<Select>\n  <Label>App</Label>\n  <Options>\n    <Option>WordPress</Option>\n    <Option>TYPO3</Option>\n    <Option>Contao</Option>\n    <Option>Drupal</Option>\n    <Option>Joomla!</Option>\n    <Option>Matomo</Option>\n  </Options>\n</Select>;\n"},"slugs":["02-components","form-controls","select"],"filename":"02-components/form-controls/select/index.mdx"},{"mdxSource":{"compiledSource":"$23","frontmatter":{},"scope":{}},"examples":{"default":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch defaultSelected>Autoresponder</Switch>;\n","disabled":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch isDisabled>Autoresponder</Switch>;\n","leading-label":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch labelPosition=\"leading\">Autoresponder</Switch>;\n"},"slugs":["02-components","form-controls","switch"],"filename":"02-components/form-controls/switch/index.mdx"},{"mdxSource":{"compiledSource":"$24","frontmatter":{},"scope":{}},"examples":{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea>\n  <Label>Public Key</Label>\n  <FieldDescription>Starts with ssh-rsa</FieldDescription>\n</TextArea>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isDisabled>\n  <Label>Public Key</Label>\n</TextArea>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextArea isInvalid defaultValue=\"hello\">\n  <Label>Public Key</Label>\n  <FieldError>Invalid Key</FieldError>\n</TextArea>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isRequired>\n  <Label>Public Key</Label>\n</TextArea>;\n"},"slugs":["02-components","form-controls","text-area"],"filename":"02-components/form-controls/text-area/index.mdx"},{"mdxSource":{"compiledSource":"$25","frontmatter":{},"scope":{}},"examples":{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<TextField>\n  <Label>URL</Label>\n  <FieldDescription>Start with https://</FieldDescription>\n</TextField>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isDisabled>\n  <Label>URL</Label>\n</TextField>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextField isInvalid defaultValue=\"hello\">\n  <Label>URL</Label>\n  <FieldError>Invalid input</FieldError>\n</TextField>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isRequired>\n  <Label>URL</Label>\n</TextField>;\n"},"slugs":["02-components","form-controls","text-field"],"filename":"02-components/form-controls/text-field/index.mdx"},{"mdxSource":{"compiledSource":"$26","frontmatter":{},"scope":{}},"examples":{"default":"import { Breadcrumb } from \"@mittwald/flow-react-components/Breadcrumb\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Breadcrumb>\n  <Link href=\"#\">Project</Link>\n  <Link href=\"#\">Apps</Link>\n  <Link href=\"#\">App</Link>\n</Breadcrumb>;\n"},"slugs":["02-components","navigation","breadcrumb"],"filename":"02-components/navigation/breadcrumb/index.mdx"},{"mdxSource":{"compiledSource":"$27","frontmatter":{},"scope":{}},"examples":{"danger":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link href=\"#\" variant=\"danger\">\n  Delete project\n</Link>;\n","default":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link href=\"#\">Adjust project</Link>;\n","icon":"import Link from \"@mittwald/flow-react-components/Link\";\nimport { IconExternalLink } from \"@mittwald/flow-react-components/Icons\";\n\n<Link href=\"https://mittwald.de\">\n  mittwald.de\n  <IconExternalLink aria-label=\"external link\" />\n</Link>;\n","inline":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link inline href=\"#\">\n  Inline link\n</Link>;\n","inlineText":"import Link from \"@mittwald/flow-react-components/Link\";\nimport { Text } from \"@mittwald/flow-react-components/Text\";\n\n<Text>\n  Check our <Link href=\"#\">onboarding</Link> for more\n  information.\n</Text>;\n"},"slugs":["02-components","navigation","link"],"filename":"02-components/navigation/link/index.mdx"},{"mdxSource":{"compiledSource":"$28","frontmatter":{},"scope":{}},"examples":{"default":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Companies\">\n  <Link href=\"https://www.apple.com\">Apple</Link>\n  <Link href=\"https://www.mittwald.de\" aria-current=\"page\">\n    mittwald\n  </Link>\n  <Link href=\"https://www.adobe.com\">Adobe</Link>\n  <Link href=\"https://www.google.com\">Google</Link>\n</Navigation>;\n","groups":"import Navigation, {\n  NavigationGroup,\n} from \"@mittwald/flow-react-components/Navigation\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Main navigation\">\n  <Heading>General</Heading>\n  <NavigationGroup>\n    <Link href=\"#\">Dashboard</Link>\n    <Link href=\"#\" aria-current=\"page\">\n      Performance\n    </Link>\n  </NavigationGroup>\n  <Heading>Components</Heading>\n  <NavigationGroup>\n    <Link href=\"#\">Apps</Link>\n    <Link href=\"#\">Databases</Link>\n    <Link href=\"#\">Domains</Link>\n  </NavigationGroup>\n</Navigation>;\n","icons":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport {\n  IconCustomer,\n  IconProject,\n  IconServer,\n} from \"@mittwald/flow-react-components/Icons\";\nimport { Link } from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Main menu\">\n  <Link href=\"#\">\n    <IconCustomer />\n    <Text>Customer</Text>\n  </Link>\n  <Link href=\"#\" aria-current=\"page\">\n    <IconServer />\n    <Text>Server</Text>\n  </Link>\n  <Link href=\"#\">\n    <IconProject />\n    <Text>Project</Text>\n  </Link>\n</Navigation>;\n"},"slugs":["02-components","navigation","navigation"],"filename":"02-components/navigation/navigation/index.mdx"},{"mdxSource":{"compiledSource":"$29","frontmatter":{},"scope":{}},"examples":{"default":"$2a"},"slugs":["02-components","overlays","modal"],"filename":"02-components/overlays/modal/index.mdx"},{"mdxSource":{"compiledSource":"$2b","frontmatter":{},"scope":{}},"examples":{"default":"import Tooltip, {\n  TooltipTrigger,\n} from \"@mittwald/flow-react-components/Tooltip\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconCopy } from \"@mittwald/flow-react-components/Icons\";\n\n<TooltipTrigger>\n  <Button aria-label=\"save\">\n    <IconCopy />\n  </Button>\n  <Tooltip>Save</Tooltip>\n</TooltipTrigger>;\n"},"slugs":["02-components","overlays","tooltip"],"filename":"02-components/overlays/tooltip/index.mdx"},{"mdxSource":{"compiledSource":"$2c","frontmatter":{},"scope":{}},"examples":{"default":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\n\n<InlineAlert>\n  <Heading>Email address has been archived</Heading>\n</InlineAlert>;\n","status":"$2d","with-content":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\nimport Content from \"@mittwald/flow-react-components/Content\";\n\n<InlineAlert>\n  <Heading>Email address has been archived</Heading>\n  <Content>\n    As your domain has been deleted, this email address has\n    been archived. To be able to send and receive emails,\n    you must rename the address.\n  </Content>\n</InlineAlert>;\n"},"slugs":["02-components","status","inline-alert"],"filename":"02-components/status/inline-alert/index.mdx"},{"mdxSource":{"compiledSource":"$2e","frontmatter":{},"scope":{}},"examples":{"default":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<StatusBadge>Info</StatusBadge>;\n","status":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<Row>\n  <StatusBadge status=\"info\">Info</StatusBadge>\n  <StatusBadge status=\"success\">Success</StatusBadge>\n  <StatusBadge status=\"warning\">Warning</StatusBadge>\n  <StatusBadge status=\"danger\">Danger</StatusBadge>\n</Row>;\n"},"slugs":["02-components","status","status-badge"],"filename":"02-components/status/status-badge/index.mdx"},{"mdxSource":{"compiledSource":"$2f","frontmatter":{},"scope":{}},"examples":{"default":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<StatusIcon />;\n","status":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<Row>\n  <StatusIcon status=\"info\" />\n  <StatusIcon status=\"success\" />\n  <StatusIcon status=\"warning\" />\n  <StatusIcon status=\"danger\" />\n</Row>;\n"},"slugs":["02-components","status","status-icon"],"filename":"02-components/status/status-icon/index.mdx"},{"mdxSource":{"compiledSource":"$30","frontmatter":{},"scope":{}},"examples":{"custom-values":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout m={[2, 1]}>\n  <TextField>\n    <Label>Street</Label>\n  </TextField>\n  <TextField>\n    <Label>House number</Label>\n  </TextField>\n</ColumnLayout>;\n","default":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout>\n  <TextField>\n    <Label>First name</Label>\n  </TextField>\n  <TextField>\n    <Label>Last name</Label>\n  </TextField>\n  <TextField>\n    <Label>Street</Label>\n  </TextField>\n  <TextField>\n    <Label>House number</Label>\n  </TextField>\n</ColumnLayout>;\n"},"slugs":["02-components","structure","column-layout"],"filename":"02-components/structure/column-layout/index.mdx"},{"mdxSource":{"compiledSource":"$31","frontmatter":{},"scope":{}},"examples":{"default":"import LayoutCard from \"@mittwald/flow-react-components/LayoutCard\";\n\n<LayoutCard>\n  Layout Card is a structure element that can contain any\n  content\n</LayoutCard>;\n"},"slugs":["02-components","structure","layout-card"],"filename":"02-components/structure/layout-card/index.mdx"},{"mdxSource":{"compiledSource":"$32","frontmatter":{},"scope":{}},"examples":{"default":"$33","withLink":"$34"},"slugs":["02-components","structure","list"],"filename":"02-components/structure/list/index.mdx"},{"mdxSource":{"compiledSource":"$35","frontmatter":{},"scope":{}},"examples":{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Link from \"@mittwald/flow-react-components/Link\";\nimport Section from \"@mittwald/flow-react-components/Section\";\n\n<Section>\n  <Heading>Newsletter</Heading>\n  <Text>\n    Upcoming releases, new features and tips about your\n    hosting - we bring the most important information to\n    inbox. Subscribe to our newsletter and stay up to date.\n  </Text>\n  <Link href=\"#\">Subscribe</Link>\n</Section>;\n","multiple":"$36","status-badge":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\nimport Header from \"@mittwald/flow-react-components/Header\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <StatusBadge>Subscribed</StatusBadge>\n  </Header>\n  <Text>\n    Upcoming releases, new features and tips about your\n    hosting - we bring the most important information to\n    inbox. Subscribe to our newsletter and stay up to date.\n  </Text>\n</Section>;\n","switch":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Header from \"@mittwald/flow-react-components/Header\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <Switch>Subscription</Switch>\n  </Header>\n  <Text>\n    Upcoming releases, new features and tips about your\n    hosting - we bring the most important information to\n    inbox. Subscribe to our newsletter and stay up to date.\n  </Text>\n</Section>;\n"},"slugs":["02-components","structure","section"],"filename":"02-components/structure/section/index.mdx"}]}]]}],["$","div",null,{"className":"layout_center__e1uqg","children":[["$","$L37",null,{"className":"layout_nav__ZiJaj","children":["$","$L38",null,{"docs":[{"mdxSource":"$39","examples":"$3d","slugs":"$3e","filename":"01-getting-started/installation/index.mdx"},{"mdxSource":"$3f","examples":"$43","slugs":"$44","filename":"01-getting-started/stylesheet/index.mdx"},{"mdxSource":"$45","examples":"$49","slugs":"$4a","filename":"02-components/actions/action/index.mdx"},{"mdxSource":"$4b","examples":"$4f","slugs":"$50","filename":"02-components/actions/button-group/index.mdx"},{"mdxSource":"$51","examples":"$55","slugs":"$56","filename":"02-components/actions/button/index.mdx"},{"mdxSource":"$57","examples":"$5b","slugs":"$5c","filename":"02-components/actions/context-menu/index.mdx"},{"mdxSource":"$5d","examples":"$61","slugs":"$62","filename":"02-components/actions/copy-button/index.mdx"},{"mdxSource":"$63","examples":"$67","slugs":"$68","filename":"02-components/content/avatar/index.mdx"},{"mdxSource":"$69","examples":"$6d","slugs":"$6e","filename":"02-components/content/heading/index.mdx"},{"mdxSource":"$6f","examples":"$73","slugs":"$74","filename":"02-components/content/icon/index.mdx"},{"mdxSource":"$75","examples":"$79","slugs":"$7a","filename":"02-components/content/image/index.mdx"},{"mdxSource":"$7b","examples":"$7f","slugs":"$80","filename":"02-components/content/inline-code/index.mdx"},{"mdxSource":"$81","examples":"$85","slugs":"$86","filename":"02-components/content/label/index.mdx"},{"mdxSource":"$87","examples":"$8b","slugs":"$8c","filename":"02-components/content/labeled-value/index.mdx"},{"mdxSource":"$8d","examples":"$91","slugs":"$92","filename":"02-components/content/text/index.mdx"},{"mdxSource":"$93","examples":"$97","slugs":"$98","filename":"02-components/context-menu/index.mdx"},{"mdxSource":"$99","examples":"$9d","slugs":"$9e","filename":"02-components/form-controls/checkbox-button/index.mdx"},{"mdxSource":"$9f","examples":"$a3","slugs":"$a4","filename":"02-components/form-controls/checkbox-group/index.mdx"},{"mdxSource":"$a5","examples":"$a9","slugs":"$aa","filename":"02-components/form-controls/checkbox/index.mdx"},{"mdxSource":"$ab","examples":"$af","slugs":"$b0","filename":"02-components/form-controls/number-field/index.mdx"},{"mdxSource":"$b1","examples":"$b5","slugs":"$b6","filename":"02-components/form-controls/radio-group/index.mdx"},{"mdxSource":"$b7","examples":"$bb","slugs":"$bc","filename":"02-components/form-controls/select/index.mdx"},{"mdxSource":"$bd","examples":"$c1","slugs":"$c2","filename":"02-components/form-controls/switch/index.mdx"},{"mdxSource":"$c3","examples":"$c7","slugs":"$c8","filename":"02-components/form-controls/text-area/index.mdx"},{"mdxSource":"$c9","examples":"$cd","slugs":"$ce","filename":"02-components/form-controls/text-field/index.mdx"},{"mdxSource":"$cf","examples":"$d3","slugs":"$d4","filename":"02-components/navigation/breadcrumb/index.mdx"},{"mdxSource":"$d5","examples":"$d9","slugs":"$da","filename":"02-components/navigation/link/index.mdx"},{"mdxSource":"$db","examples":"$df","slugs":"$e0","filename":"02-components/navigation/navigation/index.mdx"},{"mdxSource":"$e1","examples":"$e5","slugs":"$e7","filename":"02-components/overlays/modal/index.mdx"},{"mdxSource":"$e8","examples":"$ec","slugs":"$ed","filename":"02-components/overlays/tooltip/index.mdx"},{"mdxSource":"$ee","examples":"$f2","slugs":"$f4","filename":"02-components/status/inline-alert/index.mdx"},{"mdxSource":"$f5","examples":"$f9","slugs":"$fa","filename":"02-components/status/status-badge/index.mdx"},{"mdxSource":"$fb","examples":"$ff","slugs":"$100","filename":"02-components/status/status-icon/index.mdx"},{"mdxSource":"$101","examples":"$105","slugs":"$106","filename":"02-components/structure/column-layout/index.mdx"},{"mdxSource":"$107","examples":"$10b","slugs":"$10c","filename":"02-components/structure/layout-card/index.mdx"},{"mdxSource":"$10d","examples":"$111","slugs":"$114","filename":"02-components/structure/list/index.mdx"},{"mdxSource":"$115","examples":"$119","slugs":"$11b","filename":"02-components/structure/section/index.mdx"}]}]}],["$","$L37",null,{"elementType":"main","className":"layout_main__30FUz","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]]}]}]}]
11d:T5b1,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2",
    p: "p"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Example"
    }), "\n", _jsx(LiveCodeEditor, {}), "\n", _jsx(_components.h2, {
      children: "Pending"
    }), "\n", _jsx(_components.p, {
      children: "When an async action executes longer than 1000ms, the pending state is shown."
    }), "\n", _jsx(LiveCodeEditor, {
      example: "longAction"
    }), "\n", _jsx(_components.h2, {
      children: "Feedback"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "feedback"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
2:[["$","$La",null,{"className":"MainContent_heading__Szef0","level":1,"children":"Action"}],"$undefined",["$","$L11c",null,{"mdxFile":{"mdxSource":{"compiledSource":"$11d","frontmatter":{"title":"Action"},"scope":{}},"examples":{"default":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep}>\n  <Button>Save</Button>\n</Action>;\n","feedback":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep} feedback>\n  <Button>Save</Button>\n</Action>;\n","longAction":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { Action } from \"@mittwald/flow-react-components/Action\";\nimport { sleepLong } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleepLong}>\n  <Button>Save</Button>\n</Action>;\n"},"slugs":["02-components","actions","action"],"filename":"02-components/actions/action/index.mdx"}}]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Action"}],["$","link","3",{"rel":"icon","href":"/flow-previews/docs/feature/select/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
