3:I[4152,[],""]
5:I[2855,[],""]
4:["slug","02-components/form-controls/checkbox","c"]
0:["twnf18w_larGmVvYdG2pl",[[["",{"children":[["slug","02-components/form-controls/checkbox","c"],{"children":["__PAGE__?{\"slug\":[\"02-components\",\"form-controls\",\"checkbox\"]}",{}]}]},"$undefined","$undefined",true],["",{"children":[["slug","02-components/form-controls/checkbox","c"],{"children":["__PAGE__",{},["$L1","$L2",null]]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/flow-previews/docs/299-offcanvas-component/_next/static/css/374845483ae9886d.css","precedence":"next","crossOrigin":""}]]}]]},[null,"$L6",null]],[[["$","link","0",{"rel":"stylesheet","href":"/flow-previews/docs/299-offcanvas-component/_next/static/css/f79305aa48699048.css","precedence":"next","crossOrigin":""}]],"$L7"]]]]
8:I[8769,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],"LinkProvider"]
9:I[8219,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"IconMittwald"]
a:I[9656,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],""]
b:I[4009,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],""]
c:I[5661,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],""]
18:I[9975,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],"HeaderNavigation"]
19:I[6738,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],"OffCanvasTrigger"]
1a:I[1049,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],"Button"]
1b:I[8219,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"IconMenu"]
1c:I[6738,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],"OffCanvas"]
1d:I[1951,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"Section"]
fb:I[9373,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","932","static/chunks/932-93675ea07ea6c9ef.js","589","static/chunks/589-3b7f51724fd8d1a0.js","185","static/chunks/app/layout-2f7e69eb3aba91ef.js"],""]
127:I[1536,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],""]
128:I[1536,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"LayoutCard"]
129:I[8233,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"ColumnLayout"]
12a:I[506,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"Link"]
12b:I[8219,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"IconExternalLink"]
12c:I[9415,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],""]
12d:I[2940,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"Tabs"]
12e:I[2940,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"Tab"]
12f:I[2940,["384","static/chunks/3ceb1ae0-7eb68c12827b896f.js","737","static/chunks/ce067a8a-c54e5a2e40c5a1b5.js","802","static/chunks/d709487a-aec4f99a68400e47.js","932","static/chunks/932-93675ea07ea6c9ef.js","935","static/chunks/935-4c0a7f9483d5bf10.js","589","static/chunks/589-3b7f51724fd8d1a0.js","877","static/chunks/app/%5B...slug%5D/page-2180a67e6372db83.js"],"TabTitle"]
d:Tbf3,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    strong: "strong",
    hr: "hr",
    h2: "h2",
    code: "code",
    pre: "pre"
  }, _provideComponents(), props.components), {InlineAlert, Heading, Content} = _components;
  if (!Content) _missingMdxReference("Content", true);
  if (!Heading) _missingMdxReference("Heading", true);
  if (!InlineAlert) _missingMdxReference("InlineAlert", true);
  return _jsxs(_Fragment, {
    children: [_jsxs(InlineAlert, {
      children: [_jsx(Heading, {
        children: "Hinweis zu frühem Entwicklungsstand und Stabilität"
      }), _jsx(Content, {
        children: _jsxs(_components.p, {
          children: ["Dieses Projekt befindet sich in einer ", _jsx(_components.strong, {
            children: "frühen Entwicklungsphase"
          }), " weswegen\nwir keine Garantie zur Stabilität bieten können. Du kannst dieses Projekt\ndennoch gerne ausprobieren, verlasse dich aber bitte nicht darauf das die\naktuellen Inhalte in dieser Form bestehen bleiben. Wir freuen uns über jedes\nFeedback zum aktuellen Entwicklungsstand!"]
        })
      })]
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Installation der Flow React Component Library"
    }), "\n", _jsxs(_components.p, {
      children: ["Die Flow React Component Library kann mit einem Package Manager wie ", _jsx(_components.code, {
        children: "npm"
      }), " or\n", _jsx(_components.code, {
        children: "yarn"
      }), " installiert werden."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-shell",
        children: "yarn add @mittwald/flow-react-components\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "Zur leichteren Verwaltung der Abhängigkeiten werden alle Komponenten innerhalb\ndiese Packages bereitgestellt."
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Styles importieren"
    }), "\n", _jsx(_components.p, {
      children: "Um die Komponenten Styles zu verwenden, musst du das Stylesheet importieren.\nFüge diese Zeile zum Einstiegspunkt deines Projektes hinzu."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-react-components/styles\";\n"
      })
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
e:T18a2,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    hr: "hr",
    h2: "h2",
    code: "code",
    pre: "pre",
    h3: "h3",
    h4: "h4",
    strong: "strong"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.p, {
      children: "Die Flow-Komponenten-Bibliotheken werden über ein gemeinsames Stylesheet, das\nauch für sich alleine verwendet werden kann, gestyled. Das kann nützlich sein,\nwenn du dein eigenes Framework verwendest, um Komponenten zu bauen, und dich\ndabei an die mittwald Styling Guidelines halten willst."
    }), "\n", _jsx(_components.p, {
      children: "Auf dieser Seite findest du alle Informationen darüber, wie du das Stylesheet\ninstallieren kannst und wie die Klassennamen strukturiert sind."
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Installation des Standalone Stylesheets"
    }), "\n", _jsxs(_components.p, {
      children: ["Zum aktuellen Entwicklungsstand des Projektes kannst du das Stylesheet nur über\nNPM installieren. Die Flow-Stylesheet-Bibliothek kann über einen Package Manager\nwie ", _jsx(_components.code, {
        children: "npm"
      }), " or ", _jsx(_components.code, {
        children: "yarn"
      }), " installiert werden."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "yarn add @mittwald/flow-stylesheet\n"
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Styles importieren"
    }), "\n", _jsx(_components.p, {
      children: "Um die Komponenten Styles zu verwenden, musst du das Stylesheet importieren.\nFüge diese Zeile zum Einstiegspunkt deines Projektes hinzu."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-stylesheet/css\";\n"
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Anwendung des Stylesheets"
    }), "\n", _jsx(_components.p, {
      children: "Um anfangen zu können solltest du verstehen wie die Klassennamen strukturiert\nsind. Die im Stylesheet bereitgestellten Klassennamen folgen einem konsistenten,\nKomponenten basiertem und leicht zu verstehendem Schema."
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h3, {
      children: "Generelle Klassennamen Auszeichnungen"
    }), "\n", _jsxs(_components.p, {
      children: ["Alle Klassennamen sind in Lowercase geschrieben und benutzen ", _jsx(_components.code, {
        children: "-"
      }), " um Wörter zu\ntrennen und ", _jsx(_components.code, {
        children: "--"
      }), " um logische Abschnitte zu unterteilen."]
    }), "\n", _jsxs(_components.p, {
      children: ["Der erste logische Abschnitt ist immer der ", _jsx(_components.code, {
        children: "flow"
      }), " Namespace. Andere Abschnitte\nkönnten beispielsweise so aussehen:"]
    }), "\n", _jsx(_components.h4, {
      children: "Komponenten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button\n.flow--heading\n.flow--status-icon\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Sub-Komponenten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--navigation\n.flow--navigation--navigation-item\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Spezialisierung: Verschiedene Varianten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--primary\n.flow--inline-alert--danger\n.flow--icon--fixed-width\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Spezialisierung: In einer Komposition verwendete Komponenten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--icon\n.flow--inline-alert--status-icon\n"
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h3, {
      children: "Ein Hinweis zur Spezialisierung"
    }), "\n", _jsxs(_components.p, {
      children: ["Klassennamen die verwendet werden, um die Basiskomponente zu spezialisieren,\nmüssen immer ", _jsx(_components.strong, {
        children: "zusätzlich zum Basis-Klassennamen"
      }), " verwendet werden."]
    }), "\n", _jsx(_components.p, {
      children: "Hier ein paar Beispiele um die diese Anforderung zu verdeutlichen:"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "variants"
    }), "\n", _jsx(_components.h4, {
      children: "Kombinierte Varianten"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multiple-variants"
    }), "\n", _jsx(_components.h4, {
      children: "In einer Komposition verwendete Komponenten"
    }), "\n", _jsxs(_components.p, {
      children: ["Es ist gängige Praxis größere Komponenten aus bereits bestehenden kleineren\nKomponenten zusammenzusetzen. Der InlineAlert besteht beispielsweise aus einem\nIcon, einer Heading und optionalem Inhalt. Die verwendeten Komponenten müssen\nihren Basis-Klassennamen für das grundsätzliche Styling erhalten (", _jsx(_components.code, {
        children: "flow--icon"
      }), "),\nsowie den spezialisierten Klassennamen (", _jsx(_components.code, {
        children: "flow--inline-alert--status-icon"
      }), ") um\nspezifische Styles des Inline Alerts zu erhalten."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "composition"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
f:T50e,import Button from "@mittwald/flow-react-components/Button";
import HeaderNavigation from "@mittwald/flow-react-components/HeaderNavigation";
import {
  IconLogout,
  IconNotification,
  IconSettings,
  IconSupport,
  IconSearch,
} from "@mittwald/flow-react-components/Icons";
import ContextMenu, {
  ContextMenuTrigger,
} from "@mittwald/flow-react-components/ContextMenu";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Image from "@mittwald/flow-react-components/Image";
import Text from "@mittwald/flow-react-components/Text";
import MenuItem from "@mittwald/flow-react-components/MenuItem";

<HeaderNavigation aria-label="Header navigation">
  <Button>
    <IconSearch />
  </Button>
  <Button>
    <IconSupport />
  </Button>
  <Button>
    <IconNotification />
  </Button>
  <ContextMenuTrigger>
    <Button>
      <Avatar>
        <Image
          alt="Gopher"
          src="https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544"
        />
      </Avatar>
    </Button>
    <ContextMenu>
      <MenuItem>
        <IconSettings />
        <Text>Profil</Text>
      </MenuItem>
      <MenuItem>
        <IconLogout />
        <Text>Logout</Text>
      </MenuItem>
    </ContextMenu>
  </ContextMenuTrigger>
</HeaderNavigation>;
10:T5cf,import Tabs, {
  Tab,
  TabTitle,
} from "@mittwald/flow-react-components/Tabs";
import Section from "@mittwald/flow-react-components/Section";
import Heading from "@mittwald/flow-react-components/Heading";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import LabeledValue from "@mittwald/flow-react-components/LabeledValue";
import Text from "@mittwald/flow-react-components/Text";
import Header from "@mittwald/flow-react-components/Header";
import Switch from "@mittwald/flow-react-components/Switch";

<Tabs>
  <Tab>
    <TabTitle>Allgemein</TabTitle>
    <Section>
      <Heading>Allgemein</Heading>
      <TextField defaultValue="example@mittwald.de">
        <Label>E-Mail-Adresse</Label>
      </TextField>
    </Section>
  </Tab>
  <Tab id="storage">
    <TabTitle>Speicherplatz</TabTitle>
    <Section>
      <Heading>Speicherplatz</Heading>
      <LabeledValue>
        <Label>Verfügbarer Speicherplatz</Label>
        <Text>2.4 GB</Text>
      </LabeledValue>
    </Section>
  </Tab>
  <Tab>
    <TabTitle>Spamschutz</TabTitle>
    <Section>
      <Header>
        <Heading>Spamschutz</Heading>
        <Switch>Spamfilter</Switch>
      </Header>
      <Text>
        Der Spamfilter schützt dich vor ungewollten E-Mails.
        Niemand will Müll in seinem Postfach, daher
        empfehlen wir den Spamschutz immer aktiviert zu
        lassen.
      </Text>
    </Section>
  </Tab>
</Tabs>;
11:T528,import Modal, {
  ModalTrigger,
} from "@mittwald/flow-react-components/Modal";
import Content from "@mittwald/flow-react-components/Content";
import Text from "@mittwald/flow-react-components/Text";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import ButtonGroup from "@mittwald/flow-react-components/ButtonGroup";
import Button from "@mittwald/flow-react-components/Button";
import Heading from "@mittwald/flow-react-components/Heading";
import Action from "@mittwald/flow-react-components/Action";

<ModalTrigger>
  <Button variant="accent">Organisation anlegen</Button>
  <Modal>
    <Heading>Neue Organisation</Heading>
    <Content>
      <Text>
        Eine Organisation kannst du dir wie ein Unternehmen
        vorstellen. An diesem Ort verwaltest du deine
        Mitarbeiter, Zahlungsmodalitäten und kannst deine
        Rechnungen einsehen.
      </Text>
      <TextField>
        <Label>Organisationsname</Label>
      </TextField>
    </Content>
    <ButtonGroup>
      <Action closeModal>
        <Button variant="accent">
          Organisation anlegen
        </Button>
        <Button style="soft" variant="secondary">
          Abbrechen
        </Button>
      </Action>
    </ButtonGroup>
  </Modal>
</ModalTrigger>;
12:T532,import Modal, {
  ModalTrigger,
} from "@mittwald/flow-react-components/Modal";
import Content from "@mittwald/flow-react-components/Content";
import Text from "@mittwald/flow-react-components/Text";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import ButtonGroup from "@mittwald/flow-react-components/ButtonGroup";
import Button from "@mittwald/flow-react-components/Button";
import Heading from "@mittwald/flow-react-components/Heading";
import Action from "@mittwald/flow-react-components/Action";

<ModalTrigger>
  <Button variant="accent">Organisation anlegen</Button>
  <Modal offCanvas>
    <Heading>Neue Organisation</Heading>
    <Content>
      <Text>
        Eine Organisation kannst du dir wie ein Unternehmen
        vorstellen. An diesem Ort verwaltest du deine
        Mitarbeiter, Zahlungsmodalitäten und kannst deine
        Rechnungen einsehen.
      </Text>
      <TextField>
        <Label>Organisationsname</Label>
      </TextField>
    </Content>
    <ButtonGroup>
      <Action closeModal>
        <Button variant="accent">
          Organisation anlegen
        </Button>
        <Button style="soft" variant="secondary">
          Abbrechen
        </Button>
      </Action>
    </ButtonGroup>
  </Modal>
</ModalTrigger>;
13:T513,import InlineAlert from "@mittwald/flow-react-components/InlineAlert";
import Heading from "@mittwald/flow-react-components/Heading";
import Content from "@mittwald/flow-react-components/Content";

<Row>
  <InlineAlert status="info">
    <Heading>E-Mail-Adresse wurde archiviert</Heading>
    <Content>
      Da deine Domain gelöscht wurde, wurde diese
      E-Mail-Adresse archiviert. Um E-Mails empfangen und
      senden zu können musst du die Adresse wieder
      umbenennen.
    </Content>
  </InlineAlert>

  <InlineAlert status="warning">
    <Heading>Dein Speicher ist fast voll</Heading>
    <Content>
      Dein Speicher ist zu über 80% belegt. Wir empfehlen
      dir deinen Speicherplatz zu erweitern, um Problemen
      vorzubeugen.
    </Content>
  </InlineAlert>

  <InlineAlert status="danger">
    <Heading>
      Es konnte kein SSL-Zertifikat ausgestellt werden
    </Heading>
    <Content>
      Für diese Domain konnte kein SSL-Zertifikat
      ausgestellt werden, da die Domain per IP nicht auf
      deine Server-IP zeigt.
    </Content>
  </InlineAlert>

  <InlineAlert status="success">
    <Heading>Deine App wurde aktualisiert</Heading>
    <Content>
      Deine App wurde erfolgreich auf die neueste Version
      aktualisiert.
    </Content>
  </InlineAlert>
</Row>;
14:T653,import List, {
  ListFilter,
  ListItemView,
  ListSorting,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import ContextMenu from "@mittwald/flow-react-components/ContextMenu";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";
import MenuItem from "@mittwald/flow-react-components/MenuItem";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListFilter<Domain>
    property="type"
    mode="some"
    name="Type"
  />
  <ListSorting<Domain> property="domain" name="Domain" />
  <ListSorting<Domain> property="type" name="Type" />
  <ListItemView<Domain>>
    {(domain) => (
      <>
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Nicht verifiziert
          </StatusBadge>
        )}
        <ContextMenu>
          <MenuItem>Details anzeigen</MenuItem>
          <MenuItem>Löschen</MenuItem>
        </ContextMenu>
      </>
    )}
  </ListItemView>
</List>;
15:T547,import List, {
  ListItemView,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import ContextMenu, {
  MenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={2}>
  <ListStaticData data={domains} />
  <ListItemView<Domain>>
    {(domain) => (
      <>
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Nicht verifiziert
          </StatusBadge>
        )}
        <ContextMenu>
          <MenuItem>Details anzeigen</MenuItem>
          <MenuItem>Löschen</MenuItem>
        </ContextMenu>
      </>
    )}
  </ListItemView>
</List>;
16:T591,import List, {
  ListItemView,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import ContextMenu, {
  MenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import Link from "@mittwald/flow-react-components/Link";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListItemView<Domain>>
    {(domain) => (
      <Link href="#">
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Nicht verifiziert
          </StatusBadge>
        )}
        <ContextMenu>
          <MenuItem>Details anzeigen</MenuItem>
          <MenuItem>Löschen</MenuItem>
        </ContextMenu>
      </Link>
    )}
  </ListItemView>
</List>;
17:T42a,import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import Link from "@mittwald/flow-react-components/Link";
import Section from "@mittwald/flow-react-components/Section";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import { IconMember } from "@mittwald/flow-react-components/Icons";

<>
  <Section>
    <Heading>
      <IconMember />
      Persönliche Informationen
    </Heading>
    <TextField isRequired defaultValue="John">
      <Label>Vorname</Label>
    </TextField>
    <TextField isRequired defaultValue="Doe">
      <Label>Nachname</Label>
    </TextField>
  </Section>
  <Section>
    <Heading>Newsletter</Heading>
    <Text>
      Kommende Releases, neue Features und Tipps rund um
      dein Hosting – wir bringen dir das Wichtigste in dein
      Postfach. Abonniere unseren Newsletter und bleib auf
      dem Laufenden.
    </Text>
    <Link href="#">Newsletter abonnieren</Link>
  </Section>
</>;
1f:Tbf3,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    strong: "strong",
    hr: "hr",
    h2: "h2",
    code: "code",
    pre: "pre"
  }, _provideComponents(), props.components), {InlineAlert, Heading, Content} = _components;
  if (!Content) _missingMdxReference("Content", true);
  if (!Heading) _missingMdxReference("Heading", true);
  if (!InlineAlert) _missingMdxReference("InlineAlert", true);
  return _jsxs(_Fragment, {
    children: [_jsxs(InlineAlert, {
      children: [_jsx(Heading, {
        children: "Hinweis zu frühem Entwicklungsstand und Stabilität"
      }), _jsx(Content, {
        children: _jsxs(_components.p, {
          children: ["Dieses Projekt befindet sich in einer ", _jsx(_components.strong, {
            children: "frühen Entwicklungsphase"
          }), " weswegen\nwir keine Garantie zur Stabilität bieten können. Du kannst dieses Projekt\ndennoch gerne ausprobieren, verlasse dich aber bitte nicht darauf das die\naktuellen Inhalte in dieser Form bestehen bleiben. Wir freuen uns über jedes\nFeedback zum aktuellen Entwicklungsstand!"]
        })
      })]
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Installation der Flow React Component Library"
    }), "\n", _jsxs(_components.p, {
      children: ["Die Flow React Component Library kann mit einem Package Manager wie ", _jsx(_components.code, {
        children: "npm"
      }), " or\n", _jsx(_components.code, {
        children: "yarn"
      }), " installiert werden."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        className: "language-shell",
        children: "yarn add @mittwald/flow-react-components\n"
      })
    }), "\n", _jsx(_components.p, {
      children: "Zur leichteren Verwaltung der Abhängigkeiten werden alle Komponenten innerhalb\ndiese Packages bereitgestellt."
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Styles importieren"
    }), "\n", _jsx(_components.p, {
      children: "Um die Komponenten Styles zu verwenden, musst du das Stylesheet importieren.\nFüge diese Zeile zum Einstiegspunkt deines Projektes hinzu."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-react-components/styles\";\n"
      })
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
20:{"description":"Willkommen in der Flow Dokumentation!"}
21:{}
1e:{"compiledSource":"$1f","frontmatter":"$20","scope":"$21"}
22:{}
23:["01-getting-started","installation"]
25:T18a2,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    p: "p",
    hr: "hr",
    h2: "h2",
    code: "code",
    pre: "pre",
    h3: "h3",
    h4: "h4",
    strong: "strong"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.p, {
      children: "Die Flow-Komponenten-Bibliotheken werden über ein gemeinsames Stylesheet, das\nauch für sich alleine verwendet werden kann, gestyled. Das kann nützlich sein,\nwenn du dein eigenes Framework verwendest, um Komponenten zu bauen, und dich\ndabei an die mittwald Styling Guidelines halten willst."
    }), "\n", _jsx(_components.p, {
      children: "Auf dieser Seite findest du alle Informationen darüber, wie du das Stylesheet\ninstallieren kannst und wie die Klassennamen strukturiert sind."
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Installation des Standalone Stylesheets"
    }), "\n", _jsxs(_components.p, {
      children: ["Zum aktuellen Entwicklungsstand des Projektes kannst du das Stylesheet nur über\nNPM installieren. Die Flow-Stylesheet-Bibliothek kann über einen Package Manager\nwie ", _jsx(_components.code, {
        children: "npm"
      }), " or ", _jsx(_components.code, {
        children: "yarn"
      }), " installiert werden."]
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "yarn add @mittwald/flow-stylesheet\n"
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Styles importieren"
    }), "\n", _jsx(_components.p, {
      children: "Um die Komponenten Styles zu verwenden, musst du das Stylesheet importieren.\nFüge diese Zeile zum Einstiegspunkt deines Projektes hinzu."
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: "import \"@mittwald/flow-stylesheet/css\";\n"
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h2, {
      children: "Anwendung des Stylesheets"
    }), "\n", _jsx(_components.p, {
      children: "Um anfangen zu können solltest du verstehen wie die Klassennamen strukturiert\nsind. Die im Stylesheet bereitgestellten Klassennamen folgen einem konsistenten,\nKomponenten basiertem und leicht zu verstehendem Schema."
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h3, {
      children: "Generelle Klassennamen Auszeichnungen"
    }), "\n", _jsxs(_components.p, {
      children: ["Alle Klassennamen sind in Lowercase geschrieben und benutzen ", _jsx(_components.code, {
        children: "-"
      }), " um Wörter zu\ntrennen und ", _jsx(_components.code, {
        children: "--"
      }), " um logische Abschnitte zu unterteilen."]
    }), "\n", _jsxs(_components.p, {
      children: ["Der erste logische Abschnitt ist immer der ", _jsx(_components.code, {
        children: "flow"
      }), " Namespace. Andere Abschnitte\nkönnten beispielsweise so aussehen:"]
    }), "\n", _jsx(_components.h4, {
      children: "Komponenten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button\n.flow--heading\n.flow--status-icon\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Sub-Komponenten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--navigation\n.flow--navigation--navigation-item\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Spezialisierung: Verschiedene Varianten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--primary\n.flow--inline-alert--danger\n.flow--icon--fixed-width\n"
      })
    }), "\n", _jsx(_components.h4, {
      children: "Spezialisierung: In einer Komposition verwendete Komponenten"
    }), "\n", _jsx(_components.pre, {
      children: _jsx(_components.code, {
        children: ".flow--button--icon\n.flow--inline-alert--status-icon\n"
      })
    }), "\n", _jsx(_components.hr, {}), "\n", _jsx(_components.h3, {
      children: "Ein Hinweis zur Spezialisierung"
    }), "\n", _jsxs(_components.p, {
      children: ["Klassennamen die verwendet werden, um die Basiskomponente zu spezialisieren,\nmüssen immer ", _jsx(_components.strong, {
        children: "zusätzlich zum Basis-Klassennamen"
      }), " verwendet werden."]
    }), "\n", _jsx(_components.p, {
      children: "Hier ein paar Beispiele um die diese Anforderung zu verdeutlichen:"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "variants"
    }), "\n", _jsx(_components.h4, {
      children: "Kombinierte Varianten"
    }), "\n", _jsx(LiveCodeEditor, {
      example: "multiple-variants"
    }), "\n", _jsx(_components.h4, {
      children: "In einer Komposition verwendete Komponenten"
    }), "\n", _jsxs(_components.p, {
      children: ["Es ist gängige Praxis größere Komponenten aus bereits bestehenden kleineren\nKomponenten zusammenzusetzen. Der InlineAlert besteht beispielsweise aus einem\nIcon, einer Heading und optionalem Inhalt. Die verwendeten Komponenten müssen\nihren Basis-Klassennamen für das grundsätzliche Styling erhalten (", _jsx(_components.code, {
        children: "flow--icon"
      }), "),\nsowie den spezialisierten Klassennamen (", _jsx(_components.code, {
        children: "flow--inline-alert--status-icon"
      }), ") um\nspezifische Styles des Inline Alerts zu erhalten."]
    }), "\n", _jsx(LiveCodeEditor, {
      example: "composition"
    })]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
26:{}
27:{}
24:{"compiledSource":"$25","frontmatter":"$26","scope":"$27"}
28:{"composition":"import ExampleSvg from \"@/content/01-getting-started/stylesheet/examples/components/ExampleSvg\";\n\n<aside className=\"flow--inline-alert flow--inline-alert--info\">\n  <ExampleSvg className=\"flow--icon flow--inline-alert--status-icon\" />\n  <h3 className=\"flow--heading flow--inline-alert--heading\">\n    E-Mail Adresse wurde archiviert\n  </h3>\n  <div className=\"flow--inline-alert--content\">\n    Da deine Domain gelöscht wurde, wurde diese\n    E-Mail-Adresse archiviert. Um E-Mails empfangen und\n    senden zu können musst du die Adresse wieder umbenennen.\n  </div>\n</aside>;\n","multiple-variants":"<button className=\"flow--button flow--button--primary flow--button--size-s\">\n  Small Primary Button\n</button>;\n","variants":"<button className=\"flow--button flow--button--primary\">\n  Primary Button\n</button>;\n"}
29:["01-getting-started","stylesheet"]
2b:{"component":"Action","description":"Die Action Komponente kann um einen Button gelegt werden, um beispielsweise asynchrone Aktionen mit dem Button auszuführen."}
2c:{}
2a:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$2b","scope":"$2c"}
2d:{"default":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Action from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep}>\n  <Button>Speichern</Button>\n</Action>;\n","feedback":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Action from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep} feedback>\n  <Button>Speichern</Button>\n</Action>;\n","longAction":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Action from \"@mittwald/flow-react-components/Action\";\nimport { sleepLong } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleepLong}>\n  <Button>Speichern</Button>\n</Action>;\n"}
2e:["02-components","actions","action"]
30:{"component":"ButtonGroup","description":"Die ButtonGroup dient dazu zusammengehörige Buttons sinnvoll zu gruppieren. Sie wird beispielsweise für Forms oder Modals verwendet."}
31:{}
2f:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    zoom: 0.7\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$30","scope":"$31"}
32:{"additionalSecondary":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"secondary\" style=\"soft\">\n    Speichern und weitere anlegen\n  </Button>\n  <Button variant=\"accent\">E-Mail-Addresse anlegen</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abbrechen\n  </Button>\n</ButtonGroup>;\n","danger":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"danger\">Projekt löschen</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abbrechen\n  </Button>\n</ButtonGroup>;\n","default":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"accent\">Organisation erstellen</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abbrechen\n  </Button>\n</ButtonGroup>;\n","info":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button>Ok</Button>\n</ButtonGroup>;\n"}
33:["02-components","actions","button-group"]
35:{"component":"Button","description":"Der Button dient zum Ausführen von Aktionen."}
36:{}
34:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$35","scope":"$36"}
37:{"default":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button\n  onPress={() => {\n    alert(\"Button gedrückt\");\n  }}\n>\n  Fortfahren/Aktion\n</Button>;\n","icon":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Button aria-label=\"Home\">\n  <IconHome />\n</Button>;\n","iconText":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport { IconChevronDown } from \"@mittwald/flow-react-components/Icons\";\n\n<Button>\n  <Text>E-Mail-Adresse hinzufügen</Text>\n  <IconChevronDown />\n</Button>;\n","plain":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"plain\" variant=\"primary\">\n    Fortfahren/Aktion\n  </Button>\n  <Button style=\"plain\" variant=\"secondary\">\n    Abbrechen/Zurück\n  </Button>\n  <Button style=\"plain\" variant=\"accent\">\n    Erstellen/Speichern\n  </Button>\n  <Button style=\"plain\" variant=\"danger\">\n    Löschen/Kündigen\n  </Button>\n</Row>;\n","small":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button size=\"s\">Fortfahren/Aktion</Button>;\n","soft":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"soft\" variant=\"primary\">\n    Fortfahren/Aktion\n  </Button>\n  <Button style=\"soft\" variant=\"secondary\">\n    Abbrechen/Zurück\n  </Button>\n  <Button style=\"soft\" variant=\"accent\">\n    Erstellen/Speichern\n  </Button>\n  <Button style=\"soft\" variant=\"danger\">\n    Löschen/Kündigen\n  </Button>\n</Row>;\n","states":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button isDisabled>Fortfahren/Aktion</Button>\n  <Button isPending>Fortfahren/Aktion</Button>\n  <Button isSucceeded>Fortfahren/Aktion</Button>\n  <Button isFailed>Fortfahren/Aktion</Button>\n</Row>;\n","variants":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button variant=\"primary\">Fortfahren/Aktion</Button>\n  <Button variant=\"secondary\">Abbrechen/Zurück</Button>\n  <Button variant=\"accent\">Erstellen/Speichern</Button>\n  <Button variant=\"danger\">Löschen/Kündigen</Button>\n</Row>;\n"}
38:["02-components","actions","button"]
3a:{"component":"ContextMenu","description":"Beim ContextMenu handelt es sich um ein Popover, das eine Liste von Aktionen oder Verlinkungen enthält."}
3b:{}
39:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$3a","scope":"$3b"}
3c:{"default":"import ContextMenu, {\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport MenuItem from \"@mittwald/flow-react-components/MenuItem\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    onAction={(id) => {\n      alert(id);\n    }}\n  >\n    <MenuItem id=\"1\">Item 1</MenuItem>\n    <MenuItem id=\"2\">Item 2</MenuItem>\n    <MenuItem id=\"3\">Item 3</MenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","multi-select":"import ContextMenu, {\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport MenuItem from \"@mittwald/flow-react-components/MenuItem\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"multiple\"\n    defaultSelectedKeys={[\"item2\", \"item3\"]}\n  >\n    <MenuItem id=\"item1\">Item 1</MenuItem>\n    <MenuItem id=\"item2\">Item 2</MenuItem>\n    <MenuItem id=\"item3\">Item 3</MenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","single-select":"import ContextMenu, {\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport MenuItem from \"@mittwald/flow-react-components/MenuItem\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"single\"\n    defaultSelectedKeys={[\"item2\"]}\n  >\n    <MenuItem id=\"item1\">Item 1</MenuItem>\n    <MenuItem id=\"item2\">Item 2</MenuItem>\n    <MenuItem id=\"item3\">Item 3</MenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n"}
3d:["02-components","actions","context-menu"]
3f:{"component":"CopyButton","description":"Der CopyButton dient dazu Informationen in die Zwischenablage zu kopieren."}
40:{}
3e:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$3f","scope":"$40"}
41:{"default":"import CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<CopyButton text=\"Kopierter Inhalt\" />;\n"}
42:["02-components","actions","copy-button"]
44:{"component":"Avatar","description":"Der Avatar kann ein Bild, Initialen oder ein Icon darstellen."}
45:{}
43:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$44","scope":"$45"}
46:{"colors":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport { IconCustomer } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <Avatar>\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gustav Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gina-Lisa Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gorgio Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <IconHome />\n  </Avatar>\n  <Avatar>\n    <IconCustomer />\n  </Avatar>\n</Row>;\n","default":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Avatar>\n  <Initials>Gillian Gopher</Initials>\n</Avatar>;\n","icon":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport Avatar from \"@mittwald/flow-react-components/Avatar\";\n\n<Avatar variant={1}>\n  <IconHome />\n</Avatar>;\n","image":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Image from \"@mittwald/flow-react-components/Image\";\n\n<Avatar>\n  <Image\n    alt=\"Gopher\"\n    src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  />\n</Avatar>;\n","sizes":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Row>\n  <Avatar size=\"xs\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"s\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"m\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"l\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n</Row>;\n"}
47:["02-components","content","avatar"]
49:{"component":"Heading","description":"Die Heading-Komponente wird verwendet, um Überschriften anzuzeigen"}
4a:{}
48:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$49","scope":"$4a"}
4b:{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<Heading>Das ist eine Überschrift</Heading>;\n","icon":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport { IconMember } from \"@mittwald/flow-react-components/Icons\";\n\n<Heading>\n  <IconMember />\n  Persönliche Informationen\n</Heading>;\n","levels":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<>\n  <Heading level={1}>\n    Das ist eine Level 1 Überschrift\n  </Heading>\n  <Heading level={2}>\n    Das ist eine Level 2 Überschrift\n  </Heading>\n  <Heading level={3}>\n    Das ist eine Level 3 Überschrift\n  </Heading>\n  <Heading level={4}>\n    Das ist eine Level 4 Überschrift\n  </Heading>\n  <Heading level={5}>\n    Das ist eine Level 5 Überschrift\n  </Heading>\n</>;\n"}
4c:["02-components","content","heading"]
4e:{"component":"Icon","description":"Die Icon-Komponente unterstützt Tabler Icons sowie benutzerdefinierte SVGs."}
4f:{}
4d:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$4e","scope":"$4f"}
50:{"coloring":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome\n  style={{ color: \"var(--primary--color--800)\" }}\n/>;\n","default":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome />;\n","sizes":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <IconHome size=\"s\" />\n  <IconHome size=\"m\" />\n  <IconHome size=\"l\" />\n</Row>;\n","svg-string":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n() => {\n  const svgString = `\\\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"50\" cy=\"50\" r=\"50\" />\n    </svg>\n  `;\n\n  return <Icon>{svgString}</Icon>;\n};\n","svg":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n<Icon>\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"50\" cy=\"50\" r=\"50\" />\n  </svg>\n</Icon>;\n","tabler":"import Icon from \"@mittwald/flow-react-components/Icon\";\nimport { IconStar } from \"@tabler/icons-react\";\n\n<Icon>\n  <IconStar />\n</Icon>;\n"}
51:["02-components","content","icon"]
53:{"component":"IllustratedMessage","description":"Die IllustratedMessage dient als Platzhalter, wenn der eigentliche Inhalt nicht angezeigt werden kann."}
54:{}
52:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    zoom: 0.7\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$53","scope":"$54"}
55:{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport IllustratedMessage from \"@mittwald/flow-react-components/IllustratedMessage\";\nimport { IconApp } from \"@mittwald/flow-react-components/Icons\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<IllustratedMessage>\n  <IconApp />\n  <Heading>Keine Apps installiert</Heading>\n  <Text>\n    Lege deine erste App an, um mit der Arbeit an deiner\n    Webseite loszulegen.\n  </Text>\n  <Button>App anlegen</Button>\n</IllustratedMessage>;\n","negative":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport IllustratedMessage from \"@mittwald/flow-react-components/IllustratedMessage\";\nimport { IconDanger } from \"@mittwald/flow-react-components/Icons\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<IllustratedMessage variant=\"negative\">\n  <IconDanger />\n  <Heading>Kein Zugriff</Heading>\n  <Text>\n    Du hast keine Berechtigung, um auf diese Seite\n    zuzugreifen.\n  </Text>\n  <Button>Zum Dashboard</Button>\n</IllustratedMessage>;\n"}
56:["02-components","content","illustrated-message"]
58:{"component":"Image","description":"Mit der Image-Komponente können Bilder angezeigt werden."}
59:{}
57:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$58","scope":"$59"}
5a:{"default":"import Image from \"@mittwald/flow-react-components/Image\";\n\n<Image\n  src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  alt=\"Gopher\"\n  width={200}\n/>;\n"}
5b:["02-components","content","image"]
5d:{"component":"InlineCode","description":"InlineCode wird verwendet, um Code innerhalb eines Textes anzuzeigen."}
5e:{}
5c:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$5d","scope":"$5e"}
5f:{"default":"import Text from \"@mittwald/flow-react-components/Text\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\n\n<Text>\n  Gib <InlineCode>yarn start</InlineCode> ein um deine App\n  zu starten.\n</Text>;\n"}
60:["02-components","content","inline-code"]
62:{"component":"Label","description":"Ein Label dient der Beschreibung eines Elements, und wird beispielsweise für Formularfelder oder in LabeledValues verwendet."}
63:{}
61:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$62","scope":"$63"}
64:{"default":"import Label from \"@mittwald/flow-react-components/Label\";\n\n<Label>Das ist ein Label</Label>;\n"}
65:["02-components","content","label"]
67:{"component":"LabeledValue","description":"Ein LabeledValue zeigt eine Information mit einem Label an."}
68:{}
66:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$67","scope":"$68"}
69:{"copy-button":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>Projekt ID</Label>\n  <Content>p-eWRhpRV</Content>\n  <CopyButton text=\"Projekt ID: p-eWRhpRV\" />\n</LabeledValue>;\n","default":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\n\n<LabeledValue>\n  <Label>Speicherplatz</Label>\n  <Content>20 GB</Content>\n</LabeledValue>;\n","inline-code":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>IP Adresse</Label>\n  <InlineCode>127.0.0.1</InlineCode>\n  <CopyButton text=\"127.0.0.1\" />\n</LabeledValue>;\n","link":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<LabeledValue>\n  <Label>Domain</Label>\n  <Link>https://mittwald.de</Link>\n</LabeledValue>;\n"}
6a:["02-components","content","labeled-value"]
6c:{"component":"Text","description":"Die Text-Komponente wird verwendet, um Texte zu gruppieren."}
6d:{}
6b:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$6c","scope":"$6d"}
6e:{"default":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Text>Das ist ein Text</Text>;\n","emulateBoldWidth":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Column>\n  <Text\n    style={{ borderInline: \"2px solid red\" }}\n    emulateBoldWidth\n  >\n    Das ist ein Text\n  </Text>\n  <Text style={{ borderInline: \"2px solid red\" }}>\n    <strong>Das ist ein Text</strong>\n  </Text>\n</Column>;\n"}
6f:["02-components","content","text"]
71:{"component":"CheckboxButton","description":"Der CheckboxButton verhält sich wie eine Checkbox."}
72:{}
70:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$71","scope":"$72"}
73:{"default":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\n\n<CheckboxButton>\n  Ich stimme den AGBs zu und bestätige, dass ich die\n  Datenschutzhinweise zur Kenntnis genommen habe.\n</CheckboxButton>;\n"}
74:["02-components","form-controls","checkbox-button"]
76:{"component":"CheckboxGroup","description":"Die Checkbox Gruppe enthält eine logisch zusammenhängende Sammlung von Checkboxen"}
77:{}
75:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$76","scope":"$77"}
78:{"buttons":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport CheckboxGroup from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Berechtigungen</Label>\n  <CheckboxButton value=\"read\">Lesen</CheckboxButton>\n  <CheckboxButton value=\"write\">Schreiben</CheckboxButton>\n</CheckboxGroup>;\n","customColumns":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport CheckboxGroup from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup l={[1, 1]}>\n  <Label>Berechtigungen</Label>\n  <CheckboxButton value=\"read\">Lesen</CheckboxButton>\n  <CheckboxButton value=\"write\">Schreiben</CheckboxButton>\n</CheckboxGroup>;\n","default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\nimport CheckboxGroup from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Berechtigungen</Label>\n  <Checkbox value=\"read\">Lesen</Checkbox>\n  <Checkbox value=\"write\">Schreiben</Checkbox>\n</CheckboxGroup>;\n"}
79:["02-components","form-controls","checkbox-group"]
7b:{"component":"Checkbox","description":"Die Checkbox dient dazu einen Wert zu aus- oder abzuwählen."}
7c:{}
7a:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$7b","scope":"$7c"}
7d:{"default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\n\n<Checkbox>\n  Ich stimme den AGBs zu und bestätige, dass ich die\n  Datenschutzhinweise zur Kenntnis genommen habe.\n</Checkbox>;\n"}
7e:["02-components","form-controls","checkbox"]
80:{"component":"NumberField","description":"Das NumberField dient der Eingabe von Zahlen."}
81:{}
7f:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$80","scope":"$81"}
82:{"default":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<NumberField minValue={0} maxValue={100}>\n  <Label>Alter</Label>\n  <FieldDescription>Gib dein Alter ein</FieldDescription>\n</NumberField>;\n","disabled":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isDisabled>\n  <Label>Alter</Label>\n</NumberField>;\n","invalid":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<NumberField isInvalid value={-1}>\n  <Label>Alter</Label>\n  <FieldError>Ungültige Eingabe</FieldError>\n</NumberField>;\n","required":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isRequired>\n  <Label>Alter</Label>\n</NumberField>;\n","unit":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField\n  formatOptions={{\n    style: \"unit\",\n    unit: \"gigabyte\",\n  }}\n  defaultValue={12}\n>\n  <Label>Speicherplatz</Label>\n</NumberField>;\n"}
83:["02-components","form-controls","number-field"]
85:{"component":"RadioGroup","description":"Eine RadioGroup ist eine Liste von Optionen, von denen genau eine ausgewählt werden muss."}
86:{}
84:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$85","scope":"$86"}
87:{"buttons":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Rolle</Label>\n  <RadioButton value=\"admin\">Administrator</RadioButton>\n  <RadioButton value=\"member\">Mitglied</RadioButton>\n  <RadioButton value=\"accountant\">Buchhalter</RadioButton>\n</RadioGroup>;\n","customColumns":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup\n  defaultValue=\"admin\"\n  s={[1, 1]}\n  m={[1, 1, 1]}\n  l={[1, 1, 1, 1]}\n>\n  <Label>Rolle</Label>\n  <RadioButton value=\"admin\">Administrator</RadioButton>\n  <RadioButton value=\"member\">Mitglied</RadioButton>\n  <RadioButton value=\"accountant\">Buchhalter</RadioButton>\n</RadioGroup>;\n","default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Rolle</Label>\n  <Radio value=\"admin\">Administrator</Radio>\n  <Radio value=\"member\">Mitglied</Radio>\n  <Radio value=\"accountant\">Buchhalter</Radio>\n</RadioGroup>;\n","segmented":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\" variant=\"segmented\">\n  <Label>Rolle</Label>\n  <Radio value=\"admin\">Administrator</Radio>\n  <Radio value=\"member\">Mitglied</Radio>\n  <Radio value=\"accountant\">Buchhalter</Radio>\n</RadioGroup>;\n"}
88:["02-components","form-controls","radio-group"]
8a:{"component":"Select","description":"Die Select-Komponente bietet eine Liste von Optionen an, von denen eine ausgewählt werden kann."}
8b:{}
89:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$8a","scope":"$8b"}
8c:{"default":"import Select, {\n  Option,\n} from \"@mittwald/flow-react-components/Select\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<Select>\n  <Label>App</Label>\n  <Option>WordPress</Option>\n  <Option>TYPO3</Option>\n  <Option>Contao</Option>\n  <Option>Drupal</Option>\n  <Option>Joomla!</Option>\n  <Option>Matomo</Option>\n</Select>;\n"}
8d:["02-components","form-controls","select"]
8f:{"component":"Switch","description":"Die Switch-Komponente stellt einen Schalter dar, mit dem eine Option aktiviert oder deaktiviert werden kann."}
90:{}
8e:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$8f","scope":"$90"}
91:{"default":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch defaultSelected>Autoresponder</Switch>;\n","disabled":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch isDisabled>Autoresponder</Switch>;\n","leading-label":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch labelPosition=\"leading\">Autoresponder</Switch>;\n"}
92:["02-components","form-controls","switch"]
94:{"component":"TextArea","description":"Die Textarea dient zur Eingabe längerer Texte und stellt diese mehrzeilig dar."}
95:{}
93:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$94","scope":"$95"}
96:{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea>\n  <Label>Public Key</Label>\n  <FieldDescription>Beginnt mit ssh-rsa</FieldDescription>\n</TextArea>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isDisabled>\n  <Label>Public Key</Label>\n</TextArea>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextArea isInvalid defaultValue=\"hello\">\n  <Label>Public Key</Label>\n  <FieldError>Ungültiger Key</FieldError>\n</TextArea>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isRequired>\n  <Label>Public Key</Label>\n</TextArea>;\n"}
97:["02-components","form-controls","text-area"]
99:{"component":"TextField","description":"Ein TextField ermöglicht es dem Nutzer, Text über die Tastatur in ein User-Interface einzugeben. Ein erforderliches Label und eine optionale FieldDescription unterstützen dabei, die Anforderungen an die Eingabe klar zu kommunizieren."}
9a:{}
98:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$99","scope":"$9a"}
9b:{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<TextField>\n  <Label>URL</Label>\n  <FieldDescription>Beginnt mit https://</FieldDescription>\n</TextField>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isDisabled>\n  <Label>URL</Label>\n</TextField>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextField isInvalid defaultValue=\"hello\">\n  <Label>URL</Label>\n  <FieldError>Das ist keine URL</FieldError>\n</TextField>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isRequired>\n  <Label>URL</Label>\n</TextField>;\n"}
9c:["02-components","form-controls","text-field"]
9e:{"component":"Breadcrumb","description":"Die Breadcrumb zeigt die aktuelle Position in der Hierarchie der Website und bietet die Möglichkeit schnell zu höheren Navigationsebenen zu springen."}
9f:{}
9d:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$9e","scope":"$9f"}
a0:{"default":"import Breadcrumb from \"@mittwald/flow-react-components/Breadcrumb\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Breadcrumb>\n  <Link href=\"#\">Projekte</Link>\n  <Link href=\"#\">Apps</Link>\n  <Link href=\"#\">Meine App</Link>\n</Breadcrumb>;\n"}
a1:["02-components","navigation","breadcrumb"]
a3:{"component":"HeaderNavigation","description":"Bei der HeaderNavigation handelt es sich um eine horizontal dargestellte Navigation, die als Hauptnavigation einer Seite verwendet werden kann."}
a4:{}
a2:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$a3","scope":"$a4"}
a6:T50e,import Button from "@mittwald/flow-react-components/Button";
import HeaderNavigation from "@mittwald/flow-react-components/HeaderNavigation";
import {
  IconLogout,
  IconNotification,
  IconSettings,
  IconSupport,
  IconSearch,
} from "@mittwald/flow-react-components/Icons";
import ContextMenu, {
  ContextMenuTrigger,
} from "@mittwald/flow-react-components/ContextMenu";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Image from "@mittwald/flow-react-components/Image";
import Text from "@mittwald/flow-react-components/Text";
import MenuItem from "@mittwald/flow-react-components/MenuItem";

<HeaderNavigation aria-label="Header navigation">
  <Button>
    <IconSearch />
  </Button>
  <Button>
    <IconSupport />
  </Button>
  <Button>
    <IconNotification />
  </Button>
  <ContextMenuTrigger>
    <Button>
      <Avatar>
        <Image
          alt="Gopher"
          src="https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544"
        />
      </Avatar>
    </Button>
    <ContextMenu>
      <MenuItem>
        <IconSettings />
        <Text>Profil</Text>
      </MenuItem>
      <MenuItem>
        <IconLogout />
        <Text>Logout</Text>
      </MenuItem>
    </ContextMenu>
  </ContextMenuTrigger>
</HeaderNavigation>;
a5:{"contextMenu":"$a6","default":"import Link from \"@mittwald/flow-react-components/Link\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconSearch } from \"@mittwald/flow-react-components/Icons\";\nimport HeaderNavigation from \"@mittwald/flow-react-components/HeaderNavigation\";\n\n<HeaderNavigation aria-label=\"Header navigation\">\n  <Link href=\"#\">Getting startet</Link>\n  <Link href=\"#\" aria-current=\"page\">\n    Komponenten\n  </Link>\n  <Button>\n    <IconSearch />\n  </Button>\n</HeaderNavigation>;\n","inverse":"import Link from \"@mittwald/flow-react-components/Link\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconSearch } from \"@mittwald/flow-react-components/Icons\";\nimport HeaderNavigation from \"@mittwald/flow-react-components/HeaderNavigation\";\n\n<HeaderNavigation aria-label=\"Header navigation\" inverse>\n  <Link href=\"#\">Getting startet</Link>\n  <Link href=\"#\" aria-current=\"page\">\n    Components\n  </Link>\n  <Button>\n    <IconSearch />\n  </Button>\n</HeaderNavigation>;\n"}
a7:["02-components","navigation","header-navigation"]
a9:{"component":"Link","description":"Die Link-Komponente kann zur Navigation innerhalb der Seite oder zu externen Zielen genutzt werden."}
aa:{}
a8:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$a9","scope":"$aa"}
ab:{"default":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link href=\"#\">Zum Dashboard</Link>;\n","icon":"import Link from \"@mittwald/flow-react-components/Link\";\nimport { IconExternalLink } from \"@mittwald/flow-react-components/Icons\";\n\n<Link href=\"https://mittwald.de\">\n  mittwald.de\n  <IconExternalLink aria-label=\"external link\" />\n</Link>;\n","inline":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link inline href=\"#\">\n  Inline link\n</Link>;\n","inlineText":"import Link from \"@mittwald/flow-react-components/Link\";\nimport Text from \"@mittwald/flow-react-components/Text\";\n\n<Text>\n  Sieh dir unser <Link href=\"#\">Onboarding</Link> an um\n  weitere Informationen zu erhalten.\n</Text>;\n"}
ac:["02-components","navigation","link"]
ae:{"component":"Navigation","description":"Bei der Navigation handelt es sich um eine Liste von Links, die optional auch in Gruppen unterteilt werden kann."}
af:{}
ad:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$ae","scope":"$af"}
b0:{"default":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Companies\">\n  <Link href=\"https://www.apple.com\">Apple</Link>\n  <Link href=\"https://www.mittwald.de\" aria-current=\"page\">\n    mittwald\n  </Link>\n  <Link href=\"https://www.adobe.com\">Adobe</Link>\n  <Link href=\"https://www.google.com\">Google</Link>\n</Navigation>;\n","groups":"import Navigation, {\n  NavigationGroup,\n} from \"@mittwald/flow-react-components/Navigation\";\nimport Link from \"@mittwald/flow-react-components/Link\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<Navigation aria-label=\"Main navigation\">\n  <NavigationGroup>\n    <Label>Allgemein</Label>\n    <Link href=\"#\">Dashboard</Link>\n    <Link href=\"#\" aria-current=\"page\">\n      Performance\n    </Link>\n  </NavigationGroup>\n  <NavigationGroup>\n    <Label>Komponenten</Label>\n    <Link href=\"#\">Apps</Link>\n    <Link href=\"#\">Datenbanken</Link>\n    <Link href=\"#\">Domains</Link>\n  </NavigationGroup>\n</Navigation>;\n","icons":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport {\n  IconCustomer,\n  IconProject,\n  IconServer,\n} from \"@mittwald/flow-react-components/Icons\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Main menu\">\n  <Link href=\"#\">\n    <IconCustomer />\n    <Text>Organisationen</Text>\n  </Link>\n  <Link href=\"#\" aria-current=\"page\">\n    <IconServer />\n    <Text>Server</Text>\n  </Link>\n  <Link href=\"#\">\n    <IconProject />\n    <Text>Projekte</Text>\n  </Link>\n</Navigation>;\n"}
b1:["02-components","navigation","navigation"]
b3:{"component":"Tabs","description":"Tabs erlauben dem Nutzer zwischen verschiedenen Inhaltsbereichen zu wechseln."}
b4:{}
b2:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$b3","scope":"$b4"}
b6:T5cf,import Tabs, {
  Tab,
  TabTitle,
} from "@mittwald/flow-react-components/Tabs";
import Section from "@mittwald/flow-react-components/Section";
import Heading from "@mittwald/flow-react-components/Heading";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import LabeledValue from "@mittwald/flow-react-components/LabeledValue";
import Text from "@mittwald/flow-react-components/Text";
import Header from "@mittwald/flow-react-components/Header";
import Switch from "@mittwald/flow-react-components/Switch";

<Tabs>
  <Tab>
    <TabTitle>Allgemein</TabTitle>
    <Section>
      <Heading>Allgemein</Heading>
      <TextField defaultValue="example@mittwald.de">
        <Label>E-Mail-Adresse</Label>
      </TextField>
    </Section>
  </Tab>
  <Tab id="storage">
    <TabTitle>Speicherplatz</TabTitle>
    <Section>
      <Heading>Speicherplatz</Heading>
      <LabeledValue>
        <Label>Verfügbarer Speicherplatz</Label>
        <Text>2.4 GB</Text>
      </LabeledValue>
    </Section>
  </Tab>
  <Tab>
    <TabTitle>Spamschutz</TabTitle>
    <Section>
      <Header>
        <Heading>Spamschutz</Heading>
        <Switch>Spamfilter</Switch>
      </Header>
      <Text>
        Der Spamfilter schützt dich vor ungewollten E-Mails.
        Niemand will Müll in seinem Postfach, daher
        empfehlen wir den Spamschutz immer aktiviert zu
        lassen.
      </Text>
    </Section>
  </Tab>
</Tabs>;
b5:{"collapsed":"import Tabs, {\n  Tab,\n  TabTitle,\n} from \"@mittwald/flow-react-components/Tabs\";\n\n<Tabs style={{ width: \"250px\" }}>\n  <Tab>\n    <TabTitle>Allgemein</TabTitle>\n    Allgemeiner Inhalt\n  </Tab>\n  <Tab id=\"storage\">\n    <TabTitle>Speicherplatz</TabTitle>\n    Speicherplatz Inhalt\n  </Tab>\n  <Tab>\n    <TabTitle>Spamschutz</TabTitle>\n    Spamschutz Inhalt\n  </Tab>\n</Tabs>;\n","content":"$b6","default":"import Tabs, {\n  Tab,\n  TabTitle,\n} from \"@mittwald/flow-react-components/Tabs\";\n\n<Tabs>\n  <Tab>\n    <TabTitle>Allgemein</TabTitle>\n    Allgemeiner Inhalt\n  </Tab>\n  <Tab id=\"storage\">\n    <TabTitle>Speicherplatz</TabTitle>\n    Speicherplatz Inhalt\n  </Tab>\n  <Tab>\n    <TabTitle>Spamschutz</TabTitle>\n    Spamschutz Inhalt\n  </Tab>\n</Tabs>;\n"}
b7:["02-components","navigation","tabs"]
b9:{"component":"Modal","description":"Benutze das Modal um Inhalte in einem Overlay über der eigentlichen Oberfläche anzuzeigen."}
ba:{}
b8:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$b9","scope":"$ba"}
bc:T528,import Modal, {
  ModalTrigger,
} from "@mittwald/flow-react-components/Modal";
import Content from "@mittwald/flow-react-components/Content";
import Text from "@mittwald/flow-react-components/Text";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import ButtonGroup from "@mittwald/flow-react-components/ButtonGroup";
import Button from "@mittwald/flow-react-components/Button";
import Heading from "@mittwald/flow-react-components/Heading";
import Action from "@mittwald/flow-react-components/Action";

<ModalTrigger>
  <Button variant="accent">Organisation anlegen</Button>
  <Modal>
    <Heading>Neue Organisation</Heading>
    <Content>
      <Text>
        Eine Organisation kannst du dir wie ein Unternehmen
        vorstellen. An diesem Ort verwaltest du deine
        Mitarbeiter, Zahlungsmodalitäten und kannst deine
        Rechnungen einsehen.
      </Text>
      <TextField>
        <Label>Organisationsname</Label>
      </TextField>
    </Content>
    <ButtonGroup>
      <Action closeModal>
        <Button variant="accent">
          Organisation anlegen
        </Button>
        <Button style="soft" variant="secondary">
          Abbrechen
        </Button>
      </Action>
    </ButtonGroup>
  </Modal>
</ModalTrigger>;
bd:T532,import Modal, {
  ModalTrigger,
} from "@mittwald/flow-react-components/Modal";
import Content from "@mittwald/flow-react-components/Content";
import Text from "@mittwald/flow-react-components/Text";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import ButtonGroup from "@mittwald/flow-react-components/ButtonGroup";
import Button from "@mittwald/flow-react-components/Button";
import Heading from "@mittwald/flow-react-components/Heading";
import Action from "@mittwald/flow-react-components/Action";

<ModalTrigger>
  <Button variant="accent">Organisation anlegen</Button>
  <Modal offCanvas>
    <Heading>Neue Organisation</Heading>
    <Content>
      <Text>
        Eine Organisation kannst du dir wie ein Unternehmen
        vorstellen. An diesem Ort verwaltest du deine
        Mitarbeiter, Zahlungsmodalitäten und kannst deine
        Rechnungen einsehen.
      </Text>
      <TextField>
        <Label>Organisationsname</Label>
      </TextField>
    </Content>
    <ButtonGroup>
      <Action closeModal>
        <Button variant="accent">
          Organisation anlegen
        </Button>
        <Button style="soft" variant="secondary">
          Abbrechen
        </Button>
      </Action>
    </ButtonGroup>
  </Modal>
</ModalTrigger>;
bb:{"default":"$bc","offCanvas":"$bd"}
be:["02-components","overlays","modal"]
c0:{"component":"OffCanvas","description":"Das OffCanvas dient dazu Inhalte in einem seitlich angeordneten Overlay anzuzeigen. Es kann beispielsweise für mobile Navigation verwendet werden"}
c1:{}
bf:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$c0","scope":"$c1"}
c2:{"default":"import Text from \"@mittwald/flow-react-components/Text\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport OffCanvas, {\n  OffCanvasTrigger,\n} from \"@mittwald/flow-react-components/OffCanvas\";\nimport {\n  IconCustomer,\n  IconMenu,\n  IconProject,\n  IconServer,\n} from \"@mittwald/flow-react-components/Icons\";\nimport Link from \"@mittwald/flow-react-components/Link\";\nimport Navigation from \"@mittwald/flow-react-components/Navigation\";\n\n<OffCanvasTrigger>\n  <Button>\n    <IconMenu />\n  </Button>\n  <OffCanvas>\n    <Navigation aria-label=\"Main menu\">\n      <Link>\n        <IconCustomer />\n        <Text>Customer</Text>\n      </Link>\n      <Link aria-current=\"page\">\n        <IconServer />\n        <Text>Server</Text>\n      </Link>\n      <Link>\n        <IconProject />\n        <Text>Project</Text>\n      </Link>\n    </Navigation>\n  </OffCanvas>\n</OffCanvasTrigger>;\n"}
c3:["02-components","overlays","off-canvas"]
c5:{"component":"Tooltip","description":"Ein Tooltip zeigt dem Benutzer zusätzliche Informationen beim hovern an."}
c6:{}
c4:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$c5","scope":"$c6"}
c7:{"default":"import Tooltip, {\n  TooltipTrigger,\n} from \"@mittwald/flow-react-components/Tooltip\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconCopy } from \"@mittwald/flow-react-components/Icons\";\n\n<TooltipTrigger>\n  <Button aria-label=\"Speichern\">\n    <IconCopy />\n  </Button>\n  <Tooltip>Speichern</Tooltip>\n</TooltipTrigger>;\n"}
c8:["02-components","overlays","tooltip"]
ca:{"component":"InlineAlert","description":"Der InlineAlert zeigt relevante Hinweise innerhalb des Contents an."}
cb:{}
c9:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$ca","scope":"$cb"}
cd:T513,import InlineAlert from "@mittwald/flow-react-components/InlineAlert";
import Heading from "@mittwald/flow-react-components/Heading";
import Content from "@mittwald/flow-react-components/Content";

<Row>
  <InlineAlert status="info">
    <Heading>E-Mail-Adresse wurde archiviert</Heading>
    <Content>
      Da deine Domain gelöscht wurde, wurde diese
      E-Mail-Adresse archiviert. Um E-Mails empfangen und
      senden zu können musst du die Adresse wieder
      umbenennen.
    </Content>
  </InlineAlert>

  <InlineAlert status="warning">
    <Heading>Dein Speicher ist fast voll</Heading>
    <Content>
      Dein Speicher ist zu über 80% belegt. Wir empfehlen
      dir deinen Speicherplatz zu erweitern, um Problemen
      vorzubeugen.
    </Content>
  </InlineAlert>

  <InlineAlert status="danger">
    <Heading>
      Es konnte kein SSL-Zertifikat ausgestellt werden
    </Heading>
    <Content>
      Für diese Domain konnte kein SSL-Zertifikat
      ausgestellt werden, da die Domain per IP nicht auf
      deine Server-IP zeigt.
    </Content>
  </InlineAlert>

  <InlineAlert status="success">
    <Heading>Deine App wurde aktualisiert</Heading>
    <Content>
      Deine App wurde erfolgreich auf die neueste Version
      aktualisiert.
    </Content>
  </InlineAlert>
</Row>;
cc:{"default":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\n\n<InlineAlert>\n  <Heading>E-Mail-Adresse wurde archiviert</Heading>\n</InlineAlert>;\n","status":"$cd","with-content":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\nimport Content from \"@mittwald/flow-react-components/Content\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<InlineAlert>\n  <Heading>E-Mail-Adresse wurde archiviert</Heading>\n  <Content>\n    Da deine Domain gelöscht wurde, wurde diese\n    E-Mail-Adresse archiviert. Um E-Mails empfangen und\n    senden zu können musst du die Adresse wieder umbenennen.\n    <Button>E-Mail-Adresse anpassen</Button>\n  </Content>\n</InlineAlert>;\n"}
ce:["02-components","status","inline-alert"]
d0:{"component":"LoadingSpinner","description":"Der Loading Spinner zeigt an, dass sich ein Element oder eine Seite im Ladezustand befindet."}
d1:{}
cf:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$d0","scope":"$d1"}
d2:{"default":"import LoadingSpinner from \"@mittwald/flow-react-components/LoadingSpinner\";\n\n<LoadingSpinner />;\n"}
d3:["02-components","status","loading-spinner"]
d5:{"component":"ProgressBar","description":"Die Progressbar zeigt an wie weit ein Vorgang fortgeschritten ist."}
d6:{}
d4:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$d5","scope":"$d6"}
d7:{"default":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ProgressBar value={50}>\n  <Label>Speicher</Label>\n</ProgressBar>;\n","maxValue":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ProgressBar\n  showMaxValue\n  value={500}\n  maxValue={1000}\n  minValue={0}\n  formatOptions={{ style: \"unit\", unit: \"gigabyte\" }}\n>\n  <Label>Speicher</Label>\n</ProgressBar>;\n","small":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ProgressBar size=\"s\" value={50}>\n  <Label>Speicher</Label>\n</ProgressBar>;\n","status":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\n\n<Row>\n  <ProgressBar value={50} status=\"info\">\n    Info\n  </ProgressBar>\n  <ProgressBar value={50} status=\"success\">\n    Success\n  </ProgressBar>\n  <ProgressBar value={70} status=\"warning\">\n    Warning\n  </ProgressBar>\n  <ProgressBar value={90} status=\"danger\">\n    Danger\n  </ProgressBar>\n</Row>;\n"}
d8:["02-components","status","progress-bar"]
da:{"component":"StatusBadge","description":"Der StatusBadge zeigt Informationen zum Zustand eines Elements."}
db:{}
d9:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$da","scope":"$db"}
dc:{"default":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<StatusBadge>Archiviert</StatusBadge>;\n","status":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<Row>\n  <StatusBadge status=\"info\">Archiviert</StatusBadge>\n  <StatusBadge status=\"success\">\n    Update erfolgreich\n  </StatusBadge>\n  <StatusBadge status=\"warning\">\n    Speicher fast voll\n  </StatusBadge>\n  <StatusBadge status=\"danger\">SSL fehlt</StatusBadge>\n</Row>;\n"}
dd:["02-components","status","status-badge"]
df:{"component":"StatusIcon","description":"Das StatusIcon dient zur Veranschaulichung eines Status, beispielsweise in einem StatusBadge oder InlineAlert"}
e0:{}
de:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$df","scope":"$e0"}
e1:{"default":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<StatusIcon />;\n","status":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<Row>\n  <StatusIcon status=\"info\" />\n  <StatusIcon status=\"success\" />\n  <StatusIcon status=\"warning\" />\n  <StatusIcon status=\"danger\" />\n</Row>;\n"}
e2:["02-components","status","status-icon"]
e4:{"component":"ColumnLayout","description":"Mit dem ColumnLayout kann Inhalt in Spalten unterteilt werden."}
e5:{}
e3:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    example: \"main\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$e4","scope":"$e5"}
e6:{"custom-values":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout m={[2, 1]}>\n  <TextField>\n    <Label>Straße</Label>\n  </TextField>\n  <TextField>\n    <Label>Hausnummer</Label>\n  </TextField>\n</ColumnLayout>;\n","default":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout>\n  <TextField>\n    <Label>Vorname</Label>\n  </TextField>\n  <TextField>\n    <Label>Nachname</Label>\n  </TextField>\n  <TextField>\n    <Label>Straße</Label>\n  </TextField>\n  <TextField>\n    <Label>Hausnummer</Label>\n  </TextField>\n</ColumnLayout>;\n","main":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout s={[1, 1]}>\n  <TextField>\n    <Label>Vorname</Label>\n  </TextField>\n  <TextField>\n    <Label>Nachname</Label>\n  </TextField>\n</ColumnLayout>;\n"}
e7:["02-components","structure","column-layout"]
e9:{"component":"LayoutCard","description":"Eine LayoutCard ist ein Struktur-Element, das mit beliebigem Inhalt gefüllt werden kann"}
ea:{}
e8:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$e9","scope":"$ea"}
eb:{"default":"import LayoutCard from \"@mittwald/flow-react-components/LayoutCard\";\n\n<LayoutCard>Inhalt der Layout Card</LayoutCard>;\n"}
ec:["02-components","structure","layout-card"]
ee:{"component":"List","description":"Die List-Component stellt eine Liste von Elementen mit verschiedenen Informationen dar."}
ef:{}
ed:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    example: \"main\",\n    zoom: 0.6\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$ee","scope":"$ef"}
f1:T653,import List, {
  ListFilter,
  ListItemView,
  ListSorting,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import ContextMenu from "@mittwald/flow-react-components/ContextMenu";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";
import MenuItem from "@mittwald/flow-react-components/MenuItem";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListFilter<Domain>
    property="type"
    mode="some"
    name="Type"
  />
  <ListSorting<Domain> property="domain" name="Domain" />
  <ListSorting<Domain> property="type" name="Type" />
  <ListItemView<Domain>>
    {(domain) => (
      <>
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Nicht verifiziert
          </StatusBadge>
        )}
        <ContextMenu>
          <MenuItem>Details anzeigen</MenuItem>
          <MenuItem>Löschen</MenuItem>
        </ContextMenu>
      </>
    )}
  </ListItemView>
</List>;
f2:T547,import List, {
  ListItemView,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import ContextMenu, {
  MenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={2}>
  <ListStaticData data={domains} />
  <ListItemView<Domain>>
    {(domain) => (
      <>
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Nicht verifiziert
          </StatusBadge>
        )}
        <ContextMenu>
          <MenuItem>Details anzeigen</MenuItem>
          <MenuItem>Löschen</MenuItem>
        </ContextMenu>
      </>
    )}
  </ListItemView>
</List>;
f3:T591,import List, {
  ListItemView,
  ListStaticData,
} from "@mittwald/flow-react-components/List";
import {
  type Domain,
  domains,
} from "@/content/02-components/structure/list/examples/domainApi";
import Avatar from "@mittwald/flow-react-components/Avatar";
import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import ContextMenu, {
  MenuItem,
} from "@mittwald/flow-react-components/ContextMenu";
import Link from "@mittwald/flow-react-components/Link";
import {
  IconDomain,
  IconSubdomain,
} from "@mittwald/flow-react-components/Icons";
import StatusBadge from "@mittwald/flow-react-components/StatusBadge";

<List batchSize={5}>
  <ListStaticData data={domains} />
  <ListItemView<Domain>>
    {(domain) => (
      <Link href="#">
        <Avatar variant={domain.type === "Domain" ? 1 : 2}>
          {domain.type === "Domain" ? (
            <IconDomain />
          ) : (
            <IconSubdomain />
          )}
        </Avatar>
        <Heading>{domain.hostname}</Heading>
        {domain.verified ? (
          <Text>{domain.type}</Text>
        ) : (
          <StatusBadge status="warning">
            Nicht verifiziert
          </StatusBadge>
        )}
        <ContextMenu>
          <MenuItem>Details anzeigen</MenuItem>
          <MenuItem>Löschen</MenuItem>
        </ContextMenu>
      </Link>
    )}
  </ListItemView>
</List>;
f0:{"default":"$f1","main":"$f2","withLink":"$f3"}
f4:["02-components","structure","list"]
f6:{"component":"Section","description":"Die Section dient der Unterteilung von Inhalten in verschiedene Abschnitte"}
f7:{}
f5:{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":"$f6","scope":"$f7"}
f9:T42a,import Heading from "@mittwald/flow-react-components/Heading";
import Text from "@mittwald/flow-react-components/Text";
import Link from "@mittwald/flow-react-components/Link";
import Section from "@mittwald/flow-react-components/Section";
import TextField from "@mittwald/flow-react-components/TextField";
import Label from "@mittwald/flow-react-components/Label";
import { IconMember } from "@mittwald/flow-react-components/Icons";

<>
  <Section>
    <Heading>
      <IconMember />
      Persönliche Informationen
    </Heading>
    <TextField isRequired defaultValue="John">
      <Label>Vorname</Label>
    </TextField>
    <TextField isRequired defaultValue="Doe">
      <Label>Nachname</Label>
    </TextField>
  </Section>
  <Section>
    <Heading>Newsletter</Heading>
    <Text>
      Kommende Releases, neue Features und Tipps rund um
      dein Hosting – wir bringen dir das Wichtigste in dein
      Postfach. Abonniere unseren Newsletter und bleib auf
      dem Laufenden.
    </Text>
    <Link href="#">Newsletter abonnieren</Link>
  </Section>
</>;
f8:{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Section>\n  <Heading>Newsletter</Heading>\n  <Text>\n    Kommende Releases, neue Features und Tipps rund um dein\n    Hosting – wir bringen dir das Wichtigste in dein\n    Postfach. Abonniere unseren Newsletter und bleib auf dem\n    Laufenden.\n  </Text>\n  <Link href=\"#\">Newsletter abonnieren</Link>\n</Section>;\n","multiple":"$f9","status-badge":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\nimport Header from \"@mittwald/flow-react-components/Header\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <StatusBadge>Subscribed</StatusBadge>\n  </Header>\n  <Text>\n    Kommende Releases, neue Features und Tipps rund um dein\n    Hosting – wir bringen dir das Wichtigste in dein\n    Postfach. Abonniere unseren Newsletter und bleib auf dem\n    Laufenden.\n  </Text>\n</Section>;\n","switch":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Header from \"@mittwald/flow-react-components/Header\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <Switch>Abonnement</Switch>\n  </Header>\n  <Text>\n    Kommende Releases, neue Features und Tipps rund um dein\n    Hosting – wir bringen dir das Wichtigste in dein\n    Postfach. Abonniere unseren Newsletter und bleib auf dem\n    Laufenden.\n  </Text>\n</Section>;\n"}
fa:["02-components","structure","section"]
fd:{"mdxSource":"$1e","examples":"$22","slugs":"$23","filename":"01-getting-started/installation/index.mdx"}
fe:{"mdxSource":"$24","examples":"$28","slugs":"$29","filename":"01-getting-started/stylesheet/index.mdx"}
ff:{"mdxSource":"$2a","examples":"$2d","slugs":"$2e","filename":"02-components/actions/action/index.mdx"}
100:{"mdxSource":"$2f","examples":"$32","slugs":"$33","filename":"02-components/actions/button-group/index.mdx"}
101:{"mdxSource":"$34","examples":"$37","slugs":"$38","filename":"02-components/actions/button/index.mdx"}
102:{"mdxSource":"$39","examples":"$3c","slugs":"$3d","filename":"02-components/actions/context-menu/index.mdx"}
103:{"mdxSource":"$3e","examples":"$41","slugs":"$42","filename":"02-components/actions/copy-button/index.mdx"}
104:{"mdxSource":"$43","examples":"$46","slugs":"$47","filename":"02-components/content/avatar/index.mdx"}
105:{"mdxSource":"$48","examples":"$4b","slugs":"$4c","filename":"02-components/content/heading/index.mdx"}
106:{"mdxSource":"$4d","examples":"$50","slugs":"$51","filename":"02-components/content/icon/index.mdx"}
107:{"mdxSource":"$52","examples":"$55","slugs":"$56","filename":"02-components/content/illustrated-message/index.mdx"}
108:{"mdxSource":"$57","examples":"$5a","slugs":"$5b","filename":"02-components/content/image/index.mdx"}
109:{"mdxSource":"$5c","examples":"$5f","slugs":"$60","filename":"02-components/content/inline-code/index.mdx"}
10a:{"mdxSource":"$61","examples":"$64","slugs":"$65","filename":"02-components/content/label/index.mdx"}
10b:{"mdxSource":"$66","examples":"$69","slugs":"$6a","filename":"02-components/content/labeled-value/index.mdx"}
10c:{"mdxSource":"$6b","examples":"$6e","slugs":"$6f","filename":"02-components/content/text/index.mdx"}
10d:{"mdxSource":"$70","examples":"$73","slugs":"$74","filename":"02-components/form-controls/checkbox-button/index.mdx"}
10e:{"mdxSource":"$75","examples":"$78","slugs":"$79","filename":"02-components/form-controls/checkbox-group/index.mdx"}
10f:{"mdxSource":"$7a","examples":"$7d","slugs":"$7e","filename":"02-components/form-controls/checkbox/index.mdx"}
110:{"mdxSource":"$7f","examples":"$82","slugs":"$83","filename":"02-components/form-controls/number-field/index.mdx"}
111:{"mdxSource":"$84","examples":"$87","slugs":"$88","filename":"02-components/form-controls/radio-group/index.mdx"}
112:{"mdxSource":"$89","examples":"$8c","slugs":"$8d","filename":"02-components/form-controls/select/index.mdx"}
113:{"mdxSource":"$8e","examples":"$91","slugs":"$92","filename":"02-components/form-controls/switch/index.mdx"}
114:{"mdxSource":"$93","examples":"$96","slugs":"$97","filename":"02-components/form-controls/text-area/index.mdx"}
115:{"mdxSource":"$98","examples":"$9b","slugs":"$9c","filename":"02-components/form-controls/text-field/index.mdx"}
116:{"mdxSource":"$9d","examples":"$a0","slugs":"$a1","filename":"02-components/navigation/breadcrumb/index.mdx"}
117:{"mdxSource":"$a2","examples":"$a5","slugs":"$a7","filename":"02-components/navigation/header-navigation/index.mdx"}
118:{"mdxSource":"$a8","examples":"$ab","slugs":"$ac","filename":"02-components/navigation/link/index.mdx"}
119:{"mdxSource":"$ad","examples":"$b0","slugs":"$b1","filename":"02-components/navigation/navigation/index.mdx"}
11a:{"mdxSource":"$b2","examples":"$b5","slugs":"$b7","filename":"02-components/navigation/tabs/index.mdx"}
11b:{"mdxSource":"$b8","examples":"$bb","slugs":"$be","filename":"02-components/overlays/modal/index.mdx"}
11c:{"mdxSource":"$bf","examples":"$c2","slugs":"$c3","filename":"02-components/overlays/off-canvas/index.mdx"}
11d:{"mdxSource":"$c4","examples":"$c7","slugs":"$c8","filename":"02-components/overlays/tooltip/index.mdx"}
11e:{"mdxSource":"$c9","examples":"$cc","slugs":"$ce","filename":"02-components/status/inline-alert/index.mdx"}
11f:{"mdxSource":"$cf","examples":"$d2","slugs":"$d3","filename":"02-components/status/loading-spinner/index.mdx"}
120:{"mdxSource":"$d4","examples":"$d7","slugs":"$d8","filename":"02-components/status/progress-bar/index.mdx"}
121:{"mdxSource":"$d9","examples":"$dc","slugs":"$dd","filename":"02-components/status/status-badge/index.mdx"}
122:{"mdxSource":"$de","examples":"$e1","slugs":"$e2","filename":"02-components/status/status-icon/index.mdx"}
123:{"mdxSource":"$e3","examples":"$e6","slugs":"$e7","filename":"02-components/structure/column-layout/index.mdx"}
124:{"mdxSource":"$e8","examples":"$eb","slugs":"$ec","filename":"02-components/structure/layout-card/index.mdx"}
125:{"mdxSource":"$ed","examples":"$f0","slugs":"$f4","filename":"02-components/structure/list/index.mdx"}
126:{"mdxSource":"$f5","examples":"$f8","slugs":"$fa","filename":"02-components/structure/section/index.mdx"}
fc:["$fd","$fe","$ff","$100","$101","$102","$103","$104","$105","$106","$107","$108","$109","$10a","$10b","$10c","$10d","$10e","$10f","$110","$111","$112","$113","$114","$115","$116","$117","$118","$119","$11a","$11b","$11c","$11d","$11e","$11f","$120","$121","$122","$123","$124","$125","$126"]
6:["$","html",null,{"lang":"en","children":["$","body",null,{"className":"flow layout_body__oiEIT","children":["$","$L8",null,{"children":[["$","header",null,{"className":"layout_header__ttTk7","children":[["$","$L9",null,{"size":"l","className":"layout_logo__PcxmI"}],["$","$La",null,{"level":1,"className":"$undefined","children":"Flow"}],["$","$Lb",null,{"className":"layout_betaBadge__Rtyuk","status":"warning","children":"beta"}],["$","$Lc",null,{"className":"layout_headerNavigation__SNRbw","docs":[{"mdxSource":{"compiledSource":"$d","frontmatter":{"description":"Willkommen in der Flow Dokumentation!"},"scope":{}},"examples":{},"slugs":["01-getting-started","installation"],"filename":"01-getting-started/installation/index.mdx"},{"mdxSource":{"compiledSource":"$e","frontmatter":{},"scope":{}},"examples":{"composition":"import ExampleSvg from \"@/content/01-getting-started/stylesheet/examples/components/ExampleSvg\";\n\n<aside className=\"flow--inline-alert flow--inline-alert--info\">\n  <ExampleSvg className=\"flow--icon flow--inline-alert--status-icon\" />\n  <h3 className=\"flow--heading flow--inline-alert--heading\">\n    E-Mail Adresse wurde archiviert\n  </h3>\n  <div className=\"flow--inline-alert--content\">\n    Da deine Domain gelöscht wurde, wurde diese\n    E-Mail-Adresse archiviert. Um E-Mails empfangen und\n    senden zu können musst du die Adresse wieder umbenennen.\n  </div>\n</aside>;\n","multiple-variants":"<button className=\"flow--button flow--button--primary flow--button--size-s\">\n  Small Primary Button\n</button>;\n","variants":"<button className=\"flow--button flow--button--primary\">\n  Primary Button\n</button>;\n"},"slugs":["01-getting-started","stylesheet"],"filename":"01-getting-started/stylesheet/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Action","description":"Die Action Komponente kann um einen Button gelegt werden, um beispielsweise asynchrone Aktionen mit dem Button auszuführen."},"scope":{}},"examples":{"default":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Action from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep}>\n  <Button>Speichern</Button>\n</Action>;\n","feedback":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Action from \"@mittwald/flow-react-components/Action\";\nimport { sleep } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleep} feedback>\n  <Button>Speichern</Button>\n</Action>;\n","longAction":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Action from \"@mittwald/flow-react-components/Action\";\nimport { sleepLong } from \"@/content/02-components/actions/action/examples/lib\";\n\n<Action action={sleepLong}>\n  <Button>Speichern</Button>\n</Action>;\n"},"slugs":["02-components","actions","action"],"filename":"02-components/actions/action/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    zoom: 0.7\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"ButtonGroup","description":"Die ButtonGroup dient dazu zusammengehörige Buttons sinnvoll zu gruppieren. Sie wird beispielsweise für Forms oder Modals verwendet."},"scope":{}},"examples":{"additionalSecondary":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"secondary\" style=\"soft\">\n    Speichern und weitere anlegen\n  </Button>\n  <Button variant=\"accent\">E-Mail-Addresse anlegen</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abbrechen\n  </Button>\n</ButtonGroup>;\n","danger":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"danger\">Projekt löschen</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abbrechen\n  </Button>\n</ButtonGroup>;\n","default":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button variant=\"accent\">Organisation erstellen</Button>\n  <Button variant=\"secondary\" style=\"soft\">\n    Abbrechen\n  </Button>\n</ButtonGroup>;\n","info":"import ButtonGroup from \"@mittwald/flow-react-components/ButtonGroup\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<ButtonGroup>\n  <Button>Ok</Button>\n</ButtonGroup>;\n"},"slugs":["02-components","actions","button-group"],"filename":"02-components/actions/button-group/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Button","description":"Der Button dient zum Ausführen von Aktionen."},"scope":{}},"examples":{"default":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button\n  onPress={() => {\n    alert(\"Button gedrückt\");\n  }}\n>\n  Fortfahren/Aktion\n</Button>;\n","icon":"import Button from \"@mittwald/flow-react-components/Button\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Button aria-label=\"Home\">\n  <IconHome />\n</Button>;\n","iconText":"import Button from \"@mittwald/flow-react-components/Button\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport { IconChevronDown } from \"@mittwald/flow-react-components/Icons\";\n\n<Button>\n  <Text>E-Mail-Adresse hinzufügen</Text>\n  <IconChevronDown />\n</Button>;\n","plain":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"plain\" variant=\"primary\">\n    Fortfahren/Aktion\n  </Button>\n  <Button style=\"plain\" variant=\"secondary\">\n    Abbrechen/Zurück\n  </Button>\n  <Button style=\"plain\" variant=\"accent\">\n    Erstellen/Speichern\n  </Button>\n  <Button style=\"plain\" variant=\"danger\">\n    Löschen/Kündigen\n  </Button>\n</Row>;\n","small":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Button size=\"s\">Fortfahren/Aktion</Button>;\n","soft":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button style=\"soft\" variant=\"primary\">\n    Fortfahren/Aktion\n  </Button>\n  <Button style=\"soft\" variant=\"secondary\">\n    Abbrechen/Zurück\n  </Button>\n  <Button style=\"soft\" variant=\"accent\">\n    Erstellen/Speichern\n  </Button>\n  <Button style=\"soft\" variant=\"danger\">\n    Löschen/Kündigen\n  </Button>\n</Row>;\n","states":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button isDisabled>Fortfahren/Aktion</Button>\n  <Button isPending>Fortfahren/Aktion</Button>\n  <Button isSucceeded>Fortfahren/Aktion</Button>\n  <Button isFailed>Fortfahren/Aktion</Button>\n</Row>;\n","variants":"import Button from \"@mittwald/flow-react-components/Button\";\n\n<Row>\n  <Button variant=\"primary\">Fortfahren/Aktion</Button>\n  <Button variant=\"secondary\">Abbrechen/Zurück</Button>\n  <Button variant=\"accent\">Erstellen/Speichern</Button>\n  <Button variant=\"danger\">Löschen/Kündigen</Button>\n</Row>;\n"},"slugs":["02-components","actions","button"],"filename":"02-components/actions/button/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"ContextMenu","description":"Beim ContextMenu handelt es sich um ein Popover, das eine Liste von Aktionen oder Verlinkungen enthält."},"scope":{}},"examples":{"default":"import ContextMenu, {\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport MenuItem from \"@mittwald/flow-react-components/MenuItem\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    onAction={(id) => {\n      alert(id);\n    }}\n  >\n    <MenuItem id=\"1\">Item 1</MenuItem>\n    <MenuItem id=\"2\">Item 2</MenuItem>\n    <MenuItem id=\"3\">Item 3</MenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","multi-select":"import ContextMenu, {\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport MenuItem from \"@mittwald/flow-react-components/MenuItem\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"multiple\"\n    defaultSelectedKeys={[\"item2\", \"item3\"]}\n  >\n    <MenuItem id=\"item1\">Item 1</MenuItem>\n    <MenuItem id=\"item2\">Item 2</MenuItem>\n    <MenuItem id=\"item3\">Item 3</MenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n","single-select":"import ContextMenu, {\n  ContextMenuTrigger,\n} from \"@mittwald/flow-react-components/ContextMenu\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport MenuItem from \"@mittwald/flow-react-components/MenuItem\";\n\n<ContextMenuTrigger>\n  <Button>Trigger</Button>\n  <ContextMenu\n    selectionMode=\"single\"\n    defaultSelectedKeys={[\"item2\"]}\n  >\n    <MenuItem id=\"item1\">Item 1</MenuItem>\n    <MenuItem id=\"item2\">Item 2</MenuItem>\n    <MenuItem id=\"item3\">Item 3</MenuItem>\n  </ContextMenu>\n</ContextMenuTrigger>;\n"},"slugs":["02-components","actions","context-menu"],"filename":"02-components/actions/context-menu/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"CopyButton","description":"Der CopyButton dient dazu Informationen in die Zwischenablage zu kopieren."},"scope":{}},"examples":{"default":"import CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<CopyButton text=\"Kopierter Inhalt\" />;\n"},"slugs":["02-components","actions","copy-button"],"filename":"02-components/actions/copy-button/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Avatar","description":"Der Avatar kann ein Bild, Initialen oder ein Icon darstellen."},"scope":{}},"examples":{"colors":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\nimport { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport { IconCustomer } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <Avatar>\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gustav Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gina-Lisa Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <Initials>Gorgio Gopher</Initials>\n  </Avatar>\n  <Avatar>\n    <IconHome />\n  </Avatar>\n  <Avatar>\n    <IconCustomer />\n  </Avatar>\n</Row>;\n","default":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Avatar>\n  <Initials>Gillian Gopher</Initials>\n</Avatar>;\n","icon":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\nimport Avatar from \"@mittwald/flow-react-components/Avatar\";\n\n<Avatar variant={1}>\n  <IconHome />\n</Avatar>;\n","image":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Image from \"@mittwald/flow-react-components/Image\";\n\n<Avatar>\n  <Image\n    alt=\"Gopher\"\n    src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  />\n</Avatar>;\n","sizes":"import Avatar from \"@mittwald/flow-react-components/Avatar\";\nimport Initials from \"@mittwald/flow-react-components/Initials\";\n\n<Row>\n  <Avatar size=\"xs\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"s\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"m\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n  <Avatar size=\"l\">\n    <Initials>Gillian Gopher</Initials>\n  </Avatar>\n</Row>;\n"},"slugs":["02-components","content","avatar"],"filename":"02-components/content/avatar/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Heading","description":"Die Heading-Komponente wird verwendet, um Überschriften anzuzeigen"},"scope":{}},"examples":{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<Heading>Das ist eine Überschrift</Heading>;\n","icon":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport { IconMember } from \"@mittwald/flow-react-components/Icons\";\n\n<Heading>\n  <IconMember />\n  Persönliche Informationen\n</Heading>;\n","levels":"import Heading from \"@mittwald/flow-react-components/Heading\";\n\n<>\n  <Heading level={1}>\n    Das ist eine Level 1 Überschrift\n  </Heading>\n  <Heading level={2}>\n    Das ist eine Level 2 Überschrift\n  </Heading>\n  <Heading level={3}>\n    Das ist eine Level 3 Überschrift\n  </Heading>\n  <Heading level={4}>\n    Das ist eine Level 4 Überschrift\n  </Heading>\n  <Heading level={5}>\n    Das ist eine Level 5 Überschrift\n  </Heading>\n</>;\n"},"slugs":["02-components","content","heading"],"filename":"02-components/content/heading/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Icon","description":"Die Icon-Komponente unterstützt Tabler Icons sowie benutzerdefinierte SVGs."},"scope":{}},"examples":{"coloring":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome\n  style={{ color: \"var(--primary--color--800)\" }}\n/>;\n","default":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<IconHome />;\n","sizes":"import { IconHome } from \"@mittwald/flow-react-components/Icons\";\n\n<Row>\n  <IconHome size=\"s\" />\n  <IconHome size=\"m\" />\n  <IconHome size=\"l\" />\n</Row>;\n","svg-string":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n() => {\n  const svgString = `\\\n    <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"50\" cy=\"50\" r=\"50\" />\n    </svg>\n  `;\n\n  return <Icon>{svgString}</Icon>;\n};\n","svg":"import Icon from \"@mittwald/flow-react-components/Icon\";\n\n<Icon>\n  <svg\n    viewBox=\"0 0 100 100\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <circle cx=\"50\" cy=\"50\" r=\"50\" />\n  </svg>\n</Icon>;\n","tabler":"import Icon from \"@mittwald/flow-react-components/Icon\";\nimport { IconStar } from \"@tabler/icons-react\";\n\n<Icon>\n  <IconStar />\n</Icon>;\n"},"slugs":["02-components","content","icon"],"filename":"02-components/content/icon/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    zoom: 0.7\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"IllustratedMessage","description":"Die IllustratedMessage dient als Platzhalter, wenn der eigentliche Inhalt nicht angezeigt werden kann."},"scope":{}},"examples":{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport IllustratedMessage from \"@mittwald/flow-react-components/IllustratedMessage\";\nimport { IconApp } from \"@mittwald/flow-react-components/Icons\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<IllustratedMessage>\n  <IconApp />\n  <Heading>Keine Apps installiert</Heading>\n  <Text>\n    Lege deine erste App an, um mit der Arbeit an deiner\n    Webseite loszulegen.\n  </Text>\n  <Button>App anlegen</Button>\n</IllustratedMessage>;\n","negative":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport IllustratedMessage from \"@mittwald/flow-react-components/IllustratedMessage\";\nimport { IconDanger } from \"@mittwald/flow-react-components/Icons\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<IllustratedMessage variant=\"negative\">\n  <IconDanger />\n  <Heading>Kein Zugriff</Heading>\n  <Text>\n    Du hast keine Berechtigung, um auf diese Seite\n    zuzugreifen.\n  </Text>\n  <Button>Zum Dashboard</Button>\n</IllustratedMessage>;\n"},"slugs":["02-components","content","illustrated-message"],"filename":"02-components/content/illustrated-message/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Image","description":"Mit der Image-Komponente können Bilder angezeigt werden."},"scope":{}},"examples":{"default":"import Image from \"@mittwald/flow-react-components/Image\";\n\n<Image\n  src=\"https://cdn.shopify.com/s/files/1/2022/6883/products/IMG_2002_250x250@2x.JPG?v=1538235544\"\n  alt=\"Gopher\"\n  width={200}\n/>;\n"},"slugs":["02-components","content","image"],"filename":"02-components/content/image/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"InlineCode","description":"InlineCode wird verwendet, um Code innerhalb eines Textes anzuzeigen."},"scope":{}},"examples":{"default":"import Text from \"@mittwald/flow-react-components/Text\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\n\n<Text>\n  Gib <InlineCode>yarn start</InlineCode> ein um deine App\n  zu starten.\n</Text>;\n"},"slugs":["02-components","content","inline-code"],"filename":"02-components/content/inline-code/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Label","description":"Ein Label dient der Beschreibung eines Elements, und wird beispielsweise für Formularfelder oder in LabeledValues verwendet."},"scope":{}},"examples":{"default":"import Label from \"@mittwald/flow-react-components/Label\";\n\n<Label>Das ist ein Label</Label>;\n"},"slugs":["02-components","content","label"],"filename":"02-components/content/label/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"LabeledValue","description":"Ein LabeledValue zeigt eine Information mit einem Label an."},"scope":{}},"examples":{"copy-button":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>Projekt ID</Label>\n  <Content>p-eWRhpRV</Content>\n  <CopyButton text=\"Projekt ID: p-eWRhpRV\" />\n</LabeledValue>;\n","default":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Content from \"@mittwald/flow-react-components/Content\";\n\n<LabeledValue>\n  <Label>Speicherplatz</Label>\n  <Content>20 GB</Content>\n</LabeledValue>;\n","inline-code":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport InlineCode from \"@mittwald/flow-react-components/InlineCode\";\nimport CopyButton from \"@mittwald/flow-react-components/CopyButton\";\n\n<LabeledValue>\n  <Label>IP Adresse</Label>\n  <InlineCode>127.0.0.1</InlineCode>\n  <CopyButton text=\"127.0.0.1\" />\n</LabeledValue>;\n","link":"import LabeledValue from \"@mittwald/flow-react-components/LabeledValue\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<LabeledValue>\n  <Label>Domain</Label>\n  <Link>https://mittwald.de</Link>\n</LabeledValue>;\n"},"slugs":["02-components","content","labeled-value"],"filename":"02-components/content/labeled-value/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Text","description":"Die Text-Komponente wird verwendet, um Texte zu gruppieren."},"scope":{}},"examples":{"default":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Text>Das ist ein Text</Text>;\n","emulateBoldWidth":"import Text from \"@mittwald/flow-react-components/Text\";\n\n<Column>\n  <Text\n    style={{ borderInline: \"2px solid red\" }}\n    emulateBoldWidth\n  >\n    Das ist ein Text\n  </Text>\n  <Text style={{ borderInline: \"2px solid red\" }}>\n    <strong>Das ist ein Text</strong>\n  </Text>\n</Column>;\n"},"slugs":["02-components","content","text"],"filename":"02-components/content/text/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"CheckboxButton","description":"Der CheckboxButton verhält sich wie eine Checkbox."},"scope":{}},"examples":{"default":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\n\n<CheckboxButton>\n  Ich stimme den AGBs zu und bestätige, dass ich die\n  Datenschutzhinweise zur Kenntnis genommen habe.\n</CheckboxButton>;\n"},"slugs":["02-components","form-controls","checkbox-button"],"filename":"02-components/form-controls/checkbox-button/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"CheckboxGroup","description":"Die Checkbox Gruppe enthält eine logisch zusammenhängende Sammlung von Checkboxen"},"scope":{}},"examples":{"buttons":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport CheckboxGroup from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Berechtigungen</Label>\n  <CheckboxButton value=\"read\">Lesen</CheckboxButton>\n  <CheckboxButton value=\"write\">Schreiben</CheckboxButton>\n</CheckboxGroup>;\n","customColumns":"import CheckboxButton from \"@mittwald/flow-react-components/CheckboxButton\";\nimport CheckboxGroup from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup l={[1, 1]}>\n  <Label>Berechtigungen</Label>\n  <CheckboxButton value=\"read\">Lesen</CheckboxButton>\n  <CheckboxButton value=\"write\">Schreiben</CheckboxButton>\n</CheckboxGroup>;\n","default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\nimport CheckboxGroup from \"@mittwald/flow-react-components/CheckboxGroup\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<CheckboxGroup>\n  <Label>Berechtigungen</Label>\n  <Checkbox value=\"read\">Lesen</Checkbox>\n  <Checkbox value=\"write\">Schreiben</Checkbox>\n</CheckboxGroup>;\n"},"slugs":["02-components","form-controls","checkbox-group"],"filename":"02-components/form-controls/checkbox-group/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Checkbox","description":"Die Checkbox dient dazu einen Wert zu aus- oder abzuwählen."},"scope":{}},"examples":{"default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\n\n<Checkbox>\n  Ich stimme den AGBs zu und bestätige, dass ich die\n  Datenschutzhinweise zur Kenntnis genommen habe.\n</Checkbox>;\n"},"slugs":["02-components","form-controls","checkbox"],"filename":"02-components/form-controls/checkbox/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"NumberField","description":"Das NumberField dient der Eingabe von Zahlen."},"scope":{}},"examples":{"default":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<NumberField minValue={0} maxValue={100}>\n  <Label>Alter</Label>\n  <FieldDescription>Gib dein Alter ein</FieldDescription>\n</NumberField>;\n","disabled":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isDisabled>\n  <Label>Alter</Label>\n</NumberField>;\n","invalid":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<NumberField isInvalid value={-1}>\n  <Label>Alter</Label>\n  <FieldError>Ungültige Eingabe</FieldError>\n</NumberField>;\n","required":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField isRequired>\n  <Label>Alter</Label>\n</NumberField>;\n","unit":"import NumberField from \"@mittwald/flow-react-components/NumberField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<NumberField\n  formatOptions={{\n    style: \"unit\",\n    unit: \"gigabyte\",\n  }}\n  defaultValue={12}\n>\n  <Label>Speicherplatz</Label>\n</NumberField>;\n"},"slugs":["02-components","form-controls","number-field"],"filename":"02-components/form-controls/number-field/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"RadioGroup","description":"Eine RadioGroup ist eine Liste von Optionen, von denen genau eine ausgewählt werden muss."},"scope":{}},"examples":{"buttons":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Rolle</Label>\n  <RadioButton value=\"admin\">Administrator</RadioButton>\n  <RadioButton value=\"member\">Mitglied</RadioButton>\n  <RadioButton value=\"accountant\">Buchhalter</RadioButton>\n</RadioGroup>;\n","customColumns":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  RadioButton,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup\n  defaultValue=\"admin\"\n  s={[1, 1]}\n  m={[1, 1, 1]}\n  l={[1, 1, 1, 1]}\n>\n  <Label>Rolle</Label>\n  <RadioButton value=\"admin\">Administrator</RadioButton>\n  <RadioButton value=\"member\">Mitglied</RadioButton>\n  <RadioButton value=\"accountant\">Buchhalter</RadioButton>\n</RadioGroup>;\n","default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\">\n  <Label>Rolle</Label>\n  <Radio value=\"admin\">Administrator</Radio>\n  <Radio value=\"member\">Mitglied</Radio>\n  <Radio value=\"accountant\">Buchhalter</Radio>\n</RadioGroup>;\n","segmented":"import Label from \"@mittwald/flow-react-components/Label\";\nimport RadioGroup, {\n  Radio,\n} from \"@mittwald/flow-react-components/RadioGroup\";\n\n<RadioGroup defaultValue=\"admin\" variant=\"segmented\">\n  <Label>Rolle</Label>\n  <Radio value=\"admin\">Administrator</Radio>\n  <Radio value=\"member\">Mitglied</Radio>\n  <Radio value=\"accountant\">Buchhalter</Radio>\n</RadioGroup>;\n"},"slugs":["02-components","form-controls","radio-group"],"filename":"02-components/form-controls/radio-group/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Select","description":"Die Select-Komponente bietet eine Liste von Optionen an, von denen eine ausgewählt werden kann."},"scope":{}},"examples":{"default":"import Select, {\n  Option,\n} from \"@mittwald/flow-react-components/Select\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<Select>\n  <Label>App</Label>\n  <Option>WordPress</Option>\n  <Option>TYPO3</Option>\n  <Option>Contao</Option>\n  <Option>Drupal</Option>\n  <Option>Joomla!</Option>\n  <Option>Matomo</Option>\n</Select>;\n"},"slugs":["02-components","form-controls","select"],"filename":"02-components/form-controls/select/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Switch","description":"Die Switch-Komponente stellt einen Schalter dar, mit dem eine Option aktiviert oder deaktiviert werden kann."},"scope":{}},"examples":{"default":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch defaultSelected>Autoresponder</Switch>;\n","disabled":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch isDisabled>Autoresponder</Switch>;\n","leading-label":"import Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Switch labelPosition=\"leading\">Autoresponder</Switch>;\n"},"slugs":["02-components","form-controls","switch"],"filename":"02-components/form-controls/switch/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"TextArea","description":"Die Textarea dient zur Eingabe längerer Texte und stellt diese mehrzeilig dar."},"scope":{}},"examples":{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea>\n  <Label>Public Key</Label>\n  <FieldDescription>Beginnt mit ssh-rsa</FieldDescription>\n</TextArea>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isDisabled>\n  <Label>Public Key</Label>\n</TextArea>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextArea isInvalid defaultValue=\"hello\">\n  <Label>Public Key</Label>\n  <FieldError>Ungültiger Key</FieldError>\n</TextArea>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextArea from \"@mittwald/flow-react-components/TextArea\";\n\n<TextArea isRequired>\n  <Label>Public Key</Label>\n</TextArea>;\n"},"slugs":["02-components","form-controls","text-area"],"filename":"02-components/form-controls/text-area/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"TextField","description":"Ein TextField ermöglicht es dem Nutzer, Text über die Tastatur in ein User-Interface einzugeben. Ein erforderliches Label und eine optionale FieldDescription unterstützen dabei, die Anforderungen an die Eingabe klar zu kommunizieren."},"scope":{}},"examples":{"default":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldDescription from \"@mittwald/flow-react-components/FieldDescription\";\n\n<TextField>\n  <Label>URL</Label>\n  <FieldDescription>Beginnt mit https://</FieldDescription>\n</TextField>;\n","disabled":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isDisabled>\n  <Label>URL</Label>\n</TextField>;\n","invalid":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport FieldError from \"@mittwald/flow-react-components/FieldError\";\n\n<TextField isInvalid defaultValue=\"hello\">\n  <Label>URL</Label>\n  <FieldError>Das ist keine URL</FieldError>\n</TextField>;\n","required":"import Label from \"@mittwald/flow-react-components/Label\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\n\n<TextField isRequired>\n  <Label>URL</Label>\n</TextField>;\n"},"slugs":["02-components","form-controls","text-field"],"filename":"02-components/form-controls/text-field/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Breadcrumb","description":"Die Breadcrumb zeigt die aktuelle Position in der Hierarchie der Website und bietet die Möglichkeit schnell zu höheren Navigationsebenen zu springen."},"scope":{}},"examples":{"default":"import Breadcrumb from \"@mittwald/flow-react-components/Breadcrumb\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Breadcrumb>\n  <Link href=\"#\">Projekte</Link>\n  <Link href=\"#\">Apps</Link>\n  <Link href=\"#\">Meine App</Link>\n</Breadcrumb>;\n"},"slugs":["02-components","navigation","breadcrumb"],"filename":"02-components/navigation/breadcrumb/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"HeaderNavigation","description":"Bei der HeaderNavigation handelt es sich um eine horizontal dargestellte Navigation, die als Hauptnavigation einer Seite verwendet werden kann."},"scope":{}},"examples":{"contextMenu":"$f","default":"import Link from \"@mittwald/flow-react-components/Link\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconSearch } from \"@mittwald/flow-react-components/Icons\";\nimport HeaderNavigation from \"@mittwald/flow-react-components/HeaderNavigation\";\n\n<HeaderNavigation aria-label=\"Header navigation\">\n  <Link href=\"#\">Getting startet</Link>\n  <Link href=\"#\" aria-current=\"page\">\n    Komponenten\n  </Link>\n  <Button>\n    <IconSearch />\n  </Button>\n</HeaderNavigation>;\n","inverse":"import Link from \"@mittwald/flow-react-components/Link\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconSearch } from \"@mittwald/flow-react-components/Icons\";\nimport HeaderNavigation from \"@mittwald/flow-react-components/HeaderNavigation\";\n\n<HeaderNavigation aria-label=\"Header navigation\" inverse>\n  <Link href=\"#\">Getting startet</Link>\n  <Link href=\"#\" aria-current=\"page\">\n    Components\n  </Link>\n  <Button>\n    <IconSearch />\n  </Button>\n</HeaderNavigation>;\n"},"slugs":["02-components","navigation","header-navigation"],"filename":"02-components/navigation/header-navigation/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Link","description":"Die Link-Komponente kann zur Navigation innerhalb der Seite oder zu externen Zielen genutzt werden."},"scope":{}},"examples":{"default":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link href=\"#\">Zum Dashboard</Link>;\n","icon":"import Link from \"@mittwald/flow-react-components/Link\";\nimport { IconExternalLink } from \"@mittwald/flow-react-components/Icons\";\n\n<Link href=\"https://mittwald.de\">\n  mittwald.de\n  <IconExternalLink aria-label=\"external link\" />\n</Link>;\n","inline":"import Link from \"@mittwald/flow-react-components/Link\";\n\n<Link inline href=\"#\">\n  Inline link\n</Link>;\n","inlineText":"import Link from \"@mittwald/flow-react-components/Link\";\nimport Text from \"@mittwald/flow-react-components/Text\";\n\n<Text>\n  Sieh dir unser <Link href=\"#\">Onboarding</Link> an um\n  weitere Informationen zu erhalten.\n</Text>;\n"},"slugs":["02-components","navigation","link"],"filename":"02-components/navigation/link/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Navigation","description":"Bei der Navigation handelt es sich um eine Liste von Links, die optional auch in Gruppen unterteilt werden kann."},"scope":{}},"examples":{"default":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Companies\">\n  <Link href=\"https://www.apple.com\">Apple</Link>\n  <Link href=\"https://www.mittwald.de\" aria-current=\"page\">\n    mittwald\n  </Link>\n  <Link href=\"https://www.adobe.com\">Adobe</Link>\n  <Link href=\"https://www.google.com\">Google</Link>\n</Navigation>;\n","groups":"import Navigation, {\n  NavigationGroup,\n} from \"@mittwald/flow-react-components/Navigation\";\nimport Link from \"@mittwald/flow-react-components/Link\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<Navigation aria-label=\"Main navigation\">\n  <NavigationGroup>\n    <Label>Allgemein</Label>\n    <Link href=\"#\">Dashboard</Link>\n    <Link href=\"#\" aria-current=\"page\">\n      Performance\n    </Link>\n  </NavigationGroup>\n  <NavigationGroup>\n    <Label>Komponenten</Label>\n    <Link href=\"#\">Apps</Link>\n    <Link href=\"#\">Datenbanken</Link>\n    <Link href=\"#\">Domains</Link>\n  </NavigationGroup>\n</Navigation>;\n","icons":"import Navigation from \"@mittwald/flow-react-components/Navigation\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport {\n  IconCustomer,\n  IconProject,\n  IconServer,\n} from \"@mittwald/flow-react-components/Icons\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Navigation aria-label=\"Main menu\">\n  <Link href=\"#\">\n    <IconCustomer />\n    <Text>Organisationen</Text>\n  </Link>\n  <Link href=\"#\" aria-current=\"page\">\n    <IconServer />\n    <Text>Server</Text>\n  </Link>\n  <Link href=\"#\">\n    <IconProject />\n    <Text>Projekte</Text>\n  </Link>\n</Navigation>;\n"},"slugs":["02-components","navigation","navigation"],"filename":"02-components/navigation/navigation/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Tabs","description":"Tabs erlauben dem Nutzer zwischen verschiedenen Inhaltsbereichen zu wechseln."},"scope":{}},"examples":{"collapsed":"import Tabs, {\n  Tab,\n  TabTitle,\n} from \"@mittwald/flow-react-components/Tabs\";\n\n<Tabs style={{ width: \"250px\" }}>\n  <Tab>\n    <TabTitle>Allgemein</TabTitle>\n    Allgemeiner Inhalt\n  </Tab>\n  <Tab id=\"storage\">\n    <TabTitle>Speicherplatz</TabTitle>\n    Speicherplatz Inhalt\n  </Tab>\n  <Tab>\n    <TabTitle>Spamschutz</TabTitle>\n    Spamschutz Inhalt\n  </Tab>\n</Tabs>;\n","content":"$10","default":"import Tabs, {\n  Tab,\n  TabTitle,\n} from \"@mittwald/flow-react-components/Tabs\";\n\n<Tabs>\n  <Tab>\n    <TabTitle>Allgemein</TabTitle>\n    Allgemeiner Inhalt\n  </Tab>\n  <Tab id=\"storage\">\n    <TabTitle>Speicherplatz</TabTitle>\n    Speicherplatz Inhalt\n  </Tab>\n  <Tab>\n    <TabTitle>Spamschutz</TabTitle>\n    Spamschutz Inhalt\n  </Tab>\n</Tabs>;\n"},"slugs":["02-components","navigation","tabs"],"filename":"02-components/navigation/tabs/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Modal","description":"Benutze das Modal um Inhalte in einem Overlay über der eigentlichen Oberfläche anzuzeigen."},"scope":{}},"examples":{"default":"$11","offCanvas":"$12"},"slugs":["02-components","overlays","modal"],"filename":"02-components/overlays/modal/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"OffCanvas","description":"Das OffCanvas dient dazu Inhalte in einem seitlich angeordneten Overlay anzuzeigen. Es kann beispielsweise für mobile Navigation verwendet werden"},"scope":{}},"examples":{"default":"import Text from \"@mittwald/flow-react-components/Text\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport OffCanvas, {\n  OffCanvasTrigger,\n} from \"@mittwald/flow-react-components/OffCanvas\";\nimport {\n  IconCustomer,\n  IconMenu,\n  IconProject,\n  IconServer,\n} from \"@mittwald/flow-react-components/Icons\";\nimport Link from \"@mittwald/flow-react-components/Link\";\nimport Navigation from \"@mittwald/flow-react-components/Navigation\";\n\n<OffCanvasTrigger>\n  <Button>\n    <IconMenu />\n  </Button>\n  <OffCanvas>\n    <Navigation aria-label=\"Main menu\">\n      <Link>\n        <IconCustomer />\n        <Text>Customer</Text>\n      </Link>\n      <Link aria-current=\"page\">\n        <IconServer />\n        <Text>Server</Text>\n      </Link>\n      <Link>\n        <IconProject />\n        <Text>Project</Text>\n      </Link>\n    </Navigation>\n  </OffCanvas>\n</OffCanvasTrigger>;\n"},"slugs":["02-components","overlays","off-canvas"],"filename":"02-components/overlays/off-canvas/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Tooltip","description":"Ein Tooltip zeigt dem Benutzer zusätzliche Informationen beim hovern an."},"scope":{}},"examples":{"default":"import Tooltip, {\n  TooltipTrigger,\n} from \"@mittwald/flow-react-components/Tooltip\";\nimport Button from \"@mittwald/flow-react-components/Button\";\nimport { IconCopy } from \"@mittwald/flow-react-components/Icons\";\n\n<TooltipTrigger>\n  <Button aria-label=\"Speichern\">\n    <IconCopy />\n  </Button>\n  <Tooltip>Speichern</Tooltip>\n</TooltipTrigger>;\n"},"slugs":["02-components","overlays","tooltip"],"filename":"02-components/overlays/tooltip/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"InlineAlert","description":"Der InlineAlert zeigt relevante Hinweise innerhalb des Contents an."},"scope":{}},"examples":{"default":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\n\n<InlineAlert>\n  <Heading>E-Mail-Adresse wurde archiviert</Heading>\n</InlineAlert>;\n","status":"$13","with-content":"import InlineAlert from \"@mittwald/flow-react-components/InlineAlert\";\nimport Heading from \"@mittwald/flow-react-components/Heading\";\nimport Content from \"@mittwald/flow-react-components/Content\";\nimport Button from \"@mittwald/flow-react-components/Button\";\n\n<InlineAlert>\n  <Heading>E-Mail-Adresse wurde archiviert</Heading>\n  <Content>\n    Da deine Domain gelöscht wurde, wurde diese\n    E-Mail-Adresse archiviert. Um E-Mails empfangen und\n    senden zu können musst du die Adresse wieder umbenennen.\n    <Button>E-Mail-Adresse anpassen</Button>\n  </Content>\n</InlineAlert>;\n"},"slugs":["02-components","status","inline-alert"],"filename":"02-components/status/inline-alert/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"LoadingSpinner","description":"Der Loading Spinner zeigt an, dass sich ein Element oder eine Seite im Ladezustand befindet."},"scope":{}},"examples":{"default":"import LoadingSpinner from \"@mittwald/flow-react-components/LoadingSpinner\";\n\n<LoadingSpinner />;\n"},"slugs":["02-components","status","loading-spinner"],"filename":"02-components/status/loading-spinner/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"ProgressBar","description":"Die Progressbar zeigt an wie weit ein Vorgang fortgeschritten ist."},"scope":{}},"examples":{"default":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ProgressBar value={50}>\n  <Label>Speicher</Label>\n</ProgressBar>;\n","maxValue":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ProgressBar\n  showMaxValue\n  value={500}\n  maxValue={1000}\n  minValue={0}\n  formatOptions={{ style: \"unit\", unit: \"gigabyte\" }}\n>\n  <Label>Speicher</Label>\n</ProgressBar>;\n","small":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ProgressBar size=\"s\" value={50}>\n  <Label>Speicher</Label>\n</ProgressBar>;\n","status":"import ProgressBar from \"@mittwald/flow-react-components/ProgressBar\";\n\n<Row>\n  <ProgressBar value={50} status=\"info\">\n    Info\n  </ProgressBar>\n  <ProgressBar value={50} status=\"success\">\n    Success\n  </ProgressBar>\n  <ProgressBar value={70} status=\"warning\">\n    Warning\n  </ProgressBar>\n  <ProgressBar value={90} status=\"danger\">\n    Danger\n  </ProgressBar>\n</Row>;\n"},"slugs":["02-components","status","progress-bar"],"filename":"02-components/status/progress-bar/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"StatusBadge","description":"Der StatusBadge zeigt Informationen zum Zustand eines Elements."},"scope":{}},"examples":{"default":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<StatusBadge>Archiviert</StatusBadge>;\n","status":"import StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\n\n<Row>\n  <StatusBadge status=\"info\">Archiviert</StatusBadge>\n  <StatusBadge status=\"success\">\n    Update erfolgreich\n  </StatusBadge>\n  <StatusBadge status=\"warning\">\n    Speicher fast voll\n  </StatusBadge>\n  <StatusBadge status=\"danger\">SSL fehlt</StatusBadge>\n</Row>;\n"},"slugs":["02-components","status","status-badge"],"filename":"02-components/status/status-badge/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"StatusIcon","description":"Das StatusIcon dient zur Veranschaulichung eines Status, beispielsweise in einem StatusBadge oder InlineAlert"},"scope":{}},"examples":{"default":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<StatusIcon />;\n","status":"import StatusIcon from \"@mittwald/flow-react-components/StatusIcon\";\n\n<Row>\n  <StatusIcon status=\"info\" />\n  <StatusIcon status=\"success\" />\n  <StatusIcon status=\"warning\" />\n  <StatusIcon status=\"danger\" />\n</Row>;\n"},"slugs":["02-components","status","status-icon"],"filename":"02-components/status/status-icon/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    example: \"main\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"ColumnLayout","description":"Mit dem ColumnLayout kann Inhalt in Spalten unterteilt werden."},"scope":{}},"examples":{"custom-values":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout m={[2, 1]}>\n  <TextField>\n    <Label>Straße</Label>\n  </TextField>\n  <TextField>\n    <Label>Hausnummer</Label>\n  </TextField>\n</ColumnLayout>;\n","default":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout>\n  <TextField>\n    <Label>Vorname</Label>\n  </TextField>\n  <TextField>\n    <Label>Nachname</Label>\n  </TextField>\n  <TextField>\n    <Label>Straße</Label>\n  </TextField>\n  <TextField>\n    <Label>Hausnummer</Label>\n  </TextField>\n</ColumnLayout>;\n","main":"import ColumnLayout from \"@mittwald/flow-react-components/ColumnLayout\";\nimport TextField from \"@mittwald/flow-react-components/TextField\";\nimport Label from \"@mittwald/flow-react-components/Label\";\n\n<ColumnLayout s={[1, 1]}>\n  <TextField>\n    <Label>Vorname</Label>\n  </TextField>\n  <TextField>\n    <Label>Nachname</Label>\n  </TextField>\n</ColumnLayout>;\n"},"slugs":["02-components","structure","column-layout"],"filename":"02-components/structure/column-layout/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"LayoutCard","description":"Eine LayoutCard ist ein Struktur-Element, das mit beliebigem Inhalt gefüllt werden kann"},"scope":{}},"examples":{"default":"import LayoutCard from \"@mittwald/flow-react-components/LayoutCard\";\n\n<LayoutCard>Inhalt der Layout Card</LayoutCard>;\n"},"slugs":["02-components","structure","layout-card"],"filename":"02-components/structure/layout-card/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true,\n    example: \"main\",\n    zoom: 0.6\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"List","description":"Die List-Component stellt eine Liste von Elementen mit verschiedenen Informationen dar."},"scope":{}},"examples":{"default":"$14","main":"$15","withLink":"$16"},"slugs":["02-components","structure","list"],"filename":"02-components/structure/list/index.mdx"},{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Section","description":"Die Section dient der Unterteilung von Inhalten in verschiedene Abschnitte"},"scope":{}},"examples":{"default":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport Link from \"@mittwald/flow-react-components/Link\";\n\n<Section>\n  <Heading>Newsletter</Heading>\n  <Text>\n    Kommende Releases, neue Features und Tipps rund um dein\n    Hosting – wir bringen dir das Wichtigste in dein\n    Postfach. Abonniere unseren Newsletter und bleib auf dem\n    Laufenden.\n  </Text>\n  <Link href=\"#\">Newsletter abonnieren</Link>\n</Section>;\n","multiple":"$17","status-badge":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport StatusBadge from \"@mittwald/flow-react-components/StatusBadge\";\nimport Header from \"@mittwald/flow-react-components/Header\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <StatusBadge>Subscribed</StatusBadge>\n  </Header>\n  <Text>\n    Kommende Releases, neue Features und Tipps rund um dein\n    Hosting – wir bringen dir das Wichtigste in dein\n    Postfach. Abonniere unseren Newsletter und bleib auf dem\n    Laufenden.\n  </Text>\n</Section>;\n","switch":"import Heading from \"@mittwald/flow-react-components/Heading\";\nimport Header from \"@mittwald/flow-react-components/Header\";\nimport Text from \"@mittwald/flow-react-components/Text\";\nimport Section from \"@mittwald/flow-react-components/Section\";\nimport Switch from \"@mittwald/flow-react-components/Switch\";\n\n<Section>\n  <Header>\n    <Heading>Newsletter</Heading>\n    <Switch>Abonnement</Switch>\n  </Header>\n  <Text>\n    Kommende Releases, neue Features und Tipps rund um dein\n    Hosting – wir bringen dir das Wichtigste in dein\n    Postfach. Abonniere unseren Newsletter und bleib auf dem\n    Laufenden.\n  </Text>\n</Section>;\n"},"slugs":["02-components","structure","section"],"filename":"02-components/structure/section/index.mdx"}]}],["$","$L18",null,{"className":"layout_mobileNavigation__1XY9K","children":["$","$L19",null,{"children":[["$","$L1a",null,{"children":["$","$L1b",null,{}]}],["$","$L1c",null,{"className":"layout_mobileNavigationOffCanvas__coBZM","children":["$","$L1d",null,{"children":[["$","$Lc",null,{"docs":[{"mdxSource":"$1e","examples":"$22","slugs":"$23","filename":"01-getting-started/installation/index.mdx"},{"mdxSource":"$24","examples":"$28","slugs":"$29","filename":"01-getting-started/stylesheet/index.mdx"},{"mdxSource":"$2a","examples":"$2d","slugs":"$2e","filename":"02-components/actions/action/index.mdx"},{"mdxSource":"$2f","examples":"$32","slugs":"$33","filename":"02-components/actions/button-group/index.mdx"},{"mdxSource":"$34","examples":"$37","slugs":"$38","filename":"02-components/actions/button/index.mdx"},{"mdxSource":"$39","examples":"$3c","slugs":"$3d","filename":"02-components/actions/context-menu/index.mdx"},{"mdxSource":"$3e","examples":"$41","slugs":"$42","filename":"02-components/actions/copy-button/index.mdx"},{"mdxSource":"$43","examples":"$46","slugs":"$47","filename":"02-components/content/avatar/index.mdx"},{"mdxSource":"$48","examples":"$4b","slugs":"$4c","filename":"02-components/content/heading/index.mdx"},{"mdxSource":"$4d","examples":"$50","slugs":"$51","filename":"02-components/content/icon/index.mdx"},{"mdxSource":"$52","examples":"$55","slugs":"$56","filename":"02-components/content/illustrated-message/index.mdx"},{"mdxSource":"$57","examples":"$5a","slugs":"$5b","filename":"02-components/content/image/index.mdx"},{"mdxSource":"$5c","examples":"$5f","slugs":"$60","filename":"02-components/content/inline-code/index.mdx"},{"mdxSource":"$61","examples":"$64","slugs":"$65","filename":"02-components/content/label/index.mdx"},{"mdxSource":"$66","examples":"$69","slugs":"$6a","filename":"02-components/content/labeled-value/index.mdx"},{"mdxSource":"$6b","examples":"$6e","slugs":"$6f","filename":"02-components/content/text/index.mdx"},{"mdxSource":"$70","examples":"$73","slugs":"$74","filename":"02-components/form-controls/checkbox-button/index.mdx"},{"mdxSource":"$75","examples":"$78","slugs":"$79","filename":"02-components/form-controls/checkbox-group/index.mdx"},{"mdxSource":"$7a","examples":"$7d","slugs":"$7e","filename":"02-components/form-controls/checkbox/index.mdx"},{"mdxSource":"$7f","examples":"$82","slugs":"$83","filename":"02-components/form-controls/number-field/index.mdx"},{"mdxSource":"$84","examples":"$87","slugs":"$88","filename":"02-components/form-controls/radio-group/index.mdx"},{"mdxSource":"$89","examples":"$8c","slugs":"$8d","filename":"02-components/form-controls/select/index.mdx"},{"mdxSource":"$8e","examples":"$91","slugs":"$92","filename":"02-components/form-controls/switch/index.mdx"},{"mdxSource":"$93","examples":"$96","slugs":"$97","filename":"02-components/form-controls/text-area/index.mdx"},{"mdxSource":"$98","examples":"$9b","slugs":"$9c","filename":"02-components/form-controls/text-field/index.mdx"},{"mdxSource":"$9d","examples":"$a0","slugs":"$a1","filename":"02-components/navigation/breadcrumb/index.mdx"},{"mdxSource":"$a2","examples":"$a5","slugs":"$a7","filename":"02-components/navigation/header-navigation/index.mdx"},{"mdxSource":"$a8","examples":"$ab","slugs":"$ac","filename":"02-components/navigation/link/index.mdx"},{"mdxSource":"$ad","examples":"$b0","slugs":"$b1","filename":"02-components/navigation/navigation/index.mdx"},{"mdxSource":"$b2","examples":"$b5","slugs":"$b7","filename":"02-components/navigation/tabs/index.mdx"},{"mdxSource":"$b8","examples":"$bb","slugs":"$be","filename":"02-components/overlays/modal/index.mdx"},{"mdxSource":"$bf","examples":"$c2","slugs":"$c3","filename":"02-components/overlays/off-canvas/index.mdx"},{"mdxSource":"$c4","examples":"$c7","slugs":"$c8","filename":"02-components/overlays/tooltip/index.mdx"},{"mdxSource":"$c9","examples":"$cc","slugs":"$ce","filename":"02-components/status/inline-alert/index.mdx"},{"mdxSource":"$cf","examples":"$d2","slugs":"$d3","filename":"02-components/status/loading-spinner/index.mdx"},{"mdxSource":"$d4","examples":"$d7","slugs":"$d8","filename":"02-components/status/progress-bar/index.mdx"},{"mdxSource":"$d9","examples":"$dc","slugs":"$dd","filename":"02-components/status/status-badge/index.mdx"},{"mdxSource":"$de","examples":"$e1","slugs":"$e2","filename":"02-components/status/status-icon/index.mdx"},{"mdxSource":"$e3","examples":"$e6","slugs":"$e7","filename":"02-components/structure/column-layout/index.mdx"},{"mdxSource":"$e8","examples":"$eb","slugs":"$ec","filename":"02-components/structure/layout-card/index.mdx"},{"mdxSource":"$ed","examples":"$f0","slugs":"$f4","filename":"02-components/structure/list/index.mdx"},{"mdxSource":"$f5","examples":"$f8","slugs":"$fa","filename":"02-components/structure/section/index.mdx"}]}],["$","$Lfb",null,{"docs":"$fc"}]]}]}]]}]}]]}],["$","div",null,{"className":"layout_center__e1uqg","children":[["$","$L127",null,{"className":"layout_mainNavigation__zVTd_","children":["$","$Lfb",null,{"docs":[{"mdxSource":"$1e","examples":"$22","slugs":"$23","filename":"01-getting-started/installation/index.mdx"},{"mdxSource":"$24","examples":"$28","slugs":"$29","filename":"01-getting-started/stylesheet/index.mdx"},{"mdxSource":"$2a","examples":"$2d","slugs":"$2e","filename":"02-components/actions/action/index.mdx"},{"mdxSource":"$2f","examples":"$32","slugs":"$33","filename":"02-components/actions/button-group/index.mdx"},{"mdxSource":"$34","examples":"$37","slugs":"$38","filename":"02-components/actions/button/index.mdx"},{"mdxSource":"$39","examples":"$3c","slugs":"$3d","filename":"02-components/actions/context-menu/index.mdx"},{"mdxSource":"$3e","examples":"$41","slugs":"$42","filename":"02-components/actions/copy-button/index.mdx"},{"mdxSource":"$43","examples":"$46","slugs":"$47","filename":"02-components/content/avatar/index.mdx"},{"mdxSource":"$48","examples":"$4b","slugs":"$4c","filename":"02-components/content/heading/index.mdx"},{"mdxSource":"$4d","examples":"$50","slugs":"$51","filename":"02-components/content/icon/index.mdx"},{"mdxSource":"$52","examples":"$55","slugs":"$56","filename":"02-components/content/illustrated-message/index.mdx"},{"mdxSource":"$57","examples":"$5a","slugs":"$5b","filename":"02-components/content/image/index.mdx"},{"mdxSource":"$5c","examples":"$5f","slugs":"$60","filename":"02-components/content/inline-code/index.mdx"},{"mdxSource":"$61","examples":"$64","slugs":"$65","filename":"02-components/content/label/index.mdx"},{"mdxSource":"$66","examples":"$69","slugs":"$6a","filename":"02-components/content/labeled-value/index.mdx"},{"mdxSource":"$6b","examples":"$6e","slugs":"$6f","filename":"02-components/content/text/index.mdx"},{"mdxSource":"$70","examples":"$73","slugs":"$74","filename":"02-components/form-controls/checkbox-button/index.mdx"},{"mdxSource":"$75","examples":"$78","slugs":"$79","filename":"02-components/form-controls/checkbox-group/index.mdx"},{"mdxSource":"$7a","examples":"$7d","slugs":"$7e","filename":"02-components/form-controls/checkbox/index.mdx"},{"mdxSource":"$7f","examples":"$82","slugs":"$83","filename":"02-components/form-controls/number-field/index.mdx"},{"mdxSource":"$84","examples":"$87","slugs":"$88","filename":"02-components/form-controls/radio-group/index.mdx"},{"mdxSource":"$89","examples":"$8c","slugs":"$8d","filename":"02-components/form-controls/select/index.mdx"},{"mdxSource":"$8e","examples":"$91","slugs":"$92","filename":"02-components/form-controls/switch/index.mdx"},{"mdxSource":"$93","examples":"$96","slugs":"$97","filename":"02-components/form-controls/text-area/index.mdx"},{"mdxSource":"$98","examples":"$9b","slugs":"$9c","filename":"02-components/form-controls/text-field/index.mdx"},{"mdxSource":"$9d","examples":"$a0","slugs":"$a1","filename":"02-components/navigation/breadcrumb/index.mdx"},{"mdxSource":"$a2","examples":"$a5","slugs":"$a7","filename":"02-components/navigation/header-navigation/index.mdx"},{"mdxSource":"$a8","examples":"$ab","slugs":"$ac","filename":"02-components/navigation/link/index.mdx"},{"mdxSource":"$ad","examples":"$b0","slugs":"$b1","filename":"02-components/navigation/navigation/index.mdx"},{"mdxSource":"$b2","examples":"$b5","slugs":"$b7","filename":"02-components/navigation/tabs/index.mdx"},{"mdxSource":"$b8","examples":"$bb","slugs":"$be","filename":"02-components/overlays/modal/index.mdx"},{"mdxSource":"$bf","examples":"$c2","slugs":"$c3","filename":"02-components/overlays/off-canvas/index.mdx"},{"mdxSource":"$c4","examples":"$c7","slugs":"$c8","filename":"02-components/overlays/tooltip/index.mdx"},{"mdxSource":"$c9","examples":"$cc","slugs":"$ce","filename":"02-components/status/inline-alert/index.mdx"},{"mdxSource":"$cf","examples":"$d2","slugs":"$d3","filename":"02-components/status/loading-spinner/index.mdx"},{"mdxSource":"$d4","examples":"$d7","slugs":"$d8","filename":"02-components/status/progress-bar/index.mdx"},{"mdxSource":"$d9","examples":"$dc","slugs":"$dd","filename":"02-components/status/status-badge/index.mdx"},{"mdxSource":"$de","examples":"$e1","slugs":"$e2","filename":"02-components/status/status-icon/index.mdx"},{"mdxSource":"$e3","examples":"$e6","slugs":"$e7","filename":"02-components/structure/column-layout/index.mdx"},{"mdxSource":"$e8","examples":"$eb","slugs":"$ec","filename":"02-components/structure/layout-card/index.mdx"},{"mdxSource":"$ed","examples":"$f0","slugs":"$f4","filename":"02-components/structure/list/index.mdx"},{"mdxSource":"$f5","examples":"$f8","slugs":"$fa","filename":"02-components/structure/section/index.mdx"}]}]}],["$","main",null,{"className":"layout_main__30FUz","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]]}]}]}]
130:T423,/*@jsxRuntime automatic @jsxImportSource react*/
const {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];
const {useMDXComponents: _provideComponents} = arguments[0];
function _createMdxContent(props) {
  const _components = Object.assign({
    h2: "h2"
  }, _provideComponents(), props.components), {LiveCodeEditor} = _components;
  if (!LiveCodeEditor) _missingMdxReference("LiveCodeEditor", true);
  return _jsxs(_Fragment, {
    children: [_jsx(_components.h2, {
      children: "Beispiel"
    }), "\n", _jsx(LiveCodeEditor, {})]
  });
}
function MDXContent(props = {}) {
  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);
  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {
    children: _jsx(_createMdxContent, props)
  })) : _createMdxContent(props);
}
return {
  default: MDXContent
};
function _missingMdxReference(id, component) {
  throw new Error("Expected " + (component ? "component" : "object") + " `" + id + "` to be defined: you likely forgot to import, pass, or provide it.");
}
2:[["$","$L128",null,{"children":["$","$L129",null,{"m":[1,1],"children":[["$","$L1d",null,{"children":[["$","$La",null,{"level":1,"children":"Checkbox"}],"Die Checkbox dient dazu einen Wert zu aus- oder abzuwählen.",["$","$L12a",null,{"href":"https://github.com/mittwald/flow/tree/main/packages/components/src/components/Checkbox","children":["GitHub",["$","$L12b",null,{}]]}]]}],["$","$L12c",null,{"mdxFile":{"mdxSource":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const {LiveCodeEditor} = Object.assign({}, _provideComponents(), props.components);\n  if (!LiveCodeEditor) _missingMdxReference(\"LiveCodeEditor\", true);\n  return _jsx(LiveCodeEditor, {\n    editorDisabled: true\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{"component":"Checkbox","description":"Die Checkbox dient dazu einen Wert zu aus- oder abzuwählen."},"scope":{}},"examples":{"default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\n\n<Checkbox>\n  Ich stimme den AGBs zu und bestätige, dass ich die\n  Datenschutzhinweise zur Kenntnis genommen habe.\n</Checkbox>;\n"},"slugs":["02-components","form-controls","checkbox"],"filename":"02-components/form-controls/checkbox/index.mdx"}}]]}]}],["$","$L128",null,{"children":["$","$L12d",null,{"children":[["$","$L12e",null,{"children":[["$","$L12f",null,{"children":"Overview"}],["$","$L1d",null,{"children":["$","$L12c",null,{"mdxFile":{"mdxSource":{"compiledSource":"$130","frontmatter":{},"scope":{}},"examples":{"default":"import Checkbox from \"@mittwald/flow-react-components/Checkbox\";\n\n<Checkbox>\n  Ich stimme den AGBs zu und bestätige, dass ich die\n  Datenschutzhinweise zur Kenntnis genommen habe.\n</Checkbox>;\n"},"slugs":["02-components","form-controls","checkbox"],"filename":"02-components/form-controls/checkbox/overview.mdx"}}]}]]}],"$undefined","$undefined"]}]}]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Checkbox"}],["$","link","3",{"rel":"icon","href":"/flow-previews/docs/299-offcanvas-component/favicon.ico","type":"image/x-icon","sizes":"48x48"}]]
1:null
