import{S as a,O as l}from"./Option-BjOdB3fJ.js";import{R as t}from"./index-BwDkhjyp.js";import{L as n}from"./Label-Doa_m8lQ.js";import s from"./Default.stories-CzemmB4b.js";import"./PropsContextProvider-DwTel3aB.js";import"./index-DVe9vSxq.js";import"./clsx-B-dksMZM.js";import"./FormField.module-CWdTNYuH.js";import"./IconApp-D5gedeYa.js";import"./_commonjsHelpers-BosuxZz1.js";import"./flowComponent-B5uZ4s1Y.js";import"./index-B8XB3FuZ.js";import"./IconWarning-DT8hSaQm.js";import"./Form-DYn-vm94.js";import"./useFocusable-BcMbiAJh.js";import"./utils-CcQIssJO.js";import"./useLabel-BaXqGmeE.js";import"./useLabels-kg7v6Afk.js";import"./Text-22vGTmcn.js";import"./PopoverTrigger-auuHu7tU.js";import"./OverlayTrigger-B-iEVEid.js";import"./RSPContexts-Bc9pl35m.js";import"./OverlayArrow-BERv84ls.js";import"./number-nHrFdSb-.js";import"./useLocalizedStringFormatter-CbSA8sNn.js";import"./useControlledState-C0C-dzuH.js";import"./filterDOMProps-CeZl_uWj.js";import"./usePress-CqD9eiQF.js";import"./FocusScope-BuxQ1peU.js";import"./getScrollParent-CcmJp979.js";import"./VisuallyHidden-DA6R-bu4.js";import"./context-DcNveDbd.js";import"./useSelector-Be3r6XND.js";import"./ListBox-BW12HJws.js";import"./Collection-wxk3VkXl.js";import"./useDragAndDrop-1zf7j-vC.js";import"./Header-tof3fAA-.js";import"./Separator-mwJ01TZq.js";import"./useListState-D1B_u9so.js";import"./SelectionManager-7Pq-D15P.js";import"./useEvent-m5sATXdH.js";import"./useMenuTrigger-CUKl09yl.js";import"./Button-CJW8IwaF.js";import"./Label-C622KGdQ.js";import"./useSingleSelectListState-CE1HJiGj.js";import"./useFormReset-CfqvoD0r.js";import"./FieldDescription-Wv4h-N9O.js";import"./Text-xMX89lYJ.js";import"./EmulatedBoldText-B1t6hs5E.js";import"./Wrap-DQq6jo70.js";const lr={...s,title:"Form Controls/Select/Edge Cases"},r={render:e=>t.createElement(a,{...e},t.createElement(n,null,"Label"),Array(20).fill("").map((c,o)=>t.createElement(l,{key:o},"Option ",o+1)))};var m,p,i;r.parameters={...r.parameters,docs:{...(m=r.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: props => <Select {...props}>
      <Label>Label</Label>
      {Array(20).fill("").map((value, index) => <Option key={index}>Option {index + 1}</Option>)}
    </Select>
}`,...(i=(p=r.parameters)==null?void 0:p.docs)==null?void 0:i.source}}};const nr=["Default"];export{r as Default,nr as __namedExportsOrder,lr as default};
