import{S as a,O as l}from"./Option-DQoHXsGm.js";import{R as t}from"./index-Cs7sjTYM.js";import{L as n}from"./Label-C-aczTYm.js";import s from"./Default.stories-BYJ76PVl.js";import"./PropsContextProvider-58HgA8rU.js";import"./index-C8LjR2Bd.js";import"./clsx-B-dksMZM.js";import"./FormField.module-DHQpNdM-.js";import"./IconApp-COwJ0ZRR.js";import"./_commonjsHelpers-BosuxZz1.js";import"./flowComponent-BqZrLudx.js";import"./index-BMdlDBjA.js";import"./IconWarning-CBdDJmJC.js";import"./Form-yihfkm38.js";import"./useFocusable-OJvPCLGe.js";import"./utils-Ca6JWPXc.js";import"./useLabel-D8UVq-XF.js";import"./useLabels-DMhdkBu1.js";import"./Text-DkFxhH4d.js";import"./PopoverTrigger-CPc_PWRs.js";import"./OverlayTrigger-05SHITif.js";import"./RSPContexts-BseA8goh.js";import"./OverlayArrow-BxlO7pa5.js";import"./number-nHrFdSb-.js";import"./useLocalizedStringFormatter-QuGsJjbc.js";import"./useControlledState-B7K2eYzO.js";import"./filterDOMProps-CeZl_uWj.js";import"./usePress-DiyYDbeg.js";import"./FocusScope-DZAGVQVL.js";import"./getScrollParent-CcmJp979.js";import"./VisuallyHidden-BF1ug10U.js";import"./context-D6OB3BUw.js";import"./useSelector-D7b7Gg7N.js";import"./ListBox-Dv-USSDL.js";import"./Collection-BEvGW34q.js";import"./useDragAndDrop-v_ykJosS.js";import"./Header-Dl17m4NE.js";import"./Separator-BcuXU_Ka.js";import"./useListState-BCXMCUR2.js";import"./SelectionManager-CTPoXmGv.js";import"./useEvent-Be9f7BQw.js";import"./useMenuTrigger-Cyu8UOWg.js";import"./Button-DB69cHYY.js";import"./Label-D27JuWFB.js";import"./useSingleSelectListState-dzA5TIZd.js";import"./useFormReset-DlrFI1sj.js";import"./FieldDescription-CGzCV37F.js";import"./Text-DrKyKMJq.js";import"./EmulatedBoldText-Dmze-Iwg.js";import"./Wrap-DQq6jo70.js";const lr={...s,title:"Form Controls/Select/Edge Cases"},r={render:e=>t.createElement(a,{...e},t.createElement(n,null,"Label"),Array(20).fill("").map((c,o)=>t.createElement(l,{key:o},"Option ",o+1)))};var m,p,i;r.parameters={...r.parameters,docs:{...(m=r.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: props => <Select {...props}>
      <Label>Label</Label>
      {Array(20).fill("").map((value, index) => <Option key={index}>Option {index + 1}</Option>)}
    </Select>
}`,...(i=(p=r.parameters)==null?void 0:p.docs)==null?void 0:i.source}}};const nr=["Default"];export{r as Default,nr as __namedExportsOrder,lr as default};
