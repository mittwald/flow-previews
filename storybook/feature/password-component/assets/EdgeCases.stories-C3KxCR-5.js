import{S as a,O as l}from"./Option-DoZytEiw.js";import{R as t}from"./index-BwDkhjyp.js";import{L as n}from"./Label-19OEyuih.js";import s from"./Default.stories-BktdT4BS.js";import"./PropsContextProvider-DwTel3aB.js";import"./index-DVe9vSxq.js";import"./clsx-B-dksMZM.js";import"./FormField.module-DR_kdvFm.js";import"./IconApp-DBpcl0fC.js";import"./_commonjsHelpers-BosuxZz1.js";import"./flowComponent-arII6e68.js";import"./index-B8XB3FuZ.js";import"./IconWarning-BftDN5EW.js";import"./Form-CL2fRmNo.js";import"./useFocusable-CtcwBWSa.js";import"./utils-B-mS0hjG.js";import"./useLabel-BaXqGmeE.js";import"./useLabels-kg7v6Afk.js";import"./Text-BuIyiEeX.js";import"./PopoverTrigger-DJ-VldBS.js";import"./OverlayTrigger-Kx2AxGL_.js";import"./RSPContexts-Bc9pl35m.js";import"./OverlayArrow-CQIUSZWS.js";import"./number-nHrFdSb-.js";import"./useLocalizedStringFormatter-CbSA8sNn.js";import"./useControlledState-C0C-dzuH.js";import"./filterDOMProps-CeZl_uWj.js";import"./usePress-C1ab-RBW.js";import"./FocusScope-Bimv_uf0.js";import"./getScrollParent-CcmJp979.js";import"./VisuallyHidden-ZyvE9T3T.js";import"./context-CzxCD9gm.js";import"./useSelector-5Wd8CZ0x.js";import"./Button-C6BAnfYv.js";import"./Collection-Dx1XK91-.js";import"./Label-BdwIGkgY.js";import"./useSingleSelectListState-CfiXLjT5.js";import"./SelectionManager-CkLw65uU.js";import"./useEvent-m5sATXdH.js";import"./useMenuTrigger-C1rWppsa.js";import"./useFormReset-CfqvoD0r.js";import"./useDragAndDrop-1zf7j-vC.js";import"./Header-TlY9oddI.js";import"./Separator-CGt9BNMq.js";import"./FieldDescription-C6NwozVR.js";import"./Text-9sk1yuEP.js";import"./EmulatedBoldText-B1t6hs5E.js";import"./Wrap-DQq6jo70.js";const er={...s,title:"Form Controls/Select/Edge Cases"},r={render:e=>t.createElement(a,{...e},t.createElement(n,null,"Label"),Array(20).fill("").map((c,o)=>t.createElement(l,{key:o},"Option ",o+1)))};var m,p,i;r.parameters={...r.parameters,docs:{...(m=r.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: props => <Select {...props}>
      <Label>Label</Label>
      {Array(20).fill("").map((value, index) => <Option key={index}>Option {index + 1}</Option>)}
    </Select>
}`,...(i=(p=r.parameters)==null?void 0:p.docs)==null?void 0:i.source}}};const ar=["Default"];export{r as Default,ar as __namedExportsOrder,er as default};
