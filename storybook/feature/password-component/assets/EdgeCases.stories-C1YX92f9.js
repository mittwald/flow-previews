import{S as a,O as l}from"./Option-CkiJBjf2.js";import{R as t}from"./index-uCp2LrAq.js";import{L as n}from"./Label-BTedSu1I.js";import s from"./Default.stories-BhEf4Aq0.js";import"./PropsContextProvider-RdMO5ekw.js";import"./index-CFQDndEx.js";import"./clsx-B-dksMZM.js";import"./FormField.module-BYarEUJD.js";import"./IconApp-DWya8WHB.js";import"./_commonjsHelpers-BosuxZz1.js";import"./flowComponent-Cll4pGCY.js";import"./index-BOkhicXD.js";import"./IconWarning-CVIujYNc.js";import"./Form-pLdcVy8a.js";import"./useFocusable-B1CfUGG-.js";import"./utils-DZgOXw50.js";import"./useLabel-D9TuMkUI.js";import"./useLabels-POLqFEYE.js";import"./Text-3FUNhTNc.js";import"./PopoverTrigger-C23yS8da.js";import"./OverlayTrigger-CInB0dMO.js";import"./RSPContexts-CJnKmcd7.js";import"./OverlayArrow-B_2Pd_cl.js";import"./number-nHrFdSb-.js";import"./useLocalizedStringFormatter-Bpx1Gtyq.js";import"./useControlledState-B8AA3oOY.js";import"./filterDOMProps-CeZl_uWj.js";import"./usePress-Bc78XfGJ.js";import"./FocusScope-CBGue2Od.js";import"./getScrollParent-CcmJp979.js";import"./VisuallyHidden-CVANJuSe.js";import"./context-CSQJgabl.js";import"./useSelector-DpPpxyR7.js";import"./Button-DvIckO9Z.js";import"./Collection-BZQFS83W.js";import"./Label-BzjXWGX7.js";import"./useSingleSelectListState-DasC_xvB.js";import"./SelectionManager-CGAryKFY.js";import"./useEvent-BUAZZNDw.js";import"./useMenuTrigger-sTn7Pn93.js";import"./useFormReset-Bt7ImmB-.js";import"./useDragAndDrop-Ddpx_AkE.js";import"./Header-CL3U4zra.js";import"./Separator-DG_EV7vp.js";import"./FieldDescription-DwIkflUx.js";import"./Text-Dgrf8S-7.js";import"./EmulatedBoldText-DzNCZpDp.js";import"./Wrap-DQq6jo70.js";const er={...s,title:"Form Controls/Select/Edge Cases"},r={render:e=>t.createElement(a,{...e},t.createElement(n,null,"Label"),Array(20).fill("").map((c,o)=>t.createElement(l,{key:o},"Option ",o+1)))};var m,p,i;r.parameters={...r.parameters,docs:{...(m=r.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: props => <Select {...props}>
      <Label>Label</Label>
      {Array(20).fill("").map((value, index) => <Option key={index}>Option {index + 1}</Option>)}
    </Select>
}`,...(i=(p=r.parameters)==null?void 0:p.docs)==null?void 0:i.source}}};const ar=["Default"];export{r as Default,ar as __namedExportsOrder,er as default};
