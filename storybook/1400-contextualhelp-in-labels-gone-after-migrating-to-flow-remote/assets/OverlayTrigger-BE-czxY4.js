import{O as d,u,o as C}from"./context-ChLe--gf.js";import{r as f}from"./index-F2Fta7eo.js";import{j as t}from"./jsx-runtime-D_zvdyIk.js";import{b as g,e as O}from"./Dialog-BBdTn5Uc.js";import{P as h}from"./PropsContextProvider-4j-6Yfh0.js";const q=(e,s={})=>{const{reuseControllerFromContext:l=!0,isDefaultOpen:a,onOpen:r,onClose:o}=s,c=d.useNew({isDefaultOpen:a,onOpen:r,onClose:o}),n=u()[e],i=l&&n?n:c;return f.useEffect(()=>{const p=[];return r&&p.push(i.addOnOpen(r)),o&&p.push(i.addOnClose(o)),()=>{p.forEach(y=>y())}},[r,o]),i},v=e=>t.jsx(g,{...e});v.__docgenInfo={description:"@flr-generate all",methods:[],displayName:"DialogTrigger"};const x=e=>t.jsx(O,{...e});x.__docgenInfo={description:"@flr-generate all",methods:[],displayName:"MenuTrigger"};const m=e=>{const{type:s,controller:l,children:a}=e,r=u();return t.jsx(C.Provider,{value:{...r,[s]:l},children:a})};m.__docgenInfo={description:"",methods:[],displayName:"OverlayContextProvider",props:{type:{required:!0,tsType:{name:"FlowComponentName"},description:""},controller:{required:!0,tsType:{name:"OverlayController"},description:""}},composes:["PropsWithChildren"]};const T=e=>{const{overlayType:s,isDefaultOpen:l=!1,component:a,children:r,controller:o}=e,c=d.useNew({isDefaultOpen:l}),n=o??c,i=n.useIsOpen(),p={Button:{onPress:n.open}};return t.jsx(m,{type:s,controller:n,children:t.jsx(h,{props:p,mergeInParentContext:!0,children:t.jsx(a,{isOpen:i,children:r})})})};T.__docgenInfo={description:"",methods:[],displayName:"OverlayTrigger",props:{isDefaultOpen:{required:!1,tsType:{name:"boolean"},description:"Whether the overlay should be open initially."},controller:{required:!1,tsType:{name:"OverlayController"},description:"A controller to control the state of the overlay."},overlayType:{required:!0,tsType:{name:"FlowComponentName"},description:""},component:{required:!0,tsType:{name:"ComponentType",elements:[{name:"signature",type:"object",raw:`{
  isOpen?: boolean;
  children: ReactNode;
}`,signature:{properties:[{key:"isOpen",value:{name:"boolean",required:!1}},{key:"children",value:{name:"ReactNode",required:!0}}]}}],raw:`ComponentType<{
  isOpen?: boolean;
  children: ReactNode;
}>`},description:""}},composes:["FlowComponentProps","PropsWithChildren"]};export{v as D,x as M,T as O,m as a,q as u};
