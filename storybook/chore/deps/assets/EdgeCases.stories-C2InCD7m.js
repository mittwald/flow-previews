import{j as t}from"./iframe-DdrpCK7O.js";import{L as p}from"./LabeledValue-Ddt5BRdV.js";import a from"./Default.stories-CNMcynoZ.js";import{d as o}from"./dummyText-CX_I_Wpl.js";import{L as i}from"./Label-icuqrMlJ.js";import{C as n}from"./Content-DNXKTnJE.js";import{C as s}from"./CopyButton-B2GS83iC.js";import"./clsx-B-dksMZM.js";import"./PropsContextProvider-B-M9Ok3D.js";import"./mergeRefs-Bbw3w7Zz.js";import"./index-7qYBiH1_.js";import"./Button-DMAlCpIp.js";import"./IconWarning-lf4U_i6L.js";import"./Text-CaSL42bb.js";import"./browser-CJKA82in.js";import"./EmulatedBoldText-BlAgkMNP.js";import"./Text-Diya8EQq.js";import"./utils-jbl8fYpp.js";import"./LoadingSpinner-MRX8b_Xd.js";import"./useLocalizedStringFormatter-DTJzl0HQ.js";import"./context-BHbmanCt.js";import"./Button-TD7SThT2.js";import"./ProgressBar-DX53PXke.js";import"./Label-q6ExZamY.js";import"./Hidden-YoIeoCE-.js";import"./filterDOMProps-CrrfCvhk.js";import"./useLabel-BGrVe235.js";import"./NumberFormatter-DNR9MAW-.js";import"./LiveAnnouncer-Cy654hVN.js";import"./usePress-wge_TV6C.js";import"./useFocus-DysN_qPg.js";import"./useFocusRing-BnOgNpG6.js";import"./useFocusable-CpPH01B7.js";import"./InlineCode-Ir74uO4D.js";import"./Link-BmC3mggo.js";import"./Tooltip-DbVuKibB.js";import"./OverlayArrow-Igqyksxq.js";import"./useControlledState-N3OdDP8Q.js";import"./react-children-utilities-CZDS_T2I.js";import"./Action-gNhXMKos.js";import"./context-CvEBZO7B.js";import"./useStatic-BgXEq_zL.js";import"./getActionGroupSlot-D7vgPX0T.js";import"./dynamic-DKDa4OpU.js";import"./onlyText-5reXy_yA.js";const ot={title:"Content/LabeledValue/Edge Cases",...a},r={render:m=>t.jsxs(p,{...m,children:[t.jsx(i,{children:o.medium}),t.jsx(n,{children:o.short}),t.jsx(s,{text:o.short})]})},e={render:m=>t.jsxs(p,{...m,children:[t.jsx(i,{children:o.medium}),t.jsx(n,{children:o.long}),t.jsx(s,{text:o.long})]})};r.parameters={...r.parameters,docs:{...r.parameters?.docs,source:{originalSource:`{
  render: props => <LabeledValue {...props}>
      <Label>{dummyText.medium}</Label>
      <Content>{dummyText.short}</Content>
      <CopyButton text={dummyText.short} />
    </LabeledValue>
}`,...r.parameters?.docs?.source}}};e.parameters={...e.parameters,docs:{...e.parameters?.docs,source:{originalSource:`{
  render: props => <LabeledValue {...props}>
      <Label>{dummyText.medium}</Label>
      <Content>{dummyText.long}</Content>
      <CopyButton text={dummyText.long} />
    </LabeledValue>
}`,...e.parameters?.docs?.source}}};const rt=["LongLabel","LongContent"];export{e as LongContent,r as LongLabel,rt as __namedExportsOrder,ot as default};
