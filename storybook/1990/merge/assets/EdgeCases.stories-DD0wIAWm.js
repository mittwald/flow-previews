import{j as r}from"./iframe-Dmf5T25c.js";import{I as i}from"./InlineCode-b4mV08_5.js";import{T as d}from"./Text-DLrkajvz.js";import s from"./Default.stories-KKSzsmwv.js";import{d as m}from"./dummyText-CX_I_Wpl.js";import{S as a}from"./Section-CuethHEJ.js";import"./index-Cun1SEai.js";import"./clsx-B-dksMZM.js";import"./flowComponent-CPeLqOpb.js";import"./index-DqWAPupW.js";import"./index-C0-6kTd0.js";import"./browser-DrFxiFmb.js";import"./EmulatedBoldText-B4ifPFjU.js";import"./Text-DgEV6luH.js";import"./utils-DsML-bt_.js";import"./ContextMenuSection-DC2rWjKA.js";import"./Action-7bo_XniG.js";import"./context-DfHcYJaf.js";import"./useStatic-B7bUROdd.js";import"./getActionGroupSlot-CsRvNk5a.js";import"./dynamic-Do2mwXEo.js";import"./Dialog-BPlr3UWC.js";import"./Button--dPgG3q3.js";import"./ProgressBar-DfDGPnCO.js";import"./Label-D3KFpetT.js";import"./Hidden-ixkSnYSe.js";import"./filterDOMProps-CghfNOdR.js";import"./context-CfglF3Ge.js";import"./NumberFormatter-DNR9MAW-.js";import"./LiveAnnouncer-CeCcBDbP.js";import"./usePress-BaxinNTr.js";import"./useFocus-DeIDhTP5.js";import"./useFocusRing-DUSzUYSL.js";import"./useFocusable-Cm1AomQc.js";import"./RSPContexts-Bbwd3bcw.js";import"./OverlayArrow-FAQ6eOiA.js";import"./useControlledState-ncLEgmHX.js";import"./Collection-D0Z3i_1t.js";import"./CollectionBuilder-gvxExH9K.js";import"./context-BUTi_CwL.js";import"./Separator-BJYdsHoh.js";import"./SelectionManager-2dfHW5bj.js";import"./useEvent-DYLx6Izz.js";import"./useCollator-BMcltKGA.js";import"./FocusScope-XGh4Ynry.js";import"./useLocalizedStringFormatter-BKpY3AP6.js";import"./VisuallyHidden-CtSvbpyT.js";const im={...s,title:"Content/InlineCode/Edge Cases"},o={render:t=>r.jsx(a,{children:r.jsxs(d,{children:[m.medium," ",r.jsx(i,{...t,children:m.medium.replaceAll(" ","")})," ",m.medium,r.jsx(i,{...t,children:m.medium})," ",m.medium]})})};var e,p,n;o.parameters={...o.parameters,docs:{...(e=o.parameters)==null?void 0:e.docs,source:{originalSource:`{
  render: props => <Section>
      <Text>
        {dummyText.medium}{" "}
        <InlineCode {...props}>
          {dummyText.medium.replaceAll(" ", "")}
        </InlineCode>{" "}
        {dummyText.medium}
        <InlineCode {...props}>{dummyText.medium}</InlineCode>{" "}
        {dummyText.medium}
      </Text>
    </Section>
}`,...(n=(p=o.parameters)==null?void 0:p.docs)==null?void 0:n.source}}};const em=["LongText"];export{o as LongText,em as __namedExportsOrder,im as default};
