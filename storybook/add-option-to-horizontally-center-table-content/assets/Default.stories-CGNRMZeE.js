import{R as e}from"./index-B-o1Wr-g.js";import{B as o}from"./Button-D9HNWnpO.js";import{A as y}from"./ActionGroup-B4wWjge6.js";import{f as D,P as W,b as A,O as F}from"./flowComponent-CEd0CzY8.js";import{O as _}from"./Overlay-CLuxVxLn.js";import{c as q}from"./clsx-B-dksMZM.js";import{u as L,O as R}from"./OverlayTrigger-ruXfHWGY.js";import"./IconApp-DFPpgbjh.js";import{l as $,h as v,y as C}from"./IconWarning-DuhRJDTQ.js";import{$ as k}from"./Dialog-CbvlC6bd.js";import{I as O}from"./Image-DfOvlNQm.js";import{d as S}from"./dummyText-CX_I_Wpl.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./Wrap-DQq6jo70.js";import"./Text-CfBSLtU1.js";import"./browser-B3hGj0u-.js";import"./EmulatedBoldText-1x_0FOGF.js";import"./Text-R-rrVGxo.js";import"./utils-7gTBvjqH.js";import"./index-ynQ6n1pc.js";import"./index-DolzVqEf.js";import"./LoadingSpinner-Dsqn1kxI.js";import"./useLocalizedStringFormatter-BQr1rA-c.js";import"./Button-CPCoFgob.js";import"./ProgressBar-BQAJCbMD.js";import"./Label-CqgmsInd.js";import"./Hidden-CRdWNeH8.js";import"./filterDOMProps-CeZl_uWj.js";import"./useLabel-DrlXsFf-.js";import"./NumberFormatter-DNR9MAW-.js";import"./LiveAnnouncer-CeCcBDbP.js";import"./useFocusable-BXVt7Q_3.js";import"./useFocusRing-CTDVvBmm.js";import"./usePress-C3EQNDer.js";import"./dynamic-DKDa4OpU.js";import"./getActionGroupSlot-DMWUfgla.js";import"./useSelector-CuklJFny.js";import"./OverlayArrow-CuXMKzfT.js";import"./useControlledState-BgxdDqm0.js";import"./context-DNWWeKK1.js";import"./RSPContexts-BT50PPhj.js";import"./Collection-CYXS91v-.js";import"./CollectionBuilder-cPXIJfS-.js";import"./Separator-C4vObYq_.js";import"./SelectionManager-ubMUrr_P.js";import"./FocusScope-DvafcTTH.js";import"./useEvent-CmPtILZD.js";import"./useCollator-DiB6vpBo.js";import"./VisuallyHidden-lWpahT0S.js";const j="flow--light-box",z="flow--light-box--content",H="flow--light-box--fit-screen",J="flow--light-box--actions",K="flow--light-box--action-group",n={lightBox:j,content:z,fitScreen:H,actions:J,actionGroup:K},s=D("LightBox",t=>{const{controller:r,children:m,refProp:M,className:P,fitScreen:T=!0,...b}=t,w=q(n.lightBox,T&&n.fitScreen,P),G={ActionGroup:{className:n.actionGroup,Button:{variant:"soft",color:"light"},tunnelId:"actionGroup",ignoreBreakpoint:!0}},N=L("LightBox",{reuseControllerFromContext:!0}),l=r??N;return e.createElement(_,{overlayType:"LightBox",className:w,controller:l,...b},e.createElement(W,{props:G},e.createElement(A,null,e.createElement("div",{className:n.content},m),e.createElement("div",{className:n.actions},e.createElement(o,{color:"light",variant:"soft",onPress:l==null?void 0:l.close},e.createElement($,null)),e.createElement(F,{id:"actionGroup"})))))});s.__docgenInfo={description:"",methods:[],displayName:"LightBox"};const I=t=>{const{children:r,...m}=t;return e.createElement(R,{overlayType:"LightBox",...m,component:k},r)};I.__docgenInfo={description:"",methods:[],displayName:"LightBoxTrigger",props:{tunnelId:{required:!1,tsType:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]},description:"@internal"},wrapWith:{required:!1,tsType:{name:"ReactElement"},description:""},isDefaultOpen:{required:!1,tsType:{name:"boolean"},description:"Whether the overlay should be open initially."},controller:{required:!1,tsType:{name:"OverlayController"},description:"A controller to control the state of the overlay."}},composes:["PropsWithChildren"]};const ze={title:"Overlays/LightBox",component:s,parameters:{controls:{exclude:["controller"]}},render:t=>e.createElement(I,null,e.createElement(o,null,"Open LightBox"),e.createElement(s,{...t},e.createElement(O,{src:S.imageSrc}),e.createElement(y,null,e.createElement(o,null,e.createElement(v,null)),e.createElement(o,null,e.createElement(C,null)))))},i={},a={args:{fitScreen:!1}},c={render:t=>{const r=L("LightBox");return e.createElement(e.Fragment,null,e.createElement(o,{onPress:r.open},"Open LightBox"),e.createElement(s,{...t,controller:r},e.createElement(O,{src:S.imageSrc}),e.createElement(y,null,e.createElement(o,null,e.createElement(v,null)),e.createElement(o,null,e.createElement(C,null)))))}};var p,u,g;i.parameters={...i.parameters,docs:{...(p=i.parameters)==null?void 0:p.docs,source:{originalSource:"{}",...(g=(u=i.parameters)==null?void 0:u.docs)==null?void 0:g.source}}};var d,f,h;a.parameters={...a.parameters,docs:{...(d=a.parameters)==null?void 0:d.docs,source:{originalSource:`{
  args: {
    fitScreen: false
  }
}`,...(h=(f=a.parameters)==null?void 0:f.docs)==null?void 0:h.source}}};var x,B,E;c.parameters={...c.parameters,docs:{...(x=c.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: props => {
    const controller = useOverlayController("LightBox");
    return <>
        <Button onPress={controller.open}>Open LightBox</Button>
        <LightBox {...props} controller={controller}>
          <Image src={dummyText.imageSrc} />
          <ActionGroup>
            <Button>
              <IconDownload />
            </Button>
            <Button>
              <IconDelete />
            </Button>
          </ActionGroup>
        </LightBox>
      </>;
  }
}`,...(E=(B=c.parameters)==null?void 0:B.docs)==null?void 0:E.source}}};const He=["Default","WithoutFitScreen","WithController"];export{i as Default,c as WithController,a as WithoutFitScreen,He as __namedExportsOrder,ze as default};
