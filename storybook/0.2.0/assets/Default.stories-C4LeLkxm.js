import{R as e}from"./index-BbMBc-iG.js";import{B as o}from"./Button-1rw05oyV.js";import{A as y}from"./ActionGroup-h4TxZ6ye.js";import{f as A,P as D,O as W}from"./flowComponent-CaEd1ouJ.js";import{O as F}from"./Overlay-CfRcz_ow.js";import{c as _}from"./clsx-B-dksMZM.js";import{u as L,O as q}from"./OverlayTrigger-CO8vF-4q.js";import{P as R}from"./PropsContextProvider-BgoMLKZk.js";import"./IconApp-B_zPpa1A.js";import{o as $,i as v,A as C}from"./IconWarning-CceziLlX.js";import{$ as k}from"./Dialog-BQ_biHhV.js";import{I as O}from"./Image-D4Br_63c.js";import{d as S}from"./dummyText-CX_I_Wpl.js";import"./_commonjsHelpers-Cpj98o6Y.js";import"./Wrap-DQq6jo70.js";import"./Text-D6naXSDy.js";import"./browser-DXl7VCm2.js";import"./EmulatedBoldText-ZO8wNulR.js";import"./Text-oWh285ma.js";import"./utils-D4Vol65q.js";import"./index-CPTjWdH1.js";import"./index-U7Evrs-N.js";import"./LoadingSpinner-y4xqeSCe.js";import"./useLocalizedStringFormatter-DYdTqA_9.js";import"./Button-8ZRRpxMH.js";import"./ProgressBar-tRLoFn7O.js";import"./Label-BybFgH_Q.js";import"./Hidden-BN0YEbzJ.js";import"./filterDOMProps-BSfnXAP7.js";import"./useLabel-C5NcpKQ2.js";import"./NumberFormatter-DT0cDaax.js";import"./LiveAnnouncer-DFDjXwI8.js";import"./useFocusable-BA3lYSOI.js";import"./useFocusRing-DA2rHHrb.js";import"./usePress-DotMbixf.js";import"./dynamic-DKDa4OpU.js";import"./getActionGroupSlot-CHxkKRmy.js";import"./useSelector-CI2pTLXu.js";import"./OverlayArrow-CrZGdHWF.js";import"./useControlledState-CMnoB41k.js";import"./context-PpKQHRcf.js";import"./react-children-utilities-BBO5HXrA.js";import"./RSPContexts-CBHfX6hb.js";import"./Collection-BUbbDiz9.js";import"./CollectionBuilder-DOwRmyqO.js";import"./Separator-CpmRlxds.js";import"./SelectionManager-DnQnei6w.js";import"./FocusScope-TaiHum7E.js";import"./useEvent-D1lr70i2.js";import"./useCollator-CzQekWjs.js";import"./VisuallyHidden-CAwLSgYE.js";const j="flow--light-box",z="flow--light-box--content",H="flow--light-box--fit-screen",J="flow--light-box--actions",K="flow--light-box--action-group",n={lightBox:j,content:z,fitScreen:H,actions:J,actionGroup:K},s=A("LightBox",t=>{const{controller:r,children:m,ref:M,className:T,fitScreen:w=!0,...P}=t,b=_(n.lightBox,w&&n.fitScreen,T),G={ActionGroup:{className:n.actionGroup,Button:{variant:"soft",color:"light"},tunnelId:"actionGroup",ignoreBreakpoint:!0}},N=L("LightBox",{reuseControllerFromContext:!0}),l=r??N;return e.createElement(F,{overlayType:"LightBox",className:b,controller:l,...P},e.createElement(R,{props:G},e.createElement(D,null,e.createElement("div",{className:n.content},m),e.createElement("div",{className:n.actions},e.createElement(o,{color:"light",variant:"soft",onPress:l==null?void 0:l.close},e.createElement($,null)),e.createElement(W,{id:"actionGroup"})))))});s.__docgenInfo={description:"@flr-generate all",methods:[],displayName:"LightBox"};const I=t=>{const{children:r,...m}=t;return e.createElement(q,{overlayType:"LightBox",...m,component:k},r)};I.__docgenInfo={description:"@flr-generate all",methods:[],displayName:"LightBoxTrigger",props:{tunnelId:{required:!1,tsType:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]},description:"@internal"},wrapWith:{required:!1,tsType:{name:"ReactElement"},description:""},isDefaultOpen:{required:!1,tsType:{name:"boolean"},description:"Whether the overlay should be open initially."},controller:{required:!1,tsType:{name:"OverlayController"},description:"A controller to control the state of the overlay."}},composes:["PropsWithChildren"]};const Je={title:"Overlays/LightBox",component:s,parameters:{controls:{exclude:["controller"]}},render:t=>e.createElement(I,null,e.createElement(o,null,"Open LightBox"),e.createElement(s,{...t},e.createElement(O,{src:S.imageSrc}),e.createElement(y,null,e.createElement(o,null,e.createElement(v,null)),e.createElement(o,null,e.createElement(C,null)))))},i={},a={args:{fitScreen:!1}},c={render:t=>{const r=L("LightBox");return e.createElement(e.Fragment,null,e.createElement(o,{onPress:r.open},"Open LightBox"),e.createElement(s,{...t,controller:r},e.createElement(O,{src:S.imageSrc}),e.createElement(y,null,e.createElement(o,null,e.createElement(v,null)),e.createElement(o,null,e.createElement(C,null)))))}};var p,u,g;i.parameters={...i.parameters,docs:{...(p=i.parameters)==null?void 0:p.docs,source:{originalSource:"{}",...(g=(u=i.parameters)==null?void 0:u.docs)==null?void 0:g.source}}};var d,f,h;a.parameters={...a.parameters,docs:{...(d=a.parameters)==null?void 0:d.docs,source:{originalSource:`{
  args: {
    fitScreen: false
  }
}`,...(h=(f=a.parameters)==null?void 0:f.docs)==null?void 0:h.source}}};var x,B,E;c.parameters={...c.parameters,docs:{...(x=c.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: props => {
    const controller = useOverlayController("LightBox");
    return <>
        <Button onPress={controller.open}>Open LightBox</Button>
        <LightBox {...props} controller={controller}>
          <Image src={dummyText.imageSrc} />
          <ActionGroup>
            <Button>
              <IconDownload />
            </Button>
            <Button>
              <IconDelete />
            </Button>
          </ActionGroup>
        </LightBox>
      </>;
  }
}`,...(E=(B=c.parameters)==null?void 0:B.docs)==null?void 0:E.source}}};const Ke=["Default","WithoutFitScreen","WithController"];export{i as Default,c as WithController,a as WithoutFitScreen,Ke as __namedExportsOrder,Je as default};
