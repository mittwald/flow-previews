import{S as a,O as l}from"./Option-C5cGBWEa.js";import{R as t}from"./index-BwDkhjyp.js";import{L as n}from"./Label-BD5VUJI0.js";import s from"./Default.stories-B-A29KLW.js";import"./PropsContextProvider-DwTel3aB.js";import"./index-DVe9vSxq.js";import"./clsx-B-dksMZM.js";import"./FormField.module-DQthEUsq.js";import"./IconApp-ZB_mDMmk.js";import"./_commonjsHelpers-BosuxZz1.js";import"./flowComponent-DpPOHS38.js";import"./index-B8XB3FuZ.js";import"./IconWarning-BtAGI7Yn.js";import"./Form-CuH0gdtx.js";import"./useFocusable-C-qOUFhv.js";import"./utils-CcQIssJO.js";import"./useLabel-BaXqGmeE.js";import"./useLabels-kg7v6Afk.js";import"./Text-DqgvIX4k.js";import"./PopoverTrigger-C-NNp23A.js";import"./OverlayTrigger-C-T-XlBI.js";import"./RSPContexts-Bc9pl35m.js";import"./OverlayArrow-CscfTk_S.js";import"./number-nHrFdSb-.js";import"./useLocalizedStringFormatter-BNeRQeib.js";import"./useControlledState-C0C-dzuH.js";import"./filterDOMProps-CeZl_uWj.js";import"./usePress-Bw-L1sLn.js";import"./FocusScope-DBQ4F6TM.js";import"./getScrollParent-CcmJp979.js";import"./VisuallyHidden-BopbO3Wg.js";import"./context-D0eOVtdN.js";import"./useSelector-43iio57k.js";import"./ListBox-B2AXRRm2.js";import"./Collection-wxk3VkXl.js";import"./useDragAndDrop-1zf7j-vC.js";import"./Header-tof3fAA-.js";import"./Separator-mwJ01TZq.js";import"./useListState-DIndkdGn.js";import"./SelectionManager-CSYAD4ny.js";import"./useEvent-m5sATXdH.js";import"./useMenuTrigger-_tXWyjWN.js";import"./Button-CoDApBTL.js";import"./Label-J_0igrPF.js";import"./useSingleSelectListState-OgY9R3mg.js";import"./useFormReset-CfqvoD0r.js";import"./FieldDescription-BSEJ-1b-.js";import"./Text-5DZcOrRy.js";import"./EmulatedBoldText-B1t6hs5E.js";import"./Wrap-DQq6jo70.js";const lr={...s,title:"Form Controls/Select/Edge Cases"},r={render:e=>t.createElement(a,{...e},t.createElement(n,null,"Label"),Array(20).fill("").map((c,o)=>t.createElement(l,{key:o},"Option ",o+1)))};var m,p,i;r.parameters={...r.parameters,docs:{...(m=r.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: props => <Select {...props}>
      <Label>Label</Label>
      {Array(20).fill("").map((value, index) => <Option key={index}>Option {index + 1}</Option>)}
    </Select>
}`,...(i=(p=r.parameters)==null?void 0:p.docs)==null?void 0:i.source}}};const nr=["Default"];export{r as Default,nr as __namedExportsOrder,lr as default};
