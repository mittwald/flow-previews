import{O as d,u,o as f}from"./context-B447f_pA.js";import{r as m,j as n}from"./iframe-Coh3lrZj.js";import{b as v,c as h}from"./Dialog-DCw7F88C.js";import{f as x,P as O,v as T}from"./PropsContextProvider-CKV7yByX.js";const q=(e,r={})=>{const{reuseControllerFromContext:l=!0,isDefaultOpen:a,onOpen:o,onClose:t}=r,c=d.useNew({isDefaultOpen:a,onOpen:o,onClose:t}),s=u()[e],i=l&&s?s:c;return m.useEffect(()=>{const p=[];return o&&p.push(i.addOnOpen(o)),t&&p.push(i.addOnClose(t)),()=>{p.forEach(C=>C())}},[o,t]),i},y=e=>n.jsx(v,{...e});y.__docgenInfo={description:"@flr-generate all",methods:[],displayName:"DialogTrigger"};const w=x("MenuTrigger",e=>n.jsx(h,{...e}));w.__docgenInfo={description:"@flr-generate all",methods:[],displayName:"MenuTrigger"};const g=e=>{const{type:r,controller:l,children:a}=e,o=u();return n.jsx(f.Provider,{value:{...o,[r]:l},children:a})};g.__docgenInfo={description:"",methods:[],displayName:"OverlayContextProvider",props:{type:{required:!0,tsType:{name:"FlowComponentName"},description:""},controller:{required:!0,tsType:{name:"OverlayController"},description:""}},composes:["PropsWithChildren"]};const N=e=>{const{overlayType:r,isDefaultOpen:l=!1,component:a,children:o,controller:t}=e,c=d.useNew({isDefaultOpen:l}),s=t??c,i=s.useIsOpen(),p={Button:{onPress:s.open}};return n.jsx(g,{type:r,controller:s,children:n.jsx(O,{props:p,mergeInParentContext:!0,children:n.jsx(a,{isOpen:i,children:o})})})};N.__docgenInfo={description:"",methods:[],displayName:"OverlayTrigger",props:{isDefaultOpen:{required:!1,tsType:{name:"boolean"},description:"Whether the overlay should be open initially."},controller:{required:!1,tsType:{name:"OverlayController"},description:"A controller to control the state of the overlay."},overlayType:{required:!0,tsType:{name:"FlowComponentName"},description:""},component:{required:!0,tsType:{name:"ComponentType",elements:[{name:"signature",type:"object",raw:`{
  isOpen?: boolean;
  children: ReactNode;
}`,signature:{properties:[{key:"isOpen",value:{name:"boolean",required:!1}},{key:"children",value:{name:"ReactNode",required:!0}}]}}],raw:`ComponentType<{
  isOpen?: boolean;
  children: ReactNode;
}>`},description:""}},composes:["FlowComponentProps","PropsWithChildren"]};const P=e=>{const r=m.useContext(T).DialogTrigger??y;return n.jsx(r,{...e})};P.__docgenInfo={description:"",methods:[],displayName:"DialogTriggerView"};export{P as D,w as M,N as O,g as a,q as u};
