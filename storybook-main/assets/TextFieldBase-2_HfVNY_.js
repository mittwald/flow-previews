import{j as $}from"./jsx-runtime-D_zvdyIk.js";import{r as s,R as P}from"./index-CgfFrydU.js";import{f as c}from"./FormField.module-B9AzUSUD.js";import{c as I}from"./clsx-B-dksMZM.js";import{C as j,P as q}from"./PropsContextProvider-B9e9kKsf.js";import{F as O}from"./FieldError-BliU6s2n.js";import{F as S}from"./FieldDescription-B-Bd-DqX.js";import{$ as M}from"./useLocalizedStringFormatter-BzGhSkyu.js";import{$ as R,a as B,f as V,d as _,e as A,b as w}from"./utils-Bm37ngJk.js";import{a as L}from"./FieldError-C4lz7LlR.js";import{a as W}from"./Form-BD87mkug.js";import{$ as N}from"./Input-D0tr6WTW.js";import{a as k}from"./Label-B_sU3NXB.js";import{a as U,b as Z}from"./useFocusRing-wzjDdF0K.js";import{$ as D}from"./mergeRefs-DiwoqHxs.js";import{a as z}from"./Text-I7rzu-gq.js";import{$ as G}from"./Hidden-DwT0szmK.js";import{$ as J}from"./filterDOMProps-CeZl_uWj.js";import{$ as K}from"./useTextField-CliupxYA.js";const H=s.createContext({});let Q=a=>{let{onHoverStart:e,onHoverChange:r,onHoverEnd:d,...t}=a;return t};const Fe=s.forwardRef(function(e,r){[e,r]=R(e,r,H);let{hoverProps:d,isHovered:t}=U(e),{isFocused:i,isFocusVisible:n,focusProps:f}=Z({isTextInput:!0,autoFocus:e.autoFocus}),l=!!e["aria-invalid"]&&e["aria-invalid"]!=="false",o=B({...e,values:{isHovered:t,isFocused:i,isFocusVisible:n,isDisabled:e.disabled||!1,isInvalid:l},defaultClassName:"react-aria-TextArea"});return P.createElement("textarea",{...D(Q(e),f,d),...o,ref:r,"data-focused":i||void 0,"data-disabled":e.disabled||void 0,"data-hovered":t||void 0,"data-focus-visible":n||void 0,"data-invalid":l||void 0})}),X=s.createContext(null),Y=G(function(e,r){[e,r]=R(e,r,X);let{validationBehavior:d}=V(W)||{};var t,i;let n=(i=(t=e.validationBehavior)!==null&&t!==void 0?t:d)!==null&&i!==void 0?i:"native",f=s.useRef(null),[l,o]=R({},f,N),[b,x]=_(!e["aria-label"]&&!e["aria-labelledby"]),[p,h]=s.useState("input"),{labelProps:v,inputProps:u,descriptionProps:m,errorMessageProps:g,...C}=K({...A(e),inputElementType:p,label:x,validationBehavior:n},o),T=s.useCallback(F=>{o.current=F,F&&h(F instanceof HTMLTextAreaElement?"textarea":"input")},[o]),E=B({...e,values:{isDisabled:e.isDisabled||!1,isInvalid:C.isInvalid,isReadOnly:e.isReadOnly||!1,isRequired:e.isRequired||!1},defaultClassName:"react-aria-TextField"}),y=J(e);return delete y.id,P.createElement("div",{...y,...E,ref:r,slot:e.slot||void 0,"data-disabled":e.isDisabled||void 0,"data-invalid":C.isInvalid||void 0,"data-readonly":e.isReadOnly||void 0,"data-required":e.isRequired||void 0},P.createElement(w,{values:[[k,{...v,ref:b}],[N,{...D(u,l),ref:T}],[H,{...u,ref:T}],[z,{slots:{description:m,errorMessage:g}}],[L,C]]},E.children))}),ee={"de-DE":{"textFieldBase.characters":(a,e)=>`${e.select({0:()=>`${a.count}`,other:()=>`${a.count}/${a.maxCount}`},a.maxCount)} Zeichen`},"en-US":{"textFieldBase.characters":(a,e)=>`${e.select({0:()=>`${a.count}`,other:()=>`${a.count}/${a.maxCount}`},a.maxCount)} characters`}},ae=a=>{var u;const{children:e,className:r,input:d,showCharacterCount:t,ref:i,...n}=a,[f,l]=s.useState(((u=a.value)==null?void 0:u.length)??0),o=I(c.formField,r),b=M(ee),x={Label:{className:c.label,optional:!a.isRequired},FieldDescription:{className:c.fieldDescription},FieldError:{className:c.customFieldError}},p=m=>{t&&l(m.length),a.onChange&&a.onChange(m)},h=b.format("textFieldBase.characters",{count:f,maxCount:a.maxLength??0}),v="value"in a?{value:a.value??""}:{};return $.jsx(j,{children:$.jsxs(Y,{ref:i,...n,className:o,onChange:p,...v,children:[d,$.jsx(q,{props:x,children:e}),t&&$.jsx(S,{className:c.fieldDescription,children:h}),$.jsx(O,{className:c.fieldError})]})})};ae.__docgenInfo={description:"",methods:[],displayName:"TextFieldBase",props:{input:{required:!0,tsType:{name:"ReactNode"},description:"The input element"},showCharacterCount:{required:!1,tsType:{name:"boolean"},description:"Whether a character count should be displayed inside the field description."}},composes:["PropsWithChildren","Pick"]};export{H as $,ae as T,Fe as a};
