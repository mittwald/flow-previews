import{S as a,O as l}from"./Option-d0gW-TSM.js";import{R as t}from"./index-Cs7sjTYM.js";import{L as n}from"./Label-CYWf0UOp.js";import s from"./Default.stories-DUrRgoMn.js";import"./PropsContextProvider-58HgA8rU.js";import"./index-C8LjR2Bd.js";import"./clsx-B-dksMZM.js";import"./FormField.module-B2X-N4DF.js";import"./IconApp-Cq2nF_H2.js";import"./_commonjsHelpers-BosuxZz1.js";import"./flowComponent-CmFvo3FE.js";import"./index-BMdlDBjA.js";import"./IconWarning-CT4MKmtH.js";import"./Form-CAaH4S7w.js";import"./useFocusable-CMUHH7RC.js";import"./utils-Ca6JWPXc.js";import"./useLabel-D8UVq-XF.js";import"./useLabels-DMhdkBu1.js";import"./Text-Bu-3W4UG.js";import"./PopoverTrigger-ogW-oUPn.js";import"./OverlayTrigger-CQB85vT6.js";import"./RSPContexts-BseA8goh.js";import"./OverlayArrow-DEf4p40l.js";import"./number-nHrFdSb-.js";import"./useLocalizedStringFormatter-J1nK3MOF.js";import"./useControlledState-B7K2eYzO.js";import"./filterDOMProps-CeZl_uWj.js";import"./usePress-BgSaJexe.js";import"./FocusScope-CYj0PTxA.js";import"./getScrollParent-CcmJp979.js";import"./VisuallyHidden-DOEjDcNd.js";import"./context-BnTmsIr7.js";import"./useSelector-57VmxYcA.js";import"./ListBox-BnxXtImC.js";import"./Collection-BEvGW34q.js";import"./useDragAndDrop-v_ykJosS.js";import"./Header-Dl17m4NE.js";import"./Separator-BcuXU_Ka.js";import"./useListState-BZ1WJ603.js";import"./SelectionManager-UiwhxUR3.js";import"./useEvent-Be9f7BQw.js";import"./useMenuTrigger-B3aSWIfS.js";import"./Button-ImYwklq8.js";import"./Label-D7wSVlkX.js";import"./useSingleSelectListState-DeBw41Qb.js";import"./useFormReset-DlrFI1sj.js";import"./FieldDescription-ClFNmOV7.js";import"./Text-By_wGPWN.js";import"./EmulatedBoldText-Dmze-Iwg.js";import"./Wrap-DQq6jo70.js";const lr={...s,title:"Form Controls/Select/Edge Cases"},r={render:e=>t.createElement(a,{...e},t.createElement(n,null,"Label"),Array(20).fill("").map((c,o)=>t.createElement(l,{key:o},"Option ",o+1)))};var m,p,i;r.parameters={...r.parameters,docs:{...(m=r.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: props => <Select {...props}>
      <Label>Label</Label>
      {Array(20).fill("").map((value, index) => <Option key={index}>Option {index + 1}</Option>)}
    </Select>
}`,...(i=(p=r.parameters)==null?void 0:p.docs)==null?void 0:i.source}}};const nr=["Default"];export{r as Default,nr as __namedExportsOrder,lr as default};
